#!/usr/bin/perl
# 1 "graph2tred.driver"


package Parser;

# 1 "graph2tred.tab.pl" 1

#A Bison parser, made from graph2tred.y
#by  GNU Bison version 1.25 Perl modifications v1.0


#Identify Bison output.


sub	NUMBER () { 258; }
sub	STRING () { 259; }
sub	KEYS () { 260; }
sub	ID () { 261; }
sub	SID () { 262; }
sub	LID () { 263; }
sub	PID () { 264; }
sub	LABELID () { 265; }
sub	LABELREF () { 266; }
sub	FUNCID () { 267; }

# 2 "graph2tred.y"


  sub yy_keys2func {
    my $aux=shift;
    $aux=~s/\+/_/g;
    return "_key_$aux";
  }

  sub yy_quote_vrule {
    my $aux=shift;
    $aux=~s/\|/\\|/g;
    return $aux;
  }
  

















@yytranslate = (     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    57,     2,     2,     2,     2,    56,     2,    26,
    27,     2,    49,    38,    50,    13,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    20,     2,
    24,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    55,     2,     2,     2,     2,     2,
    41,     2,    42,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    17,     2,    18,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    14,    15,    16,
    19,    21,    22,    23,    25,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    39,    40,    43,    44,    45,
    46,    47,    48,    51,    52,    53,    54,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67
);


@yyprhs = (     0,
     0,     2,     3,     5,     6,     9,    12,    16,    24,    32,
    33,    36,    40,    42,    44,    46,    48,    51,    53,    55,
    57,    59,    60,    63,    66,    67,    69,    74,    79,    84,
    89,    94,    99,   104,   113,   117,   120,   124,   128,   134,
   140,   146,   151,   156,   162,   170,   178,   184,   185,   190,
   192,   194,   196,   198,   205,   210,   214,   216,   223,   227,
   229,   231,   233,   235,   237,   239,   241,   243,   245,   249,
   251,   253,   255,   257,   259,   261,   265,   269,   271,   275,
   279,   283,   287,   289,   291,   293,   295,   304,   313,   318,
   323,   330,   337,   344,   351,   358,   363,   365,   367,   372,
   377,   379,   381,   388,   395,   402,   409,   416,   423,   430,
   437,   442,   446,   448,   452,   454,   456,   460,   464,   468,
   472,   476,   480,   484,   488,   492,   496,   500,   504,   508,
   510,   512,   514,   516,   518,   520,   522,   524,   526
);

@yyrhs = (    69,
     0,     0,    71,     0,     0,    70,    74,     0,    70,    72,
     0,    71,    70,    72,     0,    16,     5,    73,    17,    70,
    81,    18,     0,    16,    12,    73,    17,    70,    81,    18,
     0,     0,    19,     4,     0,    75,    76,    20,     0,    21,
     0,    22,     0,    23,     0,    77,     0,    76,    77,     0,
     6,     0,     7,     0,     9,     0,     8,     0,     0,    81,
    82,     0,    83,    84,     0,     0,    10,     0,    86,    24,
    99,    20,     0,    86,    24,   103,    20,     0,    87,    24,
   102,    20,     0,    89,    24,    99,    20,     0,    89,    24,
   103,    20,     0,    88,    24,    99,    20,     0,    88,    24,
   103,    20,     0,    25,    26,   104,    27,    17,    81,    18,
    85,     0,    28,    11,    20,     0,    29,    20,     0,    30,
     5,    20,     0,    30,    12,    20,     0,    31,    26,   102,
    27,    20,     0,    32,    26,   102,    27,    20,     0,    33,
    26,   102,    27,    20,     0,    34,    26,    27,    20,     0,
    35,    26,    27,    20,     0,    36,    26,    95,    27,    20,
     0,    37,    26,    99,    38,    98,    27,    20,     0,    37,
    26,   103,    38,    98,    27,    20,     0,    39,    26,   102,
    27,    20,     0,     0,    40,    17,    81,    18,     0,    78,
     0,    91,     0,    90,     0,    80,     0,    91,    13,    94,
    41,    95,    42,     0,    80,    41,    95,    42,     0,    91,
    13,    94,     0,    92,     0,    91,    43,    93,    41,    95,
    42,     0,    91,    43,    93,     0,    44,     0,    79,     0,
    45,     0,    46,     0,    47,     0,    48,     0,     3,     0,
     4,     0,    96,     0,    95,    97,    96,     0,    78,     0,
     3,     0,    49,     0,    50,     0,    99,     0,   103,     0,
    98,    38,    99,     0,    98,    38,   103,     0,   100,     0,
   103,    97,   100,     0,   103,    97,   103,     0,    99,    97,
   103,     0,    99,    97,   100,     0,    78,     0,   101,     0,
     4,     0,     3,     0,    51,    26,    99,    38,    95,    38,
    95,    27,     0,    51,    26,   103,    38,    95,    38,    95,
    27,     0,    52,    26,   103,    27,     0,    52,    26,    99,
    27,     0,    53,    26,   103,    38,   103,    27,     0,    53,
    26,    99,    38,   103,    27,     0,    53,    26,   103,    38,
    99,    27,     0,    53,    26,    99,    38,    99,    27,     0,
    91,    13,    94,    41,    95,    42,     0,    80,    41,    95,
    42,     0,    91,     0,    54,     0,    32,    26,   102,    27,
     0,    33,    26,   102,    27,     0,    80,     0,    90,     0,
    55,    26,   103,    38,   103,    27,     0,    55,    26,    99,
    38,    99,    27,     0,    55,    26,   103,    38,    99,    27,
     0,    55,    26,    99,    38,   103,    27,     0,    56,    26,
   103,    38,   103,    27,     0,    56,    26,    99,    38,    99,
    27,     0,    56,    26,   103,    38,    99,    27,     0,    56,
    26,    99,    38,   103,    27,     0,    57,    26,   104,    27,
     0,    26,   104,    27,     0,   106,     0,   104,   105,   104,
     0,    14,     0,    15,     0,   102,   107,   102,     0,    99,
   107,    99,     0,    99,   108,    99,     0,   103,   108,   103,
     0,   103,   108,    99,     0,    99,   108,   103,     0,    99,
   107,   103,     0,   103,   107,    99,     0,   103,   107,   103,
     0,   103,   109,   103,     0,   103,   109,    99,     0,    99,
   109,   103,     0,    99,   109,    99,     0,    58,     0,    59,
     0,    60,     0,    61,     0,    62,     0,    63,     0,    64,
     0,    65,     0,    66,     0,    67,     0
);





@yyrline = ( 0,
    38,    43,    44,    46,    47,    49,    50,    52,    57,    62,
    63,    65,    67,    67,    67,    69,    70,    73,    74,    75,
    76,    78,    79,    81,    83,    84,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   108,   109,   111,
   112,   113,   113,   115,   116,   118,   120,   121,   122,   124,
   125,   127,   128,   129,   130,   132,   133,   135,   136,   138,
   139,   141,   142,   144,   145,   146,   147,   149,   150,   151,
   152,   153,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   169,   170,   172,   173,   174,   175,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   188,   189,   190,   191,   193,   194,   196,   205,   206,   207,
   208,   209,   210,   213,   216,   219,   220,   221,   222,   224,
   225,   227,   228,   229,   230,   231,   232,   234,   235
);









@yytname = (   '$','error','$undefined.','NUMBER',
'STRING','KEYS','ID','SID','LID','PID','LABELID','LABELREF','FUNCID','\'.\'',
'"&&"','"||"','"function"','\'{\'','\'}\'','"comment"','\';\'','"string"','"pointer"',
'"list"','\'=\'','"if"','\'(\'','\')\'','"goto"','"return"','"call"','"Cut"',
'"Paste"','"NewNode"','"TreeNext"','"TreePrev"','"TreeGoTo"','"Print"','\',\'',
'"Remove"','"else"','\'[\'','\']\'','"->"','"this"','"lbrother"','"rbrother"',
'"parent"','"firstson"','\'+\'','\'-\'','"substr"','"valnum"','"concat"','"null"',
'\'U\'','\'&\'','\'!\'','"=="','"!="','"#=="','"#!="','"#<"','"#<="','"#>"',
'"#>="','"==="','"=!="','top','program','declarations','macros','macro','comment',
'definition','type','ids','xid','sid','pid','lid','body','bodyline','label',
'command','elseclause','lvaluestring','lvaluenode','lvaluelist','llistspec',
'nodespec','nodepath','node','direction','attrspec','num','numpart','addsign',
'rvalues','rvaluestring','rvaluepartstring','rlistspec','rvaluenode','rvaluelist',
'condition','condsign','comparison','compsign','compnumsign','listcompsign', 'NULL'
);

@yytoknum = ( 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,    46,   268,   269,   270,   123,   125,   271,    59,
   272,   273,   274,    61,   275,    40,    41,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,    44,   286,   287,
    91,    93,   288,   289,   290,   291,   292,   293,    43,    45,
   294,   295,   296,   297,    85,    38,    33,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   307,     0
);


@yyr1 = (     0,
    68,    69,    69,    70,    70,    71,    71,    72,    72,    73,
    73,    74,    75,    75,    75,    76,    76,    77,    78,    79,
    80,    81,    81,    82,    83,    83,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    85,    85,    86,
    87,    88,    88,    89,    89,    90,    91,    91,    91,    92,
    92,    93,    93,    93,    93,    94,    94,    95,    95,    96,
    96,    97,    97,    98,    98,    98,    98,    99,    99,    99,
    99,    99,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   101,   101,   102,   102,   102,   102,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   104,   104,   104,   104,   105,   105,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   106,   106,   106,   107,
   107,   108,   108,   108,   108,   108,   108,   109,   109
);

@yyr2 = (     0,
     1,     0,     1,     0,     2,     2,     3,     7,     7,     0,
     2,     3,     1,     1,     1,     1,     2,     1,     1,     1,
     1,     0,     2,     2,     0,     1,     4,     4,     4,     4,
     4,     4,     4,     8,     3,     2,     3,     3,     5,     5,
     5,     4,     4,     5,     7,     7,     5,     0,     4,     1,
     1,     1,     1,     6,     4,     3,     1,     6,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     1,     1,     1,     3,     3,     1,     3,     3,
     3,     3,     1,     1,     1,     1,     8,     8,     4,     4,
     6,     6,     6,     6,     6,     4,     1,     1,     4,     4,
     1,     1,     6,     6,     6,     6,     6,     6,     6,     6,
     4,     3,     1,     3,     1,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1
);

@yydefact = (     4,
     1,     0,     4,     0,    13,    14,    15,     6,     5,     0,
     0,    10,    10,    18,     0,    16,     7,     0,     0,     0,
    12,    17,    11,     4,     4,    22,    22,    25,    25,    26,
     8,    23,     0,     9,    19,    21,    20,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    60,
    50,    61,    53,    24,     0,     0,     0,     0,    52,    51,
    57,     0,     0,    36,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    86,    85,     0,     0,     0,     0,     0,     0,    98,
     0,     0,     0,    83,   101,   102,    97,     0,    78,    84,
     0,     0,     0,   113,    35,    37,    38,    97,     0,     0,
     0,     0,     0,    71,    70,     0,    68,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    66,
    67,    56,    62,    63,    64,    65,    59,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    72,    73,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
   116,     0,     0,     0,     0,     0,    42,    43,     0,     0,
     0,     0,     0,    55,    27,    28,    29,    32,    33,    30,
    31,     0,     0,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    56,    82,
    81,   118,   123,   119,   122,   129,   128,   117,    79,    80,
   124,   125,   121,   120,   127,   126,    22,   114,    39,    40,
    41,    44,    69,     0,    74,    75,     0,    47,     0,     0,
    99,   100,     0,     0,    90,    89,     0,     0,     0,     0,
     0,     0,   111,    96,     0,    25,     0,     0,     0,    54,
    58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    48,    45,    76,    77,
    46,     0,     0,    94,    92,    93,    91,   104,   106,   105,
   103,   108,   110,   109,   107,    95,     0,    34,     0,     0,
    22,    87,    88,    25,    49,     0,     0,     0
);

@yydefgoto = (   306,
     1,     2,     3,     8,    19,     9,    10,    15,    16,    94,
    52,    95,    28,    32,    33,    54,   298,    55,    56,    57,
    58,    96,   118,    61,   137,   132,   116,   117,   161,   234,
    98,    99,   100,   101,   102,   103,   173,   104,   162,   163,
   164
);

@yypact = (    10,
-32768,   290,    22,    70,-32768,-32768,-32768,-32768,-32768,     7,
   290,     6,     6,-32768,     0,-32768,-32768,    38,    15,    39,
-32768,-32768,-32768,-32768,-32768,   354,   354,    28,   119,-32768,
-32768,-32768,   359,-32768,-32768,-32768,-32768,    40,    65,    71,
   137,    59,   105,   118,   127,   153,   187,   200,   209,-32768,
-32768,-32768,   191,-32768,   182,   225,   252,   259,-32768,    -2,
-32768,   263,   272,-32768,   281,   288,    -5,    -5,    -5,   315,
   338,   348,   318,    -5,   348,   318,    -5,   318,   318,   107,
   283,-32768,-32768,   263,   346,   357,   371,   378,   379,-32768,
   380,   381,   382,-32768,   238,-32768,     8,   274,-32768,-32768,
   321,   274,    94,-32768,-32768,-32768,-32768,   342,   383,   384,
   386,   389,   392,-32768,-32768,    18,-32768,     8,   167,   184,
   387,   131,   -15,   -13,   395,     4,     9,    11,    13,-32768,
-32768,   375,-32768,-32768,-32768,-32768,   376,   151,    -5,    -5,
   318,   318,   318,   318,   318,   263,   348,   107,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   318,   318,   318,   318,    -5,   318,   318,   318,   318,-32768,
-32768,   401,   263,   399,   400,   402,-32768,-32768,   403,   348,
   318,   318,   404,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   348,   348,-32768,   394,   398,   193,   198,    20,    37,
   206,   219,   235,   250,   253,   255,   162,   203,   388,-32768,
-32768,   332,   332,   332,   332,   332,   332,-32768,-32768,-32768,
   332,   332,   332,   332,   332,   332,-32768,   385,-32768,-32768,
-32768,-32768,-32768,   -19,   332,   332,    45,-32768,   212,   308,
-32768,-32768,   348,   348,-32768,-32768,   318,   318,   318,   318,
   318,   318,-32768,-32768,   348,   141,   406,   318,   407,-32768,
-32768,   260,   311,    44,    46,    57,    63,    74,    89,   106,
   108,   113,   165,   169,   171,   314,   390,-32768,   332,   332,
-32768,   348,   348,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   411,-32768,   175,   180,
-32768,-32768,-32768,   276,-32768,   431,   432,-32768
);

@yypgoto = (-32768,
-32768,   122,-32768,   422,   421,-32768,-32768,-32768,   420,   -32,
-32768,   405,   -27,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   408,   213,-32768,-32768,   289,   -73,   256,   -72,   257,
    96,   -39,-32768,   -51,   -64,   -81,-32768,-32768,   300,   340,
   341
);





@yytable = (    29,
    51,   122,   138,    37,   185,    14,   186,   257,   120,    -2,
    80,   124,    14,   127,   129,   109,   110,   111,   258,    21,
   148,    -3,   121,   188,    18,   125,    85,    86,   189,   166,
   190,    24,   191,   149,   150,   149,   150,    30,    50,   115,
    81,    23,   115,   180,   179,    31,   245,   166,    90,   180,
    81,   166,   149,   150,   166,    25,   166,   149,   150,   149,
   150,   149,   150,   246,   207,    62,   149,   150,   149,   150,
   284,   259,   285,   208,    12,    63,   198,   200,   202,   204,
   206,    13,   258,   286,    67,   149,   150,   195,   196,   287,
    64,   228,   149,   150,   149,   150,   211,   213,   215,   217,
   288,   220,   222,   224,   226,   149,   150,   170,   171,   130,
   131,   149,   150,   218,   115,   289,   236,   236,   239,   240,
   172,   210,   149,   150,    11,   166,   219,   166,    30,   166,
    68,   166,   290,   166,   291,   180,    34,   149,   150,   292,
   166,    65,   166,    69,   166,    26,    27,   115,    66,   166,
    30,   166,    70,   166,   149,   150,   149,   150,   277,   115,
   115,   149,   150,   166,   170,   171,   180,   180,   119,   262,
   263,   123,   184,   126,   128,   170,   171,   194,    71,   149,
   150,   276,   265,   267,   269,   271,   273,   275,   253,   180,
   180,   293,   166,   280,   166,   294,   166,   295,   166,   256,
   166,   302,   166,   180,   181,    76,   303,   166,   299,   300,
   115,   115,    72,   149,   150,   149,   150,   149,   150,   149,
   150,   182,   115,   149,   150,    73,   180,   180,   149,   150,
   243,    75,   149,   150,    74,   244,   197,   199,   201,   203,
   205,   149,   150,   247,   254,    60,   149,   150,    77,   115,
   115,   149,   150,   260,   149,   150,   248,   212,   214,   216,
   149,   150,   221,   223,   225,    82,    83,   149,   150,    35,
    36,    37,   249,   304,    97,    78,   235,   235,   147,   108,
   108,   108,    79,   149,   150,    30,   108,   250,    84,   108,
   251,   105,   252,   305,    85,    86,    97,   282,   149,   150,
   106,   149,   150,   149,   150,     4,    50,   107,   149,   150,
     5,     6,     7,    87,    88,    89,    90,    91,    92,    93,
    82,    83,   149,   150,    35,    36,    37,   133,   134,   135,
   136,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   112,   264,   266,   268,   270,   272,   274,   283,   261,
   114,   108,   108,   279,    35,   296,   149,   150,    97,   149,
   150,    50,   149,   150,   113,    35,    36,    37,    87,    88,
    89,   139,    91,    92,     5,     6,     7,   108,   151,   152,
   149,   150,   140,    38,    81,    97,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,   141,    49,   170,   171,
   165,   167,    50,   142,   143,   144,   145,   146,   177,   174,
   175,   178,   176,   183,   187,   192,   193,   227,   229,   230,
   241,   231,   232,   238,   242,   278,   281,   301,   255,   297,
   307,   308,    17,    20,    22,   233,   209,    53,   237,     0,
    59,   168,   169
);

@yycheck = (    27,
    33,    75,    84,     9,    20,     6,    20,    27,    73,     0,
    13,    76,     6,    78,    79,    67,    68,    69,    38,    20,
    13,     0,    74,    20,    19,    77,    32,    33,    20,   102,
    20,    17,    20,    49,    50,    49,    50,    10,    44,    72,
    43,     4,    75,   116,    27,    18,    27,   120,    54,   122,
    43,   124,    49,    50,   127,    17,   129,    49,    50,    49,
    50,    49,    50,    27,   146,    26,    49,    50,    49,    50,
    27,    27,    27,   147,     5,    11,   141,   142,   143,   144,
   145,    12,    38,    27,    26,    49,    50,   139,   140,    27,
    20,   173,    49,    50,    49,    50,   161,   162,   163,   164,
    27,   166,   167,   168,   169,    49,    50,    14,    15,     3,
     4,    49,    50,   165,   147,    27,   181,   182,   192,   193,
    27,   161,    49,    50,     3,   198,   166,   200,    10,   202,
    26,   204,    27,   206,    27,   208,    18,    49,    50,    27,
   213,     5,   215,    26,   217,    24,    25,   180,    12,   222,
    10,   224,    26,   226,    49,    50,    49,    50,    18,   192,
   193,    49,    50,   236,    14,    15,   239,   240,    73,   243,
   244,    76,    42,    78,    79,    14,    15,    27,    26,    49,
    50,   255,   247,   248,   249,   250,   251,   252,    27,   262,
   263,    27,   265,   258,   267,    27,   269,    27,   271,   227,
   273,    27,   275,   276,    38,    24,    27,   280,   282,   283,
   243,   244,    26,    49,    50,    49,    50,    49,    50,    49,
    50,    38,   255,    49,    50,    26,   299,   300,    49,    50,
    38,    41,    49,    50,    26,    38,   141,   142,   143,   144,
   145,    49,    50,    38,    42,    33,    49,    50,    24,   282,
   283,    49,    50,    42,    49,    50,    38,   162,   163,   164,
    49,    50,   167,   168,   169,     3,     4,    49,    50,     7,
     8,     9,    38,   301,    62,    24,   181,   182,    41,    67,
    68,    69,    24,    49,    50,    10,    74,    38,    26,    77,
    38,    20,    38,    18,    32,    33,    84,    38,    49,    50,
    20,    49,    50,    49,    50,    16,    44,    20,    49,    50,
    21,    22,    23,    51,    52,    53,    54,    55,    56,    57,
     3,     4,    49,    50,     7,     8,     9,    45,    46,    47,
    48,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    27,   247,   248,   249,   250,   251,   252,    38,    42,
     3,   139,   140,   258,     7,    42,    49,    50,   146,    49,
    50,    44,    49,    50,    27,     7,     8,     9,    51,    52,
    53,    26,    55,    56,    21,    22,    23,   165,    58,    59,
    49,    50,    26,    25,    43,   173,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    26,    39,    14,    15,
   101,   102,    44,    26,    26,    26,    26,    26,    20,    27,
    27,    20,    27,    27,    20,    41,    41,    17,    20,    20,
    27,    20,    20,    20,    27,    20,    20,    17,    41,    40,
     0,     0,    11,    13,    15,   180,   148,    33,   182,    -1,
    33,   102,   102
);
#This is happy joyful -*-perl-*- code!!
# 2 "/home/pajas/share/bison.simple.perl"


#Skeleton output parser for bison,
#Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#As a special exception, when this file is copied by Bison into a
#Bison output file, you may use that output file without restriction.
#This special exception was added by the Free Software Foundation
#in version 1.24 of Bison.

#This is the parser code that is written into each bison parser
#when the %semantic_parser declaration is not specified in the grammar.
#It was written by Richard Stallman by simplifying the hairy parser
#used when %semantic_parser is specified.

#Note: there must be only one dollar sign in this file.
#It is replaced by the list of actions, each action
#as one case of the switch.








#Like { goto yyerrlab1; }  except do call yyerror.
#This remains here temporarily to ease the
#transition to the new meaning of { goto yyerrlab1; } , for GCC.
#Once GCC version 2 has supplanted version 1, this can go.



# 59 "/home/pajas/share/bison.simple.perl"








# 81 "/home/pajas/share/bison.simple.perl"


#If nonreentrant, generate the variables here



    local($yychar);			#  the lookahead symbol		
local($yylval);			#  the semantic value of the	
#lookahead symbol		






local($yynerrs);		#  number of parse errors so far       



local($yydebug);		#  nonzero means print parse trace
#Since this is uninitialized, it does not stop multiple parsers
#from coexisting.



# 108 "/home/pajas/share/bison.simple.perl"


sub yyparse
{
    my $yystate;
    my $yyn;
    my $yyssp;
    my $yyvsp;
    my $yyerrstatus;    #  number of tokens to shift before error messages enabled
    my $yychar1 = 0;	#  lookahead token as an internal (translated) token number

    my @yyss;	        #  the state stack
    my @yyvs;	        #  the semantic value stack




















    my $yyval;  		#  the variable used to return		
    #semantic values from the action	
    #routines				

    my $yylen;


    print STDERR "Starting parse\n" if $yydebug;


    $yystate = 0;
    $yyerrstatus = 0;
    $yynerrs = 0;
    $yychar = -2 ;		# Cause a token to be read.  

    #Initialize stack pointers.
    #Waste one element of value and location stack
    #so that they stay on the same level as the state stack.
    #The wasted elements are never initialized. 

    $yyssp = -1;
    $yyvsp = 0;




#Push a new state, which is found in  yystate  . 
#In all cases, when you get here, the value and location stacks
#have just been pushed. so pushing a state here evens the stacks.
yynewstate:

    $yyss[++$yyssp] = $yystate;


    print STDERR "Entering state $yystate\n" if $yydebug;


yybackup:

#Do appropriate processing given the current state.
#Read a lookahead token if we need one and do not already have one.
#yyresume:

    #First try to decide what to do without reference to lookahead token.

    $yyn = $yypact[$yystate];
    if ($yyn == -32768 ) {
	goto yydefault;
    }

    #Not known => get a lookahead token if do not already have one.

    #yychar is either -2  or 0 
    #or a valid token in external form. 

    if ($yychar == -2 )
    {

	print STDERR "Reading a token: " if $yydebug;

	$yychar = yylex() ;
    }

    #Convert token to internal form (in yychar1) for indexing tables with

    if ($yychar <= 0)		# This means end of input.
    {
	$yychar1 = 0;
	$yychar = 0 ;		# do not call yylex()  any more


	printf STDERR "Now at end of input.\n" if $yydebug;

    }
    else
    {
	$yychar1 = (( $yychar ) <= 307 ? $yytranslate[ $yychar ] : 110) ;


	if ($yydebug)
	{
	    print STDERR "Next token is $yychar ($yytname[$yychar1]";
	    #Give the individual parser a way to print the precise meaning
	    #of a token, for further debugging info.



	    print STDERR ")\n";
	}

    }

    $yyn += $yychar1;
    if ($yyn < 0 || $yyn > 443  || $yycheck[$yyn] != $yychar1) {
	goto yydefault;
    }

    $yyn = $yytable[$yyn];

#yyn is what to do for this token type in this state.
#Negative => reduce, -yyn is rule number.
#Positive => shift, yyn is new state.
#New state is final state => do not bother to shift,
#just return success.
#zero, or most negative number => error.

    if ($yyn < 0) {
	goto yyerrlab if ($yyn == -32768 );
	$yyn = -$yyn;
	goto yyreduce;
    } elsif ($yyn == 0) {
	goto yyerrlab;
    }

    if ($yyn == 308 ) {
	return(0) ;
    }

    #Shift the lookahead token.


    print STDERR "Shifting token $yychar ($yytname[$yychar1]), " if $yydebug;


    #Discard the token being shifted unless it is eof.
    if ($yychar != 0 ) {
	$yychar = -2 ;
    }

    $yyvs[++$yyvsp] = $yylval;




    #count tokens shifted since error; after three, turn off error status.
    $yyerrstatus-- if $yyerrstatus;

    $yystate = $yyn;
    goto yynewstate;

#Do the default action for the current state.
yydefault:

    $yyn = $yydefact[$yystate];
    goto yyerrlab if ($yyn == 0);

#Do a reduction.  yyn is the number of a rule to reduce with.
yyreduce:
    $yylen = $yyr2[$yyn];
    if ($yylen > 0) {
	$yyval = $yyvs[$yyvsp + 1 - $yylen]; # implement default value of the action
    }


    if ($yydebug)
    {
	my $i;

	print STDERR "Reducing via rule $yyn (line $yyrline[$yyn]), ";

	#Print the symbols being reduced, and their result.
        for ($i = $yyprhs[$yyn]; $yyrhs[$i] > 0; $i++) {
	    print STDERR "$yytname[$yyrhs[$i]] ";
	}
	print STDERR " -> $yytname[$yyr1[$yyn]]\n";
    }


    
  if (0) {
  } elsif ($yyn == 1) {
# 37 "graph2tred.y"

{ 
		    print "# Automatically converted from Graph ".
		          "macros by graph2tred to Perl.         -*-cperl-*-.\n\n", $yyvs[$yyvsp+0], "\n"; 
                  ;
}
  } elsif ($yyn == 2) {
# 42 "graph2tred.y"

{ $yyval=""; ;
}
  } elsif ($yyn == 4) {
# 45 "graph2tred.y"

{ $yyval=""; ;
}
  } elsif ($yyn == 5) {
# 46 "graph2tred.y"

{ $yyval = $yyvs[$yyvsp+-1].$yyvs[$yyvsp+0]; ;
}
  } elsif ($yyn == 6) {
# 48 "graph2tred.y"

{ $yyval = $yyvs[$yyvsp+-1]."\n".$yyvs[$yyvsp+0]; ;
}
  } elsif ($yyn == 7) {
# 49 "graph2tred.y"

{ $yyval = $yyvs[$yyvsp+-2]."\n".$yyvs[$yyvsp+-1]."\n".$yyvs[$yyvsp+0]; ;
}
  } elsif ($yyn == 8) {
# 51 "graph2tred.y"

{                  
                      $yyval = "\n#bind ".yy_keys2func($yyvs[$yyvsp+-5])." to $yyvs[$yyvsp+-5]".
			( $yyvs[$yyvsp+-4] ne "" ? " menu ".substr($yyvs[$yyvsp+-4],1,length($yyvs[$yyvsp+-4])-2) : "" ).
			"\nsub ".yy_keys2func($yyvs[$yyvsp+-5])." {\n".$yyvs[$yyvsp+-2].$yyvs[$yyvsp+-1]."\n}";
	      	;
}
  } elsif ($yyn == 9) {
# 56 "graph2tred.y"

{
		  $yyval =  ( $yyvs[$yyvsp+-4] ne "" ? "#insert ".$yyvs[$yyvsp+-5]." as menu ".substr($yyvs[$yyvsp+-4],1,length($yyvs[$yyvsp+-4])-2)."\n" : "" ). 
		    "\nsub $yyvs[$yyvsp+-5] {\n".$yyvs[$yyvsp+-2].$yyvs[$yyvsp+-1]."\n}";  
		;
}
  } elsif ($yyn == 10) {
# 61 "graph2tred.y"

{ $yyval=""; ;
}
  } elsif ($yyn == 11) {
# 62 "graph2tred.y"

{ $yyval=$yyvs[$yyvsp+0]; ;
}
  } elsif ($yyn == 12) {
# 64 "graph2tred.y"

{ $yyval="  my $yyvs[$yyvsp+-1]; # used as type \"$yyvs[$yyvsp+-2]\"\n"; ;
}
  } elsif ($yyn == 17) {
# 69 "graph2tred.y"

{ $yyval=$yyvs[$yyvsp+-1].", $yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 18) {
# 72 "graph2tred.y"

{ $yyval = '$'."$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 19) {
# 73 "graph2tred.y"

{ $yyval = '$'."$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 20) {
# 74 "graph2tred.y"

{ $yyval = '$'."$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 21) {
# 75 "graph2tred.y"

{ $yyval = '$'."$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 22) {
# 77 "graph2tred.y"

{ $yyval=""; ;
}
  } elsif ($yyn == 23) {
# 78 "graph2tred.y"

{$yyval = "$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 24) {
# 80 "graph2tred.y"

{ $yyval = "$yyvs[$yyvsp+-1]\n$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 25) {
# 82 "graph2tred.y"

{ $yyval=""; ;
}
  } elsif ($yyn == 26) {
# 83 "graph2tred.y"

{ $yyval=$yyvs[$yyvsp+0].":"; ;
}
  } elsif ($yyn == 27) {
# 85 "graph2tred.y"

{ $yyval="  $yyvs[$yyvsp+-3] = $yyvs[$yyvsp+-1];\n"; ;
}
  } elsif ($yyn == 28) {
# 86 "graph2tred.y"

{ $yyval="  $yyvs[$yyvsp+-3] = ValNo(0,$yyvs[$yyvsp+-1]);\n"; ;
}
  } elsif ($yyn == 29) {
# 87 "graph2tred.y"

{ $yyval="  $yyvs[$yyvsp+-3] = $yyvs[$yyvsp+-1];\n"; ;
}
  } elsif ($yyn == 30) {
# 88 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-3]$yyvs[$yyvsp+-1]);\n"; ;
}
  } elsif ($yyn == 31) {
# 89 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-3]"."ValNo(0,$yyvs[$yyvsp+-1]));\n"; ;
}
  } elsif ($yyn == 32) {
# 90 "graph2tred.y"

{ $yyval="  $yyvs[$yyvsp+-3] = $yyvs[$yyvsp+-1];\n"; ;
}
  } elsif ($yyn == 33) {
# 91 "graph2tred.y"

{ $yyval="  $yyvs[$yyvsp+-3] = $yyvs[$yyvsp+-1];\n"; ;
}
  } elsif ($yyn == 34) {
# 92 "graph2tred.y"

{ $yyval="  if ($yyvs[$yyvsp+-5]) {\n$yyvs[$yyvsp+-2]  }$yyvs[$yyvsp+0]\n"; ;
}
  } elsif ($yyn == 35) {
# 93 "graph2tred.y"

{ $yyval="  goto $yyvs[$yyvsp+-1];\n"; ;
}
  } elsif ($yyn == 36) {
# 94 "graph2tred.y"

{ $yyval="  return;\n" ;
}
  } elsif ($yyn == 37) {
# 95 "graph2tred.y"

{ $yyval="  ".yy_keys2func($yyvs[$yyvsp+-1])."();\n" ;
}
  } elsif ($yyn == 38) {
# 96 "graph2tred.y"

{ $yyval="  $yyvs[$yyvsp+-1]();\n" ;
}
  } elsif ($yyn == 39) {
# 97 "graph2tred.y"

{ $yyval="  \$NodeClipboard=CutNode($yyvs[$yyvsp+-2]);\n"; ;
}
  } elsif ($yyn == 40) {
# 98 "graph2tred.y"

{ $yyval="  PasteNode(\$NodeClipboard,$yyvs[$yyvsp+-2]);\n"; ;
}
  } elsif ($yyn == 41) {
# 99 "graph2tred.y"

{ $yyval="  PlainNewSon($yyvs[$yyvsp+-2]);\n"; ;
}
  } elsif ($yyn == 42) {
# 100 "graph2tred.y"

{ $yyval="  NextTree();\n"; ;
}
  } elsif ($yyn == 43) {
# 101 "graph2tred.y"

{ $yyval="  PrevTree();\n"; ;
}
  } elsif ($yyn == 44) {
# 102 "graph2tred.y"

{ $yyval="  GotoTree($yyvs[$yyvsp+-2]);\n"; ;
}
  } elsif ($yyn == 45) {
# 103 "graph2tred.y"

{ $yyval="  PrintToFile($yyvs[$yyvsp+-4], map { ValNo(0,\$_) } ($yyvs[$yyvsp+-2]));\n"; ;
}
  } elsif ($yyn == 46) {
# 104 "graph2tred.y"

{ $yyval="  PrintToFile(ValNo(0,$yyvs[$yyvsp+-4]), map { ValNo(0,\$_) } ($yyvs[$yyvsp+-2]));\n"; ;
}
  } elsif ($yyn == 47) {
# 105 "graph2tred.y"

{ $yyval="  PlainDeleteNode($yyvs[$yyvsp+-2]);\n"; ;
}
  } elsif ($yyn == 48) {
# 107 "graph2tred.y"

{ $yyval=""; ;
}
  } elsif ($yyn == 49) {
# 108 "graph2tred.y"

{ $yyval=" else {\n$yyvs[$yyvsp+-1]  }\n";;
}
  } elsif ($yyn == 54) {
# 114 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-5]->{$yyvs[$yyvsp+-3]} = ListAssign($yyvs[$yyvsp+-5]->{$yyvs[$yyvsp+-3]}, $yyvs[$yyvsp+-1], "; ;
}
  } elsif ($yyn == 55) {
# 115 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-3] = ListAssign($yyvs[$yyvsp+-3], $yyvs[$yyvsp+-1], "; ;
}
  } elsif ($yyn == 56) {
# 117 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]".'->{'.$yyvs[$yyvsp+0].'}'; ;
}
  } elsif ($yyn == 58) {
# 120 "graph2tred.y"

{ $yyval=$yyvs[$yyvsp+-5]; for (my $i=0;$i<$yyvs[$yyvsp+-1];$i++) { $yyval=$yyvs[$yyvsp+-3]."($yyval)" } ;
}
  } elsif ($yyn == 59) {
# 121 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+0]"."($yyvs[$yyvsp+-2])"; ;
}
  } elsif ($yyn == 60) {
# 123 "graph2tred.y"

{ $yyval = '$this'; ;
}
  } elsif ($yyn == 62) {
# 126 "graph2tred.y"

{ $yyval="LBrother" ;
}
  } elsif ($yyn == 63) {
# 127 "graph2tred.y"

{ $yyval="RBrother" ;
}
  } elsif ($yyn == 64) {
# 128 "graph2tred.y"

{ $yyval="Parent" ;
}
  } elsif ($yyn == 65) {
# 129 "graph2tred.y"

{ $yyval="FirstSon" ;
}
  } elsif ($yyn == 66) {
# 131 "graph2tred.y"

{ $yyval="AtrNo($yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 67) {
# 132 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+0]" ;
}
  } elsif ($yyn == 69) {
# 135 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 75) {
# 144 "graph2tred.y"

{ $yyval="ValNo(0,$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 76) {
# 145 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2], $yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 77) {
# 146 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2], ValNo(0,$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 79) {
# 149 "graph2tred.y"

{ $yyval="ValNo(0,$yyvs[$yyvsp+-2])$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 80) {
# 150 "graph2tred.y"

{ $yyval="ValNo(0,$yyvs[$yyvsp+-2])$yyvs[$yyvsp+-1]ValNo(0,$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 81) {
# 151 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]ValNo(0,$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 82) {
# 152 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 85) {
# 157 "graph2tred.y"

{ $yyval = yy_quote_vrule($yyvs[$yyvsp+0]); ;
}
  } elsif ($yyn == 87) {
# 159 "graph2tred.y"

{ $yyval="substr($yyvs[$yyvsp+-5],$yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 88) {
# 160 "graph2tred.y"

{ $yyval="substr(ValNo(0,$yyvs[$yyvsp+-5]),$yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 89) {
# 161 "graph2tred.y"

{ $yyval='scalar(split /\|/,'.$yyvs[$yyvsp+-1].')'; ;
}
  } elsif ($yyn == 90) {
# 162 "graph2tred.y"

{ $yyval='scalar(split /\|/,'.$yyvs[$yyvsp+-1].')'; ;
}
  } elsif ($yyn == 91) {
# 163 "graph2tred.y"

{ $yyval="(ValNo(0,$yyvs[$yyvsp+-3]).ValNo(0,$yyvs[$yyvsp+-1]))"; ;
}
  } elsif ($yyn == 92) {
# 164 "graph2tred.y"

{ $yyval="($yyvs[$yyvsp+-3].ValNo(0,$yyvs[$yyvsp+-1]))"; ;
}
  } elsif ($yyn == 93) {
# 165 "graph2tred.y"

{ $yyval="(ValNo(0,$yyvs[$yyvsp+-3]).$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 94) {
# 166 "graph2tred.y"

{ $yyval="(ValNo(0,$yyvs[$yyvsp+-3]).ValNo(0,$yyvs[$yyvsp+-1]))"; ;
}
  } elsif ($yyn == 95) {
# 168 "graph2tred.y"

{ $yyval="ValNo($yyvs[$yyvsp+-1],$yyvs[$yyvsp+-5]->{$yyvs[$yyvsp+-3]})"; ;
}
  } elsif ($yyn == 96) {
# 169 "graph2tred.y"

{ $yyval=" ValNo($yyvs[$yyvsp+-1],$yyvs[$yyvsp+-3]) "; ;
}
  } elsif ($yyn == 98) {
# 172 "graph2tred.y"

{ $yyval="undef"; ;
}
  } elsif ($yyn == 99) {
# 173 "graph2tred.y"

{ $yyval="PasteNode(\$NodeClipboard,$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 100) {
# 174 "graph2tred.y"

{ $yyval="  PlainNewSon($yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 103) {
# 178 "graph2tred.y"

{ $yyval="Union($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 104) {
# 179 "graph2tred.y"

{ $yyval="Union($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 105) {
# 180 "graph2tred.y"

{ $yyval="Union($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 106) {
# 181 "graph2tred.y"

{ $yyval="Union($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 107) {
# 182 "graph2tred.y"

{ $yyval="Interjection($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 108) {
# 183 "graph2tred.y"

{ $yyval="Interjection($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 109) {
# 184 "graph2tred.y"

{ $yyval="Interjection($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 110) {
# 185 "graph2tred.y"

{ $yyval="Interjection($yyvs[$yyvsp+-3],$yyvs[$yyvsp+-1])"; ;
}
  } elsif ($yyn == 111) {
# 187 "graph2tred.y"

{ $yyval="!( $yyvs[$yyvsp+-1] )"; ;
}
  } elsif ($yyn == 112) {
# 188 "graph2tred.y"

{ $yyval="( $yyvs[$yyvsp+-1] )"; ;
}
  } elsif ($yyn == 113) {
# 189 "graph2tred.y"

{ $yyval=$yyvs[$yyvsp+0]; ;
}
  } elsif ($yyn == 114) {
# 190 "graph2tred.y"

{ $yyval=$yyvs[$yyvsp+-2].' '.$yyvs[$yyvsp+-1]."\n      ".$yyvs[$yyvsp+0]; ;
}
  } elsif ($yyn == 115) {
# 192 "graph2tred.y"

{ $yyval='&&'; ;
}
  } elsif ($yyn == 116) {
# 193 "graph2tred.y"

{ $yyval='||'; ;
}
  } elsif ($yyn == 117) {
# 195 "graph2tred.y"

{
                  if (($yyvs[$yyvsp+-1].$yyvs[$yyvsp+0]) eq " eq undef") {
		    $yyval="!(".$yyvs[$yyvsp+-2].")";
                  } elsif (($yyvs[$yyvsp+-1].$yyvs[$yyvsp+0]) eq " ne undef") {
                    $yyval=$yyvs[$yyvsp+-2];
		  } else {
                    $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]";
                  }
                ;
}
  } elsif ($yyn == 118) {
# 204 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 119) {
# 205 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 120) {
# 206 "graph2tred.y"

{ $yyval="ValNo(0,$yyvs[$yyvsp+-2])$yyvs[$yyvsp+-1]ValNo(0,$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 121) {
# 207 "graph2tred.y"

{ $yyval="ValNo(0,$yyvs[$yyvsp+-2])$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; ;
}
  } elsif ($yyn == 122) {
# 208 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-2]$yyvs[$yyvsp+-1]ValNo(0,$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 123) {
# 209 "graph2tred.y"

{ 
 		  $yyval="Interjection($yyvs[$yyvsp+-2],$yyvs[$yyvsp+0])$yyvs[$yyvsp+-1]$yyvs[$yyvsp+-2]";     
                ;
}
  } elsif ($yyn == 124) {
# 212 "graph2tred.y"

{ 
                    $yyval="Interjection($yyvs[$yyvsp+-2],$yyvs[$yyvsp+0])$yyvs[$yyvsp+-1]$yyvs[$yyvsp+0]"; 
                ;
}
  } elsif ($yyn == 125) {
# 215 "graph2tred.y"

{ 
                    $yyval="ValNo(0,$yyvs[$yyvsp+-2])$yyvs[$yyvsp+-1]ValNo(0,$yyvs[$yyvsp+0])"; 
                ;
}
  } elsif ($yyn == 126) {
# 218 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-1]($yyvs[$yyvsp+-2],$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 127) {
# 219 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-1]($yyvs[$yyvsp+-2],$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 128) {
# 220 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-1]($yyvs[$yyvsp+-2],$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 129) {
# 221 "graph2tred.y"

{ $yyval="$yyvs[$yyvsp+-1]($yyvs[$yyvsp+-2],$yyvs[$yyvsp+0])"; ;
}
  } elsif ($yyn == 130) {
# 223 "graph2tred.y"

{ $yyval=" eq "; ;
}
  } elsif ($yyn == 131) {
# 224 "graph2tred.y"

{ $yyval=" ne "; ;
}
  } elsif ($yyn == 132) {
# 226 "graph2tred.y"

{ $yyval="=="; ;
}
  } elsif ($yyn == 133) {
# 227 "graph2tred.y"

{ $yyval="!="; ;
}
  } elsif ($yyn == 134) {
# 228 "graph2tred.y"

{ $yyval="<";;
}
  } elsif ($yyn == 135) {
# 229 "graph2tred.y"

{ $yyval="<=";;
}
  } elsif ($yyn == 136) {
# 230 "graph2tred.y"

{ $yyval=">";;
}
  } elsif ($yyn == 137) {
# 231 "graph2tred.y"

{ $yyval=">=";;
}
  } elsif ($yyn == 138) {
# 233 "graph2tred.y"

{ $yyval="ListEq"; ;
}
  } elsif ($yyn == 139) {
# 234 "graph2tred.y"

{ $yyval="!ListEq"; ;
}

}
   #the action file gets copied in in place of this line

# 313 "/home/pajas/share/bison.simple.perl"


	$yyvsp -= $yylen;
    $yyssp -= $yylen;





    print STDERR "state stack now ",join(" ",@yyss[0..$yyssp+1]),"\n" 
	if $yydebug;


    $yyvs[++$yyvsp] = $yyval;

# 339 "/home/pajas/share/bison.simple.perl"


#Now "shift" the result of the reduction.
#Determine what state that goes to,
#based on the state we popped back to
#and the rule number reduced by.

    $yyn = $yyr1[$yyn];

    $yystate = $yypgoto[$yyn - 68 ] + $yyss[$yyssp];
    if ($yystate >= 0 && $yystate <= 443  && $yycheck[$yystate] == $yyss[$yyssp]) {
	$yystate = $yytable[$yystate];
    } else {
	$yystate = $yydefgoto[$yyn - 68 ];
    }

    goto yynewstate;

yyerrlab:   # here on detecting error

    if (! $yyerrstatus)
	#If not already recovering from an error, report this error.
    {
	++$yynerrs;

# 401 "/home/pajas/share/bison.simple.perl"

	    yyerror("parse error");
    }

    goto yyerrlab1;
yyerrlab1:   # here on error raised explicitly by an action

    if ($yyerrstatus == 3)
    {
	#_if just tried and failed to reuse lookahead token after an error, discard it.

	#return failure if at end of input
	if ($yychar == 0 ) {
	    return(1) ;
	}


	if ($yydebug) {
	    print STDERR "Discarding token $yychar ($yytname[$yychar1]).\n";
	}


	$yychar = -2 ;
    }

    #_Else will try to reuse lookahead token
    #after shifting the error token.

    $yyerrstatus = 3;		# Each real token shifted decrements this

    goto yyerrhandle;

yyerrdefault:  # current state does not do anything special for the error token.

    1;

yyerrpop:   # pop the current state because it cannot handle the error token

    return(1)  if ($yyssp == 0); 
    $yyvsp--;
    $yystate = $yyss[--$yyssp];





    print STDERR "state stack now",join(" ",@yyss[0..$yyssp+1]),"\n" 
	if $yydebug;


yyerrhandle:

    $yyn = $yypact[$yystate];
    goto yyerrdefault if ($yyn == -32768 );

    $yyn += 1 ;
    if ($yyn < 0 || $yyn > 443  || $yycheck[$yyn] != 1 ) {
	goto yyerrdefault;
    }

    $yyn = $yytable[$yyn];
    if ($yyn < 0)
    {
	if ($yyn == -32768 ) {
	    goto yyerrpop;
	}
	$yyn = -$yyn;
	goto yyreduce;
    }
    elsif ($yyn == 0) {
	goto yyerrpop;
    }

    return(0)  if ($yyn == 308 );


    print "Shifting error token, " if $yydebug;


    $yyvs[++$yyvsp] = $yylval;




    $yystate = $yyn;
    goto yynewstate;
}
# 236 "graph2tred.y"

# 5 "graph2tred.driver" 2


$keywords='function|comment|string|pointer|list|if|else|goto|return|call|Cut|Paste|NewNode|TreeNext|TreePrev|TreeGoTo|Print|Remove|this|null|substr|valnum|concat';
$directions='lbrother|rbrother|parent|firstson';
$operators='===|!=|==|=!=|\#==|\#!=|\#\<=|\#\<|\#\>=|\#\>|&&|\|\|';

my %gvar = ( '_MakeActive' => 'pointer',
	      '_NoSuchTree' => 'string',
	      '_Error' => 'string',
	      '_CatchError' => 'string',
	      '_ExitFromBatch' => 'string',
	    );  # global variables
my %lvar;  # local variables (for function)
my @yynext_yylval = ();
my @yynext_yylex = ();
my $infunc=0;


sub yyguard {
  return 1;
}

sub yy_lookup_token {
  my $i,$j=0;
  my $token=shift;
  for ($i=0; $i<=$#yytname; $i++) {
    $j++ if ($yytname[$i]=~'^"');
    last if ($yytname[$i] eq '"'.$token.'"');
  }
  return $j;
}

sub yylex {
  if (@yynext_yylval) {
    $yylval=shift @yynext_yylval;
    return shift @yynext_yylex;
  }
  while ($yyinput!~/\G$/gsco) {	
    if ( $yyinput =~ /\G[\s\n]+/gsco ) { 
#print STDERR "==> $&\n";
      next; 
    }
    elsif ($yyinput =~ /\G[0-9]+(?![a-z0-9A-Z_])/gsco ) {
      $yylval=$&;
      print STDERR "==> $yylval\n" if $yydebug;
      return NUMBER;
    }
    elsif ($yyinput =~ /\G\"(\-?[0-9]+)\"/gsco ) {
      $yylval=$&;
      print STDERR "==> $yylval\n" if $yydebug;
      return NUMBER;
    }
    elsif ($yyinput =~ /\G\"((?:[^\\\"]|\\.)*)\"/gsco ) {
      $yylval="'$1'";
      print STDERR "==> $yylval\n" if $yydebug;
      return STRING;
    }
    elsif ($yyinput =~ /\G(function)\s+([^\#])\s+/gsco) {
      $infunc=1;
      %lvar=();
      $yylval=$1;
      push @yynext_yylval, $2;
      push @yynext_yylex, KEYS;
      return FUNCID+yy_lookup_token($yylval);
    }
    elsif ($yyinput =~ /\G(string|list|pointer)\s+((?:[a-zA-Z_]+[a-zA-Z0-9_]*\s*,\s*)*[a-zA-Z_]+[a-zA-Z0-9_]*(?=\s*;))/gsco ) {
      $yylval=$1;
      $yy_temp=$2;
      foreach (split(/\s*,\s*/,$yy_temp)) {
	push @yynext_yylval,$_;
	push @yynext_yylex, ID;
	if ($infunc) {
	  $lvar{$_}=$yylval;
	} else {
	  $gvar{$_}=$yylval;
	}
      }

      return FUNCID+yy_lookup_token($yylval);
    }
    elsif ($yyinput =~ /\G(call)\s+([^\#])\s*(?=;)/gsco) {
      $yylval=$1;
      push @yynext_yylval,$2;
      push @yynext_yylex, KEYS;
      return FUNCID+yy_lookup_token($yylval);
    }
    elsif ($yyinput =~ /\G(-\>)($directions)/gsco) {
      print STDERR "=direction=> $yylval\n" if $yydebug;
      $yylval=$1;
      push @yynext_yylval,$2;
      push @yynext_yylex, FUNCID+yy_lookup_token($2);
      return FUNCID+yy_lookup_token($yylval);
    }
    elsif ($yyinput =~ /\G(?:[][\+,.;)(}{]|$operators|(?:$keywords)(?![a-z0-9A-Z_])|&(?!&)|\-(?!\>)|=(?!=)|U(?![a-z0-9A-Z_]))/gsco ) {
      $yylval=$&;
      print STDERR "=keyword=> $yylval\n" if $yydebug;
      if (length($yylval)==1) {
	return ord($yylval);
      } else {
	return FUNCID+yy_lookup_token($yylval);
      }
    }
    elsif ($yyinput =~ 
 	   /\G(?:Ctrl\+)?(?:Shift\+)?(?:[A-Z0-9]|F1[0-2]|F[1-9]|Space|Backspace|Tab)(?![a-z0-9A-Z_])/gsco ) {
      $yylval=$&;
      print STDERR "==> $yylval\n" if $yydebug;
      return KEYS;
    }
    elsif ($yyinput =~ /\GEsc(?![a-z0-9A-Z_])/gsco ) {
      $yylval="Escape";
      print STDERR "==> $yylval\n" if $yydebug;
      return KEYS;
    }
    elsif  ($yyinput =~ /\G_MakeActive(?![a-z0-9A-Z_])/gsco ) {
      $yylval="this";
      print STDERR "==> _MakeActive\n" if $yydebug;
      return FUNCID+yy_lookup_token($yylval);
    }
    elsif ($yyinput =~ /\G[a-zA-Z_]+[a-zA-Z0-9_]*/gsco ) {
      $yylval=$&;
      print STDERR "==> $yylval\n" if $yydebug;
      if ($lvar{$yylval} eq 'string') { return SID; }
      elsif ($lvar{$yylval} eq 'list') { return LID; }
      elsif ($lvar{$yylval} eq 'pointer') { return PID; }
      elsif ($gvar{$yylval} eq 'string') { return SID; }
      elsif ($gvar{$yylval} eq 'list') { return LID; }
      elsif ($gvar{$yylval} eq 'pointer') { return PID; }
      else { return ID; }
    }
    elsif ($yyinput =~ /\G:([a-zA-Z_]+[a-zA-Z0-9_]*):/gsco ) {
      $yylval=$1;
      print STDERR "label ==> $yylval\n" if $yydebug;
      return LABELID;
    }
    elsif ($yyinput =~ /\G:([a-zA-Z_]+[a-zA-Z0-9_]*)(?![a-z0-9A-Z_:])/gsco ) {
      $yylval=$1;
      print STDERR "==> $yylval\n" if $yydebug;
      return LABELREF;
    }
    elsif ($yyinput =~ /\G\#([a-zA-Z_]+[a-zA-Z0-9_])/gsco ) {
      $yylval=$1;
      print STDERR "==> $yylval\n" if $yydebug;
      return FUNCID;
    }
    else {
      $yyinput =~ /\G(..?.?.?.?.?.?.?.?.?.?)/gsco;
      print STDERR "----",$1,"-----\n";
      return 0;
    }
  }
}
sub yyerror { die (shift()."\n"); }

$test_header=1;

$yydebug = ($ARGV[0] eq '-d' or $ARGV[0] eq '--debug');
shift @ARGV if $yydebug;

while (<>) { 
  next if (/^\(/ and $test_header .. /^[^(]/);
  $test_header=0;
  s!//.*$!!;
  $yyinput.=$_." ";
}
#  print $yyinput;


yyparse();

