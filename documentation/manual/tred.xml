<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en">
  <articleinfo>
    <title>Tree Editor Manual</title>
    <author>
      <firstname>Petr</firstname>
      <surname>Pajas</surname>
      <affiliation>
	<address format="linespecific"><email>pajas@ckl.mff.cuni.cz</email></address>
      </affiliation>
    </author>
  </articleinfo>
  <sect1 id="intro">
    <title>Introduction</title>
    <para><application moreinfo="none">TrEd</application> is a graphical editor and
    viewer of tree structures. It works with files in so called <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/Doc/fs.html">FS-format</ulink>
    developed by M. Kren (as a native format for his editor
    Graph) and used for syntactical and tectogrammatical trees in The
    Prague Dependency Treebank.  Since FS-format is a bit more
      general, <application moreinfo="none">TrEd</application> may surely find other applications as well.
    </para>
    <figure float="0">
      <title>TrEd with two views customized by a set of macros for visual comparison
	of trees annotated on the Tectogrammatical Layer of the Prague
	Dependency Treebank.
      </title>
      <graphic fileref="pics/treddiff.png"/>
    </figure>
    <para><application moreinfo="none">TrEd</application> may be extended by <emphasis>user-defined
      macros</emphasis>, which are basically functions written in
      <application moreinfo="none">Perl</application> language, with many pre-defined
      functions for handling FS-trees. Keyboard
      shortcuts or user-defined menu items may be used to invoke macros.
    </para>
    <para>There is also an non-graphical (off-line) variant of TrEd
      called <command moreinfo="none">btred</command> &#8212; which stands for
      <quote>Batch-mode Tree Editor</quote> &#8212; which allows user
      to run macros on trees without having to enter the graphical
      interface.
    </para>
    <para>
      <application moreinfo="none">TrEd</application> runs on the following platforms (see <xref linkend="chap1"/> for details):
    </para>
    <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
	<para><productname class="trade">Windows 95/98/ME</productname> or
	<productname class="trade">Windows NT/2000/XP</productname></para></listitem>
      <listitem>
	<para><productname class="trade">Linux</productname></para></listitem>
      <listitem>
	<para><productname class="trade">BSD</productname>, <productname class="trade">UNIX</productname>, <productname class="trade">Solaris</productname>
	  and other UNIX-based systems</para>
      </listitem>
    </orderedlist>
  </sect1>
  <sect1 id="chap1">
    <title>Installation and start up instructions</title>    
    <para>
      On all supported platforms, 
      <application moreinfo="none">TrEd</application> requires 
      Perl interpreter and Perl-Tk toolkit (a GUI library for Perl). 
      Installation of these tools is different on Unix-like
      and Windows platforms. 
      Installation of <application moreinfo="none">TrEd</application> itself,
      though, is platform-independent.
    </para>
    <para>
      To install Perl/Tk on your system follow instructions for your
      platform below:
    </para>
    <sect2 id="install-windows">
      <title>Windows</title>
      <para>
	There is a windows-specific installation package available on
	<ulink url="http://pajas.matfyz.cz/tred"><application moreinfo="none">TrEd</application>'s
	homepage</ulink>. The package contains
	<application moreinfo="none">ActiveState Perl</application>,
	<application moreinfo="none">Perl-Tk</application>,
	<application moreinfo="none">TrEd</application>, and a setup script called
	<literal moreinfo="none">setup.bat</literal> for easy installation of
	all of them (<emphasis>RECOMMENDED!</emphasis>).
      </para>
      <para>
	If, for some reason, you don't want to use the Windows installation
	package, you may try the manual installation described below.
      </para>
      <note>
	<para>It is not recommended to use TrEd with CygWin Perl.
	  First, because is is not being tested and second
	  because Perl-Tk for CygWin Perl requires CygWin XFree86.
	  It is therefore recommended that you install ActiveState
	  Perl, even if you already have Perl from CygWin.
	  If you still want to try TrEd with CygWin Perl,
	  follow the instructions for setup on <link linkend="install-unix">UNIX-like systems</link>.
	</para>
      </note>
      <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
	  <para>
	    Windows users first have to download and install <ulink url="http://www.activestate.com/Products/Download/Get.plex?id=ActivePerl">ActivePerl</ulink>
	    by <ulink url="http://www.activestate.com">ActiveState</ulink>.
	    Follow the instructions of the installation program.
	    (When the installation is done, you may need to restart
	    <application moreinfo="none">Windows</application>, so that all the
	    changes take effect.)</para>
	</listitem>
	<listitem>
	  <para>
	    In this step you add <application moreinfo="none">Tk library</application>
	    to <application moreinfo="none">Perl</application>.  
	    If you have installed <application moreinfo="none">ActiveState
	    Perl</application> 5.8 or higher, you may skip this step
	    since <application moreinfo="none">Tk</application> is already included.
	    If you use an older version, and
	    you're connected to the Internet, you may install the latest
	    <application moreinfo="none">Tk</application> toolkit from
	    ActiveState's site with the following steps:
	  </para>
	  <orderedlist continuation="restarts" inheritnum="ignore">
	    <listitem>
	      <para>Open a command prompt
		(<application moreinfo="none">MS-DOS
		  prompt</application> in <application moreinfo="none">Windows
		  9x/ME</application>)
	      </para>
	    </listitem> 
	    <listitem>
	      <para>Type <command moreinfo="none">ppm</command> (press <keycap moreinfo="none">Enter</keycap>)</para></listitem>
	    <listitem>
	      <para>Type <command moreinfo="none">install Tk</command> (press
		<keycap moreinfo="none">Enter</keycap>)</para>
	    </listitem>
	    <listitem>
	      <para>When the installation of <application moreinfo="none">Tk library</application> is finished, type
		<command moreinfo="none">exit</command> (press
		<keycap moreinfo="none">Enter</keycap>)</para>
	    </listitem>
	    <listitem>
	      <para>Close the command prompt</para>
	    </listitem>
	  </orderedlist>
	  <para>
	    If you do <emphasis>not</emphasis> have
	    <application moreinfo="none">ActiveState Perl</application> 5.8 or higher
	    and you're <emphasis>not</emphasis> connected
	    to the Internet, but you do have 
	    <productname class="trade">Prague Dependency
	      Treebank</productname>
	    CD-ROM, please, follow these steps:
	  </para>
	  <orderedlist continuation="restarts" inheritnum="ignore">
	    <listitem>
	      <para>Open a command prompt (<application moreinfo="none">MS-DOS prompt</application> in
		<application moreinfo="none">Windows 9x/ME</application>)</para>
	    </listitem> 
	    <listitem>
	      <para>Unzip the Windows <application moreinfo="none">TrEd</application>
		distribution package and change to the
		<filename moreinfo="none">packages</filename> directory.
	      </para>
	    </listitem>
	    <listitem>
	      <para>Type <literal moreinfo="none"><userinput moreinfo="none">ppm install Tk.ppd</userinput></literal> (press
		<keycap moreinfo="none">Enter</keycap>)</para>
	    </listitem>
	    <listitem>
	      <para>Close the command prompt when the installation of
		<application moreinfo="none">Tk library</application> is finished.
	      </para>
	    </listitem>
	  </orderedlist>
	  <para>In this step you install
	    <application moreinfo="none">TrEd</application> itself. 
	    It is done by
		copying the whole <filename moreinfo="none">tred</filename> 
	    folder from the <application moreinfo="none">TrEd</application>
	    distribution anywhere you like on your
	    hard-disk, e.g. to folder <filename moreinfo="none">C:\Program
	      Files</filename>.</para>
	  <para>
	    To be able to run <application moreinfo="none">TrEd</application>
	    with just a double-click, you have to
	    <orderedlist inheritnum="ignore" continuation="restarts">
	      <listitem>
		<para>either rename the <filename moreinfo="none">tred</filename> program
		  to <filename moreinfo="none">tred.pl</filename> and
		  associate the <filename moreinfo="none">.pl</filename> file-name extension
		  with <application moreinfo="none">Perl</application>, or
		</para>
	      </listitem>
	      <listitem>
		<para>
		  assuming you have installed <application moreinfo="none">Perl</application>
		      to <filename moreinfo="none">c:\perl</filename> and
		  <application moreinfo="none">TrEd</application> to
		  <filename moreinfo="none">c:\Program Files</filename>,
		  create a shortcut on your Desktop or in
		  the Start menu for the following command
		  <literallayout format="linespecific" class="normal">c:\perl\bin\perl.exe "c:\Program Files\tred\tred"</literallayout>
		</para>
	      </listitem>
	    </orderedlist>
	    Refer to any Windows User's reference for
	    more information on how to accomplish the above steps.
	  </para>
	</listitem>
      </orderedlist>
    </sect2>
    <sect2 id="install-unix">
      <title>Linux and UNIX-based systems</title>
      <para>
	Almost every modern 
	<application moreinfo="none">UNIX/Linux</application> system
	contains <application moreinfo="none">Perl</application> in default
	installation, so we may expect that you have already
	<application moreinfo="none">Perl</application> installed on your box and you
	only need to install <application moreinfo="none">PerlTk</application> toolkit
	and <application moreinfo="none">TrEd</application>:
    </para>
    <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
	  <para>
	    To install <application moreinfo="none">PerlTk</application> 
	    toolkit, fetch the latest version of Perl-Tk library from 
	    <ulink url="http://search.cpan.org/modlist/User_Interfaces/Tk">CPAN</ulink>, and extract the archive to some temporary directory, e.g
	    using the following command (substituting 804.025 with your Tk version 
	    number):
	    <literallayout class="normal" format="linespecific">
	      $ <userinput moreinfo="none">gunzip -c Tk-804.025.tar.gz | tar -x</userinput>
	    </literallayout>
	    
	    and issue the following commands (see file <filename moreinfo="none">INSTALL</filename> file in the
	    <filename moreinfo="none">Tk</filename> distribution directory for details):
	    <literallayout class="normal" format="linespecific">bash$ <userinput moreinfo="none">cd Tk804.025</userinput>
bash$ <userinput moreinfo="none">perl Makefile.PL XFT=1</userinput><co id="co-makefilepl"/>
bash$ <userinput moreinfo="none">make</userinput>
bash$ <userinput moreinfo="none">make test</userinput><co id="co-test"/>
bash$ <userinput moreinfo="none">su</userinput><co id="co-su"/>
root# <userinput moreinfo="none">make install</userinput>
	    </literallayout>
	    <calloutlist>
	      <callout arearefs="co-makefilepl">
		<para>the XFT=1 option turns on support for FreeType anti-aliasing.
		  If this step fails, restart without <literal moreinfo="none">XFT=1</literal>.
		</para>
	      </callout>
	      <callout arearefs="co-test">
		<para>this is only to test the result of the compilation, you may
		skip it, if you like</para></callout>
	      <callout arearefs="co-su">
		<para>gain <literal moreinfo="none">root</literal>'s privileges</para>
	      </callout>
	    </calloutlist>
	  </para>
	</listitem>

 	<listitem>
 	  <para>
 	    To install <application moreinfo="none">TrEd</application>, simply
	    untar/ungzip the <filename moreinfo="none">tred</filename> directory
	    from the <application moreinfo="none">TrEd</application>
 	    installation package to any directory 
	    you like
	    (e.g. to your home directory or,
	    with root privileges, to <filename moreinfo="none">/opt</filename>
 	    directory).
 	  </para>
 	  <note>
 	    <para>
 	      You may also wish to symlink the <command moreinfo="none">tred</command>
 	      executable to some directory on your
 	      <varname>PATH</varname>. Assuming you
	      have extracted the <application moreinfo="none">TrEd</application>
	      distribution to <filename moreinfo="none">/opt</filename> directory,
	      you can achieve this with the following command:
	      <literallayout format="linespecific" class="normal">root# ln -s /opt/tred/tred /usr/local/bin</literallayout>.
	    Use similar commands for <command moreinfo="none">btred</command> 
	    and other tools included with
 	    <application moreinfo="none">TrEd</application> distribution you
	      wish to use.
 	    </para>
 	  </note>
 	</listitem>
 	<listitem>
 	  <para>
 	    Run <application moreinfo="none">TrEd</application> by issuing the command
 	    <command moreinfo="none">tred</command>. (See <xref linkend="commandline"/>.)
 	  </para>
	  <note>
	    <para>If the <command moreinfo="none">tred</command>
	      executable fails to start, try to changing the first line
	      (<command moreinfo="none">#!/usr/bin/perl</command>) so
	      that it points to your Perl executable. 
	      If you find <application moreinfo="none">TrEd</application> halting immediately,
	      complaining about <filename moreinfo="none">Tk.pm</filename> module, check
	      <application moreinfo="none">PerlTk</application> installation path. You
	      may need to setup <varname>PERLLIB</varname> variable to point to
	      the <filename moreinfo="none">site_perl</filename> directory on your system to which
	      the <filename moreinfo="none">Tk.pm</filename> module was installed.
	    </para>
	  </note>
	</listitem>
      </orderedlist>
    </sect2>
  </sect1>
  <sect1 id="chap2">
    <title>Menu commands</title>    
    <para>
      The following paragraphs describe menu commands. Each submenu in
      <application moreinfo="none">TrEd</application> has as its first item a tear-off
      line (<guimenuitem moreinfo="none">- - - - -</guimenuitem>)
      which can be used to tear the menu off and place it as a
      separate window anywhere on your desktop.
    </para>
    <sect2 id="file">
      <title><guimenu moreinfo="none">File</guimenu></title>
      <variablelist>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Open ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Opens an existing file that the user chooses in the
	      <guilabel moreinfo="none">Open</guilabel> dialog box. The file may be
	      either in the <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/Doc/fs.html">FS-format</ulink>
	      (usually a file with a <filename moreinfo="none">.fs</filename>
	      extension) or a file in the <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/csts.dtd">CSTS</ulink>
	      SGML format. In the later case, 
	      James Clark's <ulink url="http://quest.ms.mff.cuni.cz/pdt/Support/nsgmls/index.html">SGML parser
	      <application moreinfo="none">SP</application></ulink> must be installed and
	      the <link linkend="sgmls"><literal moreinfo="none">sgmls</literal></link>
	      configuration option must point to its binary
	      executable <command moreinfo="none">nsgmls</command>, unless it can be found
	      in <varname>PATH</varname>.
	    </para>
	    <para>
	      By default, <application moreinfo="none">TrEd</application> expects
	      files in the <literal moreinfo="none">ISO-8859-2</literal> (ISO Latin 2)
	      encoding (which by <application moreinfo="none">TrEd</application> is
	      transparently translated to Windows 1250 encoding and
	      back on <productname class="trade">Microsoft Windows</productname>
	      systems). For other encodings, see 
	      <link linkend="defaultfileencoding"><literal moreinfo="none">defaultFileEncoding</literal></link>
	      and <link linkend="defaultdisplayencoding"><literal moreinfo="none">defaultDisplayEncoding</literal></link>
	      configuration options.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Open URL ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Displays a dialog window with an entry into which the
	      user can enter a URL or a filename. TrEd supports
	      downloading and opening files using
	      <literal moreinfo="none">http</literal>, <literal moreinfo="none">ftp</literal>, and
	      (for compatibility) <literal moreinfo="none">file</literal>
	      protocols. The network protocols
	      (<literal moreinfo="none">http,ftp</literal>) are read-only. Moreover,
	      TrEd supports a special protocol indicated by URLs
	      starting with <literal moreinfo="none">ntred://</literal> which allows
	      to inspect and change trees stored in memory of btred
	      servers (ntred and btred are shipped with TrEd but
	      are not covered by this document).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><menuchoice moreinfo="none">
	      <guimenuitem moreinfo="none">New</guimenuitem>
	      <guimenuitem moreinfo="none">From Template</guimenuitem>
	    </menuchoice></term>
	  <listitem>
	    <para>
	      Creates a new empty file with the same header as
	      the file that the user chooses in the
	      <guilabel moreinfo="none">Open</guilabel> dialog box.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><menuchoice moreinfo="none">
	      <guimenuitem moreinfo="none">New</guimenuitem>
	      <guimenuitem moreinfo="none">From Current</guimenuitem>
	    </menuchoice></term>
	  <listitem>
	    <para>
	      Creates a new empty file with the same header as
	      the current open file.  Does nothing if no file is open.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Close</guimenuitem></term>
	  <listitem>
	    <para>Closes current file. If the file is modified but not
	      saved, user is prompted to save it.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Filelist</guimenuitem></term>
	  <listitem>
	    <para>Opens a <guilabel moreinfo="none">Filelist</guilabel> dialog window
	      which allows user to create, load, modify and save lists 
	      of files for browsing, editing or searching pruposes.
	      See more detail in <xref linkend="filelists"/>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Save</guimenuitem></term>
	  <listitem>
	    <para>
	      Saves the active file to the disk. A backup file is
	      created by appending a tilde `~' to the filename (which
	      is a UNIX convention for naming backups).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Save As ...</guimenuitem></term>
	    <listitem>
	    <para>This command first asks the user to choose a desired
	      output format, then opens the standard file dialog where
	      new name and location of the file can be specified and
	      finally runs the <guimenuitem moreinfo="none">Save</guimenuitem>
	      command.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Recent Files</guimenuitem></term>
	  <listitem>
	    <para>
	      This submenu displays ten most recently opened
	      files. User may quickly reopen any of them by clicking
	      on the corresponding item.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Previous File</guimenuitem></term>
	  <listitem>
	    <para>
	      Closes the active file (asking user to
	      save it if modified) and opens the previous file in
	      the current filelist (see <xref linkend="filelists"/>).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Next File</guimenuitem></term>
	  <listitem>
	    <para>
	      Closes the active file (asking user to
	      save it if modified) and opens the next file in
	      the current filelist (see <xref linkend="filelists"/>).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="print_command">
	  <term><guimenuitem moreinfo="none">Print ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Opens a Print Dialog.</para>
	    <para>
	      <application moreinfo="none">TrEd</application> is
	      able to render trees to PostScript,
	      Encapsulated PostScript (EPS), and Portable
	      Document Format (PDF). 
	      Should the trees contain non-latin
	      (iso-8859-1, iso-8859-2, windows-1250, etc.) characters,
	      such as Arabic, the PDF might be the only option,
	      because it allows using TrueType fonts.
	    </para>
	    <para>
	      If <ulink url="http://www.imagemagick.org">ImageMagick</ulink>
	      toolkit is installed, TrEd can also automatically
	      convert the result into one of many image formats.
	      While PostScript is the default printing format on most
	      Unix/Linux systems (and can be printed using the
	      standard <command moreinfo="none">lpr</command> command), Windows users
	      may use for example <ulink url="http://www.adobe.com/products/acrobat/readermain.html">Adobe
	      Acrobat Reader</ulink> to preview and print trees
	      rendered into PDF. There are also some free PostScript
	      interpreters for Windows (see <ulink url="http://www.cs.wisc.edu/~ghost/">GhostView</ulink>).
	    </para>
	    <figure float="0">
	      <title>Print dialog
	      </title>
	      <graphic fileref="pics/tredprint.png"/>
	    </figure>
	    <para>
	      Encapsulated PostScript files (<literal moreinfo="none">EPS</literal>)
	      are especially useful for preparation of other printed
	      materials e.g. <application moreinfo="none">PDF</application> of
	      <application moreinfo="none">LaTeX</application> documents. Compared
	      to bitmapped images, EPS images
	      have the advantage of being scalable. EPS has limitted supported
	      by most office suits (such as Microsoft Office and OpenOffice.org).
	    </para>
	    <note>
	      <para>
		TrEd's ability to render PostScript
		and EPS is limitted to Eastern European character sets.
		For other charsets and unicode (especially when TrEd
		runs on a unicode aware versions of
		<literal moreinfo="none">Perl</literal> and <literal moreinfo="none">Tk</literal>,
		i.e. at least <literal moreinfo="none">Perl 5.8</literal> and
		<literal moreinfo="none">Tk804</literal>), PDF print format is recommended.
	      </para>
	    </note>
	    <para>
	      Printing into PDF requires a TrueType font containing at
	      least the glyphs used in the tree.  For most languages,
	      the usual fonts such as Arial
	      (<literal moreinfo="none">arial.ttf</literal>), Times New Roman
	      (<literal moreinfo="none">times.ttf</literal>) or Bitstream Vera
	      (<literal moreinfo="none">vera.ttf</literal>) are sufficient while other
	      languages, such as Arabic, require a fully featured
	      Unicode font such as <literal moreinfo="none">Arial Unicode MS</literal>.
	      The TrueType font can be specified either directly
	      from the Print dialog or by setting <link linkend="ttfont"><literal moreinfo="none">TTFont</literal></link>
	      configuration option. If <literal moreinfo="none">TTFont</literal>
	      is not given, it defaults to <literal moreinfo="none">Arial</literal>. 
	      TrEd searches for TrueType fonts in directories listed in
	      <link linkend="ttfontpath"><literal moreinfo="none">TTFontPath</literal></link>
              configuration option. If this option is not explicitly
	      specified, TrEd uses directories listed in 
	      fontconfig library configuration file
              <literal moreinfo="none">/etc/fonts/fonts.conf</literal> on Unix
	      and Windows system font directory on Windows.
	      If no usable font is found, PDF printing is disabled.
	    </para>
	    <para>
	      For PostScript printing, <application moreinfo="none">TrEd</application>
	      uses a Type1 font.  The file containing the font may be
	      specified using the <link linkend="psfontfile"><literal moreinfo="none">PsFontFile</literal></link>
	      (and optionally <link linkend="psfontafmfile"><literal moreinfo="none">PsFontAFMFile</literal></link>)
	      configuration option.
	    </para>
	    <itemizedlist>
	    <listitem>
		<para>
		  In the <guilabel moreinfo="none">Print</guilabel> dialog you can specify a printing command to
		  be used or (if <guilabel moreinfo="none">Print to file</guilabel> is checked) a filename of the
		  destination file.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  You can also specify a media-type (paper format)
		  (<guilabel moreinfo="none">Media</guilabel> roll-out menu), page
		  width and height (in case of <literal moreinfo="none">User</literal>
		  media-type), and horizontal and vertical margins.
		  If the printed tree exceeds specified page
		  boundaries, it is automatically shanked and/or
		  (unless <guilabel moreinfo="none">Disable landscape rotation of wide
		  trees</guilabel> is selected) rotated to fit on the
		  page. See <link linkend="psmedia"><literal moreinfo="none">PSMedia</literal></link>
		  configuration option for a list of supported media
		  formats.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  The output format is specified by
		  selecting one of <guilabel moreinfo="none">Create PostScript</guilabel>,
		  <guilabel moreinfo="none">Create EPS</guilabel>, <guilabel moreinfo="none">Create
		  PDF</guilabel> and  <guilabel moreinfo="none">Convert according to
		  ImageMagick</guilabel> buttons.
		</para>
	      </listitem>
	      <listitem>
		<para>If <ulink url="http://www.imagemagick.org">ImageMagick</ulink>
		utilities are installed on the system running TrEd,
		then automatic conversion to one of many image formats
		is supported. To use it, first check the
		<guilabel moreinfo="none">Convert according to file
		extension</guilabel> button, then select a desired
		pixel resolution for conversion to bitmap, and finally
		edit the filename giving it the usual extension of the
		desired output file-format such as
		<filename moreinfo="none">.png</filename> or
		<filename moreinfo="none">.jpg</filename>.  When converting to bitmap,
		<guilabel moreinfo="none">Resolution</guilabel> may be specified to
		adjust the mapping between PostScript coordinate
		system units (given in 1/72 inch) to raster pixels.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  To print the <quote>sentence</quote> together with
		  the tree, check the <guilabel moreinfo="none">Print
		  sentence</guilabel> button. A
		  <quote>sentence</quote> is actually a chain
		  consisting of
		  values of the value-attributes
		  (i.e. <literal moreinfo="none">@V</literal> attributes in FS format)
		  of all nodes in the tree.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  It is possible to print more than one tree (each
		  tree on a separate page).  To do so, a comma-separated list of
		  tree numbers or ranges of tree numbers, that correspond to the
		  desired trees in the active file, must be entered
		  into the <guilabel moreinfo="none">Page range</guilabel> field.  The
		  <inlinegraphic fileref="pics/left.png"/> button may be
		  used to automatically insert a page range
		  corresponding to sentences selected via <link linkend="list_of_sentences"><menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu> <guimenuitem moreinfo="none">List of
		  sentences...</guimenuitem> </menuchoice></link>. A
		  different selection based on
		  <quote>sentences</quote> can be made by pressing the
		  <inlinegraphic fileref="pics/view_sent.png"/> button.
		</para>
	      </listitem>
	      <listitem>
		<para id="page_range">
		  If entered manually, the page range must be
		  specified according to following rules:  First tree
		  in the file has number 1, second has number 2,
		  etc. Ranges are pairs of numbers like
		  <quote><literal moreinfo="none">3-20</literal></quote> which covers
		  all trees starting from the tree no. 3 to no. 20.
		  If the first number in the range is omitted, 1 is
		  assumed. If the second number in the range is
		  ommited, the number of the last tree in the active
		  file is assumed.  The order of the trees given in
		  the list is preserved and also, one tree may be
		  printed more than once.
		  <note>
		    <title>Example:</title>
		    <para>
		      To print trees from 1 to 5, then trees no. 7, 11, 12 and 5
		      again, use e.g. one of the following lists:
		      <simplelist type="vert">
			<member><literal moreinfo="none">1-5,7,11,12,5</literal></member>
			<member><literal moreinfo="none">1-5,7,11-12,5</literal></member>
			<member><literal moreinfo="none">-5,7,11-12,5</literal></member>
		      </simplelist>
		    </para>
		  </note>
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  </varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Edit config ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Opens a small configuration file editor
	      (see <xref linkend="configuration"/> for the details about
	      configuration options). To apply the new configuration, save
	      the configuration file to disk and leave the editor
	      press the <guibutton moreinfo="none">Save and Apply</guibutton>
	      button. To apply changes without saving them, press <guibutton moreinfo="none">Apply</guibutton>. The
	      <guibutton moreinfo="none">Close</guibutton> button closes the
	      editor without making any changes to the present configuration.      
	    </para>
	    <note>
	      <para>
		Some configuration options even if applied take effect only
		after restarting <application moreinfo="none">TrEd</application>.
	      </para>
	    </note>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Reload config ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Use this command to reload the configuration file from
	      disk and apply the new options. This command is useful
	      if you have changed the configuration file in some other
	      editor or in an another running instance of
	      <application moreinfo="none">TrEd</application>. As above, note, that
	      some configuration changes still take effect only after
	      restarting <application moreinfo="none">TrEd</application>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Quit</guimenuitem></term>
	  <listitem>
	    <para>Exits the editor and in case that active file is modified and
	      not yet saved, prompts the user to save it.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="view">
      <title><guimenu moreinfo="none">View</guimenu></title>
      <variablelist>
	<varlistentry>
	  <term><guisubmenu moreinfo="none">Previous Tree</guisubmenu></term>
	  <listitem>
	    <para>Display previous tree in the current file.
	    </para>    
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Next Tree</guimenuitem></term>
	  <listitem>
	    <para>Display next tree in the current file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Draw boxes around labels</guimenuitem></term>
	  <listitem>
	    <para>If this item is checked, square boxes are drawn
	      around the group of node labels.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Draw boxes around edge labels</guimenuitem></term>
	  <listitem>
	    <para>If this item is checked, square boxes are drawn
	      around the group of edge attributes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Show Hidden Nodes</guimenuitem></term>
	  <listitem>
	    <para>
	      Toggle displaying the hidden subtrees of the tree.
	      If this item is checked, nodes makred as hidden using a special
	      attribute (see 
	      <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/Doc/fs.html">FS-format description</ulink>
	      for details) and all their subtrees are also displayed.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Highlight Attributes</guimenuitem></term>
	  <listitem>
	    <para>
	      Toggle highlighting certain attributes with user-defined
	      colors. See <xref linkend="configuration"/> for details on
	      customizing colors and <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/Doc/fs.html">FS-format
		description</ulink> to learn about how to specify which attributes
		are highlighted.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Sort Attributes in Dialogs</guimenuitem></term>
	  <listitem>
	    <para>
	      Toggle sorting attributes by name in all dialog
	      windows displaying any form of a list of attributes
	      or attribute values.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Close current view</guimenuitem></term>
	  <listitem>
	    <para>
	      Closes focused view if more than one views are present.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Split view horizontally</guimenuitem></term>
	  <listitem>
	    <para>
	      Create and focus a new view by splitting the current
	      view horizontally. Sizes of the new and old view
	      may be adjusted by dragging the thin that separats them.
	      User may switch between views by
	      clicking into the view he or she wants to focus. All
	      subsequent keyboard shorcuts as well as menu and button
	      commands are applied to the focused view. The focused view
	      is distinguished from other views by black border
	      drawn around it (both color and width of this border
	      may be customized, see
	      <link linkend="highlightwindowcolor"><varname>HighlightWindowColor</varname></link>
	      and <link linkend="highlightwindowwidth"><varname>HighlightWindowWidth</varname></link>
	      configuration options described below).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Split view vertically</guimenuitem></term>
	  <listitem>
	    <para>
	      Create and focus a new view by splitting the current
	      view vertically. Sizes of the new and old view
	      may be adjusted by dragging the thin that separats them.
	      See also little more detailed description of 
	      <guimenuitem moreinfo="none">Split view horizontally</guimenuitem>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="list_of_sentences">
	  <term><guimenuitem moreinfo="none">List of sentences ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Display a window containing a list of all
	      <quote>sentences</quote> based on all trees in the
	      current file. A <quote>sentence</quote> is a chain
	      consisting of values of the value-attributes
	      (i.e. <literal moreinfo="none">@V</literal> attributes in FS format) of
	      all nodes in the tree.
	    </para>
	    <para>The <inlinegraphic fileref="pics/right.png"/>
	      button may be used to display the corresponding sentence
	      in the current TrEd window.</para> <para>The
	      <inlinegraphic fileref="pics/gray_belly3.png"/>
	      button may be used to select the current sentence.
	      Selected sentences may be later inserted to the tree
	      selection field in the <link linkend="print_command">Print dialog</link> as well as
	      in the <link linkend="copytrees_command">Copy trees
	      dialog</link> by pressing the <inlinegraphic fileref="pics/left.png"/> button.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Customize tree appearance</guimenuitem></term>
	  <listitem>
	    <para>
	      Open a dialog box in which the user can select the
	      attributes that should be displayed and modify the way
	      the tree is presented. See <xref linkend="attributes"/> for more detail.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">List of Named Macros...</guimenuitem></term>
	  <listitem>
	    <para>
	      Display a window containing a list of all user-defined
	      macros in current context and the corresponding
	      keyboard shortcuts.  User may immediately run a macro
	      by double-clicking a corresponding item in the list, or
	      by pressing the <guibutton moreinfo="none">Run and Close</guibutton>
	      button. In the latter case, the window is closed.  The
	      <guilabel moreinfo="none">Sort by name</guilabel> and <guilabel moreinfo="none">Sort by
	      keyboard shortcuts</guilabel> radio-buttons let user to
	      switch between the two modes of ordering the list.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="node">
      <title><guimenu moreinfo="none">Node</guimenu></title>
      <variablelist>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">New Node</guimenuitem></term>
	  <listitem>
	    <para>
	      Creates a new node and connects it as a child of the
	      active node. All the attribute values of this node are left
	      empty.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Remove Active Node</guimenuitem></term>
	  <listitem>
	    <para>
	      Passes all the children of the active node to its parent and
	      deletes the active node. Does nothing if the active node is
	      the root of the tree.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Insert New Tree</guimenuitem></term>
	  <listitem>
	    <para>
	      Inserts new tree <emphasis>before</emphasis> the current
	      tree. The new tree consists of one empty node (its root)
	      only.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Insert New Tree After</guimenuitem></term>
	  <listitem>
	    <para>
	      Inserts new tree <emphasis>after</emphasis> the current
	      tree. The new tree consists of one empty node (its root)
	      only.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Remove Whole Current Tree</guimenuitem></term>
	  <listitem>
	    <para>
	      Removes the current tree from the file and displays the
	      following tree (or the preceding tree, in case the
	      current tree was the last one in the file).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="copytrees_command">
	  <term><guimenu moreinfo="none">Copy Trees</guimenu></term>
	  <listitem>
	    <para>
	      Displays a dialog allowing user to copy trees from the
	      current file into another file currently opened in TrEd.
	      The trees are selected by a comma separated list of
	      ranges. The format of the list is the same as in the
	      <link linkend="print_command">Print dialog</link>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Edit Attributes</guimenuitem></term>
	  <listitem>
	    <para>
	      Displays the <guilabel moreinfo="none">Edit Node Attributes</guilabel> 
	      dialog box with the list of all attributes defined
	      for the file and the values assigned to them in the active node.
	      There are two types of attributes and therefore two ways to edit
	      them:
	    </para>
	    <orderedlist continuation="restarts" inheritnum="ignore">
	      <listitem>
		<para>
		  In case of an attribute where
		  <emphasis>no</emphasis> fixed set of possible values
		  is given (see <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/Doc/fs.html">FS-format
		  description</ulink> for details about types of
		  attributes) the values of the attributes are
		  displayed in a editable line and user may change
		  simply edit them. The usual keyboard-shortcuts for
		  <guimenuitem moreinfo="none">Cut</guimenuitem> (<keycombo moreinfo="none" action="simul"><keycap moreinfo="none">Ctrl</keycap><keycap moreinfo="none">X</keycap></keycombo>),
		  <guimenuitem moreinfo="none">Copy</guimenuitem> (<keycombo moreinfo="none" action="simul">
		    <keycap moreinfo="none">Ctrl</keycap><keycap moreinfo="none">C</keycap></keycombo>)
		  and <guimenuitem moreinfo="none">Paste</guimenuitem> (<keycombo moreinfo="none" action="simul"><keycap moreinfo="none">Ctrl</keycap><keycap moreinfo="none">V</keycap></keycombo>)
		  operations may be used during the editing of the
		  values.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  In case of attribute where a fixed set of possible values
		  <emphasis>is</emphasis> given, user cannot simply edit the value entry, but
		  to change it he/she must press the button <literal moreinfo="none">[...]</literal> on the
		  right of the value entry.
		  A dialog box displays where user may select one or more
		  (depending on the status of the <guilabel moreinfo="none">multiple select</guilabel>
		  check-box) values for the given attribute within the list of
		  values from the predefined set.      
		</para>
	      </listitem>
	    </orderedlist>
	  </listitem>
	</varlistentry>
	<varlistentry id="find">
	  <term><guimenuitem moreinfo="none">Find ...</guimenuitem></term>
	  <listitem>
	    <para>
	      This command displays a dialog box in which user may
	      specify a search criterion for a node search. The search
	      is based on regular expressions, wild-card patterns or
	      literal strings matching the desired nodes values. In
	      the dialog, there is an entry for each defined attribute
	      into which user may enter a <ulink url="regexps.html">regular expression</ulink>,
	      exhaustive regular expression (i.e. the pattern must
	      match the whole value being searched), wild-card pattern
	      (where <literal moreinfo="none">?</literal> matches any character and
	      <literal moreinfo="none">*</literal> matches any number of any
	      characters) or a literal string (depending on the value
	      of the <guilabel moreinfo="none">Search method</guilabel>
	      option-menu).</para>
	    <para>
	      In the <guilabel moreinfo="none">Search file-list</guilabel> option-menu, 
	      the user may choose a file-list to search through.	      
	    </para>
	    <para>
	      When user presses <guibutton moreinfo="none">Find</guibutton> button,
	      <application moreinfo="none">TrEd</application> searches for the first
	      matching node in the selected file-list (or current file
	      in case the <guilabel moreinfo="none">[Current file only]</guilabel>
	      option was selected from the <guilabel moreinfo="none">Search
	      file-list</guilabel> menu). A node matches if and only
	      if all its attributes match the given patterns.
	      (If no pattern is given for a certain
	      attributes, these attributes are always considered to
	      match). 
	      If a matching node is found, this node is displayed
	      and made active.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Find Next ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Searches for the first node matching the criteria of the
	      previous use of the <guimenuitem moreinfo="none">Find ...</guimenuitem> command.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Find Previous ...</guimenuitem></term>
	  <listitem>
	    <para>
	      Searches for the first preceding node matching the
	      criterion given in a previous use of the
	      <guimenuitem moreinfo="none">Find ...</guimenuitem> command.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>Session</title>
      <para>
	This menu lets user switch between
	currently open files, change current
	file-list and setup file-related options.</para>
      <sect3>
	<title>Options</title>
	<variablelist id="dontcloseonopen">
	  <varlistentry>
	    <term><guimenuitem moreinfo="none">Don't close on open</guimenuitem></term>
	    <listitem>
	      <para>
		Do not close current file when opening a new one.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><guimenuitem moreinfo="none">Build TGTS from CSTS</guimenuitem></term>
	    <listitem>
	      <para>
		This PDT-specific option allows to choose whether
		the Analytic or the Tectogrammatic tree structure
		is built when parsing a file in the CSTS SGML format.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><guimenuitem moreinfo="none">Preserve patterns on reload</guimenuitem></term>
	    <listitem>
	      <para>
		If this option is checked, current attribute pattern setting is not
		replaced with the one from the file when current file
		is reloaded with by pressing the
		<inlinegraphic fileref="pics/reload.png"/>
		(see also the <xref linkend="reloadpreservespatterns"/>
		configuration option).
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>
      <sect3>
	<title>Open Files</title>
	<para>
	  <application moreinfo="none">TrEd</application> allows having multiple
	  files open. In case the user tries to open a file 
	  while another file is already open, modified, and yet not
	  saved
	  (and the <link linkend="dontcloseonopen">Don't close on open</link> option is not checked)
	  <application moreinfo="none">TrEd</application> offers the user to save
	  changes in the current file and close it, close it withought
	  saving or to <emphasis>keep</emphasis> the file open. In the
	  latter case, the file is not closed nor any changes are
	  discarded but the file stays open and remains in the
	  <guimenu moreinfo="none">Session</guimenu> menu under the <guimenuitem moreinfo="none">Open
	    files</guimenuitem> label. Any number of files can be
	  simultaneously open in this way. User may resume
	  any open file and display it
	  in the current window by choosing the corresponding item in the
	  <guimenu moreinfo="none">Session</guimenu> menu.
	</para>
      </sect3>
      <sect3>
	<title>File Lists</title>
	<para>
	  The <guimenuitem moreinfo="none">File lists</guimenuitem> contains a list of
	  currently present file-lists. User may switch to another
	  file-list by choosing the corresponding item. The lastly open
	  file of the selected file-list is then re-opened and
	  displayed. To edit an existing file-list, remove it or create
	  new file-lists, user must use <menuchoice moreinfo="none">
	    <guimenu moreinfo="none">File</guimenu>
	    <guimenuitem moreinfo="none">File List ...</guimenuitem>
	  </menuchoice>.
	</para>
	<para>
	  If current file-list contains more than one file, user may use
	  <menuchoice moreinfo="none"> <guimenu moreinfo="none">File</guimenu> <guimenuitem moreinfo="none">Previous
	      File</guimenuitem> </menuchoice> (or press <inlinegraphic fileref="pics/start.png"/>) and <menuchoice moreinfo="none">
	    <guimenu moreinfo="none">File</guimenu> <guimenuitem moreinfo="none">Next File</guimenuitem>
	  </menuchoice> (or press <inlinegraphic fileref="pics/finish.png"/>) to open previous or
	  next file in the file-list.
	</para>
      </sect3>
    </sect2>
    <sect2>
      <title><guimenu moreinfo="none">Bookmarks</guimenu></title>
      <para>
	This menu maintains user's bookmarks. Bookmarks are stored
	in an ordinary file-list named <literal moreinfo="none">Bookmarks</literal>
	and consist of a file name, tree number suffix and node position.	
      </para>
      <para>
	<guimenuitem moreinfo="none">Add Bookmars</guimenuitem> menu command
	is used to bookmark the current position in the file and tree.
      </para>
      <para>
	The <guimenuitem moreinfo="none">Last action</guimenuitem> menu command
	automatically opens and displayes the place where user made
	last change to the tree structure or a node attribute. This is
  	special feature is realized by a special hidden bookmark
	which is maintained by <application moreinfo="none">TrEd</application> and
	does not appear in the bookmark list or
	<literal moreinfo="none">Bookmark</literal> file-list.
      </para>
      <para>
	The rest of the <guimenu moreinfo="none">Bookmarks</guimenu> menu lists all
	defined bookmarks. User may follow a bookmark by choosing the
	corresponding item.
      </para>
    </sect2>
    <sect2 id="usercommands">
      <title><guimenu moreinfo="none">User-defined</guimenu></title>
      <para>
	This menu is devoted for user-defined commands. The new
	commands may be defined in the macro file. <!-- See sections on
	macros below for details. --> Here is a brief description of the
	few default macros defined by author of
	<application moreinfo="none">TrEd</application>. These macros may be used in
	any context based on the default <literal moreinfo="none">TredMacro</literal>
	context.
      </para>
      <para>
	In the menu, there is the default keyboard shortcut displayed
	on the right of each command. The shortcut can be used to
	invoke the corresponding macro command. 
	The mapping of the shortcuts and macros is defined 
	in the macro file.
      </para>
      <note>
	<para>
	  Note that, there are no keyboards shotrcuts assigned to the
	  standard (non-macro) menu commands, except only a few. The
	  aim of this is to give user maximum freedom of choice of
	  shortcuts for his/her own macro commands. There is a
	  possibility to define bindings for many of the standard menu
	  commands within the macro file.
	</para>
      </note>
      <variablelist>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Copy Values</guimenuitem>
	  (<keycap moreinfo="none">F5</keycap>)</term> 
	  <listitem>
	    <para>
	      Copies all values of the active node to an internal
	      clipboard. These values may be pasted to any other node using
	      the <guimenuitem moreinfo="none">Paste Values</guimenuitem> command.
	    </para>    
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Cut Subtree</guimenuitem> (<keycombo moreinfo="none" action="simul"><keycap moreinfo="none">Ctrl</keycap><keycap moreinfo="none">Insert</keycap></keycombo>)</term>
	  <listitem>
	    <para>Cuts the whole subtree of the active node and
	      stores it in an iternal clipboard. It may be then pasted
	      as a subtree of any of the remaining nodes with the
	      <guimenuitem moreinfo="none">Paste Subtree</guimenuitem> command.
	      </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Delete Node</guimenuitem>
	  (<keycap moreinfo="none">F8</keycap>)</term> 
	  <listitem>
	    <para>
	      Deletes active node. The node must be a leaf and must
	      not be the root of the tree, otherwise this command is
	      ignored.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Goto to first tree</guimenuitem>
	    (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Shift</keycap>
	      <keycap moreinfo="none">&lt;</keycap></keycombo>)</term> 
	  <listitem>
	    <para>
	      Displays the first tree in the file.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Goto to last tree</guimenuitem>
	    (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Shift</keycap>
	      <keycap moreinfo="none">&gt;</keycap></keycombo>)</term>  
	  <listitem>
	    <para>
	      Displays the last tree in the file.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Go to...</guimenuitem> (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Alt</keycap>
	      <keycap moreinfo="none">G</keycap></keycombo>)</term> 
	  <listitem>
	    <para>
	      Promts user to enter an ordinal number of a tree and displays it.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">New Node (r-brother)</guimenuitem>
	  (<keycap moreinfo="none">F7</keycap>)</term> 
	  <listitem>
	    <para>
	      Creates new node as a right brother of the active node (does
	      nothing if the active node is root).      
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">New Node (son)</guimenuitem> (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Shift</keycap>
	      <keycap moreinfo="none">F7</keycap></keycombo>)</term>
	  <listitem>
	    <para>
	      Creates new node as a son of the active node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Paste Subtree</guimenuitem>
	    (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Shift</keycap>
	      <keycap moreinfo="none">Insert</keycap></keycombo>)</term>
	  <listitem>
	    <para>
	      Pastes the tree saved in an internal clipboard during the last
	      call of the <guimenuitem moreinfo="none">Cut Subtree</guimenuitem> command as a subtree of the
	      active node.      
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Paste Values</guimenuitem>
	  (<keycap moreinfo="none">F8</keycap>)</term>
	  <listitem>
	    <para>
	      Assignes the active nodes attribute values stored in an internal
	      clipboard during the last call of the <guimenuitem moreinfo="none">Copy Values</guimenuitem> command.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Perl-Search</guimenuitem> (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Alt</keycap>
	      <keycap moreinfo="none">H</keycap></keycombo>)</term>
	  <listitem>
	    <para>
	      When invoked, displays a window with a small editor for
	      Perl code. The Perl code entered by user is then
	      evaluated for every node of the tree in the natural
	      ordering starting from the current node.  The evaluation
	      stops on the first node for which the Perl code
	      returns with true (i.e. a defined non-zero value).
	      The node is then made active.
	    </para>
	    <para>
	      In the Perl code, the <literal moreinfo="none">$this</literal> variable
	      may be used to refer to the current node and
	      <literal moreinfo="none">$root</literal> variable may be used as a
	      reference to the root of the tree.  If
	      <literal moreinfo="none">$n</literal> refers to some node, then
	      <literal moreinfo="none">$n-&gt;{attr}</literal> is value of
	      <literal moreinfo="none">attr</literal> attribute for the node
	      <literal moreinfo="none">$n</literal>.  The governor of a node
	      <literal moreinfo="none">$n</literal> is refered to as to
	      <literal moreinfo="none">Parent($n)</literal> or
	      <literal moreinfo="none">$n-&gt;parent</literal>, nearest left brother of
	      <literal moreinfo="none">$n</literal> in the tree structure is
	      <literal moreinfo="none">LBrother($n)</literal> or
	      <literal moreinfo="none">$n-&gt;lbrother</literal>; the right brother of
	      <literal moreinfo="none">$n</literal> is <literal moreinfo="none">RBrother($n)</literal>
	      or <literal moreinfo="none">$n-&gt;rbrother</literal>.  The first son of
	      <literal moreinfo="none">$n</literal> is referred to as to
	      <literal moreinfo="none">FirstSon($n)</literal> or
	      <literal moreinfo="none">$n-&gt;firstson</literal>.
	      The root of the tree containing node
	      <literal moreinfo="none">$n</literal>
	      can be reached with <literal moreinfo="none">$n-&gt;root</literal>.
	      A perl list of all child-nodes of <literal moreinfo="none">$n</literal>
	      may be obtained by <literal moreinfo="none">$n-&gt;children</literal> method.
	      If no such nodes exist,
	      all these functions return zero `0'.  Moreover, all the
	      nodes of the tree are elements of the
	      <literal moreinfo="none">@nodes</literal> array (list) with the same
	      order as they are displayed on the screen from left to
	      right.</para>
	    <note>
	      <para>
		<literal moreinfo="none">$n-&gt;lbrother</literal> and
		<literal moreinfo="none">$n-&gt;rbrother</literal> are not necesserilly
		displayed on left of <literal moreinfo="none">$n</literal>.
	      </para>
	    </note>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Perl-Search Next</guimenuitem> (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Alt</keycap>
	      <keycap moreinfo="none">Shift</keycap>
	      <keycap moreinfo="none">H</keycap></keycombo>)</term>
	  <listitem>
	    <para>
	      Searches for the next node for which the Perl-expression
	      given during the last call of <guimenuitem moreinfo="none">Perl-Search</guimenuitem> command
	      results in non-zero defined value.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">Swap nodes (values only)</guimenuitem>
	      (<keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Ctrl</keycap>
	      <keycap moreinfo="none">PageUp</keycap></keycombo>)</term> 
	  <listitem>
	    <para>
	      Makes the active node exchange all attribute values with its
	      governing node.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title><guimenu moreinfo="none">Help</guimenu></title>
      <variablelist>
	<varlistentry>
	  <term><guimenuitem moreinfo="none">About</guimenuitem></term>
	  <listitem>
	    <para>
	      Displays the <guimenuitem moreinfo="none">About</guimenuitem> dialog
	      where the information about version, current file name
	      and format, number of trees, and more is given.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  <sect1 id="chap3">
    <title>Viewing and editing the tree structure and attributes</title>
    <para>
      <application moreinfo="none">TrEd</application> can be controlled either by keyboard or mouse.
      There are several pre-defined keyboard hotkeys
      to move the active-node (cursor) along the tree, to
      cut or paste subtrees and nodes (i.e modify the structure)
      and to open the dialog where attributes for the active node can
      be edited. Trees can also be easily modified by clicking and
      drag-and-drop. Both of these approaches are described below:
    </para>
    <sect2>
    <title>Mouse Control</title>
    <itemizedlist>
      <listitem>
	  <para>Clicking left or right mouse button on a node activates it.</para></listitem>
      <listitem>
	  <para>Double clicking left mouse button on a node invokes
	    <menuchoice moreinfo="none">
	    <guimenu moreinfo="none">Node</guimenu>
	    <guimenuitem moreinfo="none">Edit Attribues</guimenuitem></menuchoice> command.</para></listitem>
	<listitem>
	  <para>Double clicking left mouse button on the text of 
	    a node's attribute opens a prompt for editing the value of
	    this attribute.
	  </para>
      </listitem>
      <listitem>
	  <para>
	    Dragging active node with left mouse button moves that node with
	    its subtree to the new location. If user releases the button near
	    another node, the active node becomes son of that node.	
	  </para>
      </listitem>
      <listitem>
	  <para>
	    Dragging active node with right mouse button has the same
	    effect but if the tree is too large to fit the window, the
	    window <quote>scrolls forward</quote> as user gets near its edges.
	  </para>
      </listitem>
      <listitem>
	  <para>
	    Dragging mouse with the middle mouse button pressed has the
	    same <quote>scrolling effect</quote> described above, but no node is
	    moved.
	  </para>
	</listitem>
      </itemizedlist>
    </sect2>
    <sect2>
      <title>Toolbar buttons</title>
      <para>
	The following toolbar-buttons provide mouse-oriented shortcuts
	for standard menu-commands:
      </para>
      <informaltable>
	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><graphic fileref="pics/fileopen.png"/></entry><entry><menuchoice moreinfo="none">
		  <guimenu moreinfo="none">File</guimenu>
		  <guimenuitem moreinfo="none">Open ...</guimenuitem>
		</menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/filefloppy.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">File</guimenu><guimenuitem moreinfo="none">Save</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/reload.png"/></entry>
	      <entry><para>Reload current file from disk.</para></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/redo.png"/></entry>
	      <entry><para>Redo last undone operation on the current tree.</para></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/undo.png"/></entry>
	      <entry><para>Undo last operation on the current
		  tree. (See also <xref linkend="maxundo"/>
	      configuration option.)</para></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/findprev.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">Node</guimenu><guimenuitem moreinfo="none">Find Previous</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/start.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">File</guimenu><guimenuitem moreinfo="none">Previous File</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/fileprint.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">File</guimenu><guimenuitem moreinfo="none">Print ...</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/find.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">Node</guimenu><guimenuitem moreinfo="none">Find ...</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/findnext.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">Node</guimenu><guimenuitem moreinfo="none">Find Next</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/finish.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">File</guimenu><guimenuitem moreinfo="none">Next File</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/left.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu><guimenuitem moreinfo="none">Previous Tree</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/right.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu><guimenuitem moreinfo="none">Next Tree</guimenuitem></menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/tick.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu><guimenuitem moreinfo="none">Customize
		    Tree...</guimenuitem>
		</menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/view_sent.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu><guimenuitem moreinfo="none">List
	      of sentences...</guimenuitem>
		</menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/hsplit.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Split view horizontally</guimenuitem>
		</menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/vsplit.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Split view vertically</guimenuitem>
		</menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/rmsplit.png"/></entry>
	      <entry><menuchoice moreinfo="none"><guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Close current view</guimenuitem>
		</menuchoice></entry>
	    </row>
	    <row>
	      <entry><graphic fileref="pics/tiewins.png"/></entry>
	      <entry>This may have two states. If pressed,
		all displayed views are tied together, so that
		pressing <inlinegraphic fileref="pics/left.png"/> or
		<inlinegraphic fileref="pics/right.png"/> buttons
		as well as invoking
		<menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guisubmenu moreinfo="none">Previous tree</guisubmenu>
		</menuchoice> or
		<menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guisubmenu moreinfo="none">Next tree</guisubmenu>
		</menuchoice>
		applies to all displayed views.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>
    </sect2>
    <sect2>
      <title>Keyboard Shortcuts</title>
      <para>Cursor keys may be used
	to activate another node in the structure. Use
	<keycap moreinfo="none">left</keycap>/<keycap moreinfo="none">right</keycap> to activate the
	nearest left/right brother-node of the active node and
	<keycap moreinfo="none">up</keycap>/<keycap moreinfo="none">down</keycap> to activate the active
	node's ancestor (parent)/its leftmost son.  
      </para>
      <para>
	Use <keycombo moreinfo="none" action="simul"> <keycap moreinfo="none">Shift</keycap>
	  <keycap moreinfo="none">left</keycap> </keycombo>/<keycombo moreinfo="none" action="simul">
	  <keycap moreinfo="none">Shift</keycap> <keycap moreinfo="none">right</keycap> </keycombo> to
	  activate the nearest node on the left/right of the active
	  node within the active node's level.
      </para>
      <para>
	<keycap moreinfo="none">Tab</keycap> and
	<keycombo moreinfo="none" action="simul">
	  <keycap moreinfo="none">Shift</keycap>
	  <keycap moreinfo="none">Tab</keycap>
	</keycombo> keys activate the
	next/previous node on the way along the tree structure.
      </para>
      <para>
      <keycap moreinfo="none">Enter</keycap> runs the <menuchoice moreinfo="none">
	  <guimenu moreinfo="none">Node</guimenu>
	  <guimenuitem moreinfo="none">Edit Attributes</guimenuitem></menuchoice> command.
    </para>
    <para>
      To edit the tree structure with keyboard only, use the shortcuts
      bound to the <link linkend="usercommands">User-defined menu
      commands</link>. Most important of those are:
      </para>
      <variablelist>
	<varlistentry>
	<term><keycombo moreinfo="none" action="simul">
	    <keycap moreinfo="none">Ctrl</keycap>
	    <keycap moreinfo="none">Insert</keycap>
	    </keycombo> (<guimenuitem moreinfo="none">Cut Subtree</guimenuitem>)</term>
	  <listitem>
	    <para>      
	      Cuts the whole subtree of the active node and stores it in an
	      iternal clipboard. It may be then pasted as a subtree of any
	      of the remaining nodes with the <guimenuitem moreinfo="none">Paste Subtree</guimenuitem>
	      command.
	    </para>    
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Shift</keycap>
	      <keycap moreinfo="none">Insert</keycap>
	    </keycombo> (<guimenuitem moreinfo="none">Paste Subtree</guimenuitem>)</term>
	  <listitem>
	    <para>
	    Pastes the tree saved in an internal clipboard during the
	    last call of the <guimenuitem moreinfo="none">Cut Subtree</guimenuitem>
	    command as a subtree of the active node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><keycombo moreinfo="none" action="simul">
	      <keycap moreinfo="none">Alt</keycap>
	      <keycap moreinfo="none">G</keycap></keycombo> (<guimenuitem moreinfo="none">Go to...</guimenuitem>)</term>
	  <listitem>
	    <para>Promts user to enter an ordinal number of a tree and displays
	      the tree.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><keycap moreinfo="none">,</keycap> <quote>comma</quote> (<menuchoice moreinfo="none">
	      <guimenu moreinfo="none">View</guimenu>
	      <guimenuitem moreinfo="none">Previous Tree</guimenuitem>
	    </menuchoice>)</term>
	  <listitem>
	    <para>Displayes the previous tree in the current file.
	      Note, that this shorcuts operates on the focused
	      view only, even if button <inlinegraphic fileref="pics/tiewins.png"/> is pressed and all views are tied.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><keycap moreinfo="none">.</keycap> <quote>dot</quote> (<menuchoice moreinfo="none">
	      <guimenu moreinfo="none">View</guimenu>
	      <guimenuitem moreinfo="none">Next Tree</guimenuitem>
	    </menuchoice>)</term>
	  <listitem>
	    <para>Displayes the next tree in the current file.
	      Note, that this shorcuts operates on the focused
	      view only, even if button <inlinegraphic fileref="pics/tiewins.png"/> is pressed and all views are tied.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  <sect1 id="attributes">
    <title>Customizing Tree Appearance</title>
    <para>
      <application moreinfo="none">TrEd</application> allows for customizing
      the appearance of the tree, esp. the content and appearance
      of node and edge labels, node coloring, edge appearance,
      and content of the hint displayed when mouse pointer lingers
      over a node.
    </para>
    <para>
      The text of node labels (usually consisting of node attribute
      values) displayed below each node (and/or on tree edges) as well as
      other properties of the visual appearance of the displayed tree
      can be specified using so called styling <emphasis>patterns</emphasis>.
    </para>
    <para>
      <emphasis>Patterns</emphasis> are generally templates for one
      line of text to be displayed under each node in the
      <application moreinfo="none">TrEd</application>'s main window, but some special
      syntax may be used to specify visual appearance of
      other parts of the displayed tree.
    </para>
    <para>
      Patterns may be stored directly in FS files which makes their
      setting specific to a file. Because this is not usually very
      convenient, TrEd introduces another way to store and orgainze
      pattern sets, called <literal moreinfo="none">stylesheets</literal>. In fact,
      the user may create many different stylesheets. Pattern
      stylesheets can be given a name and swithched between using a
      stylesheet list shown on the picture below. It can be found on
      the right side of toolbar next to the <inlinegraphic fileref="pics/tick.png"/> button. A stylesheet specific for a
      file is represented by <guilabel moreinfo="none">&lt;From
      File&gt;</guilabel> item of the stylesheet list.
    </para>
    <para>
      To create a new named stylesheet (based on the current pattern
      settings), select an item labeled <guilabel moreinfo="none">&lt;New From
      Current&gt;</guilabel> from the stylesheet list and fill a name
      into the displayed dialog entry. The new stylesheet
      immediatelly appears as the selected item in the list.
    </para>
    <figure float="0">
      <title>Switching stylesheets</title>
      <graphic fileref="pics/patternset.png"/>
    </figure>
    <para>
      While file-specific patterns are stored directly in the FS
      files, named stylesheets are saved in a file called
      <filename moreinfo="none">.tred-stylesheets</filename> in user's home directory.
      This file is updated every time a pattern-set is modified.
      Currently selected named pattern set can be completely removed
      from the list by selecting <guilabel moreinfo="none">&lt;Delete
      Current&gt;</guilabel> item from the pattern-set list.
    </para>
    <para>
      Selected pattern set can be populated with patterns and modified in
      a configuration dialog which is displayed on pressing <inlinegraphic fileref="pics/tick.png"/> button or <menuchoice moreinfo="none">
      <guimenu moreinfo="none">View</guimenu> <guimenuitem moreinfo="none">Customize
      Tree...</guimenuitem></menuchoice> menu command.
    </para>
    <figure float="0">
      <title>Customizing Tree Appearance dialog</title>
      <graphic fileref="pics/customatt.png"/>
    </figure>
    <para>
      The dialog window contains four main elemens: an editor of
      individual patterns, an attribute list, a pattern list and a
      hint pattern editor. Double-clicking an attribute
      insert attribute reference into current cursor position
      in the pattern editor or hint pattern editor, whichever is focused.
    </para>
    <para>
      While literal text occuring within a pattern is copied into the
      tree (as a node label) without any change or evaluation, the
      following substrings have special meaning:
    </para>
    <variablelist>
      <varlistentry>
	<term><literal moreinfo="none">${<replaceable>attr</replaceable>}</literal></term>
	<listitem>
	  <para>
	    Attribute reference. Any occurence of this substring is
	    replaced by current node's value of attribute named
	    <replaceable>attr</replaceable>. This reference is
	    actually linked with the attribute, so double-clicking the
	    displayed value in the tree shows a dialog where the
	    attribute value can be changed.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal moreinfo="none">#{<replaceable>color</replaceable>}</literal></term>
	<listitem>
	  <para>
	    This sequence of characters may be used to change the
	    color of any possible following text generated by the
	    pattern.  The <replaceable>color</replaceable> may be
	    either an english name of a color,
	    such as <literal moreinfo="none">black</literal>, <literal moreinfo="none">red</literal> or
	    <literal moreinfo="none">darkblue</literal>, or one of ten symbolic names
	    <literal moreinfo="none">custom0</literal>, <literal moreinfo="none">custom1</literal> to
	    <literal moreinfo="none">custom9</literal>.  In the later case, the
	    resulting color depends on current settings of the <link linkend="customcolor"><literal moreinfo="none">CustomColor<replaceable>#</replaceable></literal></link>
	    configuration options (where <replaceable>#</replaceable>
	    is one of <literal moreinfo="none">0...9</literal>).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal moreinfo="none">&lt;?<replaceable>code</replaceable>?&gt;</literal></term>
	<listitem>
	  <para>
	    This sequence may encapsulate any Perl code. The code
	    is interpreted in the time of evaluation of the pattern
	    (i.e. just before the line is actually to be displayed)
	    and the result returned by the code replaces
	    the code sequence in the pattern.
	  </para>
	  <para>
	    Note that the returned value may contain other special
	    sequences, except for another <literal moreinfo="none">&lt;?<replaceable>...</replaceable>?&gt;</literal>
	    sequence.
	  </para>
	  <para>Within the <replaceable>code</replaceable>, 
	    one may refer to any attribute value 
	    of the current node with either
	    <literal moreinfo="none">$${<replaceable>attr</replaceable>}</literal>
	    or
	    <literal moreinfo="none">$this-&gt;{<replaceable>attr</replaceable>}</literal>.
	    
	    The current node object itself may be referrenced as
	    <literal moreinfo="none">$this</literal> (so it is for example possible to
	    access current node's parent by
	    <literal moreinfo="none">$this-&gt;parent</literal>).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal moreinfo="none"><replaceable>label</replaceable>:</literal></term>
	<listitem>
	  <para>If this string appears at the very beginning of a
	    pattern, the pattern may be treated specially.  There are
	    only five pattern labels used by TrEd itself. These are
	    <literal moreinfo="none">node</literal>, <literal moreinfo="none">edge</literal>, <literal moreinfo="none">style</literal>, <literal moreinfo="none">text</literal>
	    and <literal moreinfo="none">rootstyle</literal>.
	    Patterns labeled with any other label are ignored by TrEd
	    but may be queried and used by macros.
	  </para>
	  <para>
	    Patterns labeled as <literal moreinfo="none">node</literal> are used to
	    display a line of to text under each node of the tree
	    as described above.
	  </para>
	  <para>
	    Patterns labeled as <literal moreinfo="none">edge</literal> behave
	    likewise but the text is drawn across (or beside)
	    the edge connecting the node with its parent. It
	    is not drawn at all for the root node.
	  </para>
	  <para>Patterns labeled as <literal moreinfo="none">style</literal> do not
	    result in any text visible on the screen but are also
	    interpolated and the result is scanned for the special
	    tree styling instructions described below that may
	    dynamically alter the appearens of the nodes, edges and
	    text labels of the displayed trees.
	  </para>
	  <para>Patterns labeled as <literal moreinfo="none">text</literal> 
	    may be used to specify string to be displayed for given
	    node in the text field above the tree.
	  </para>
	  <para>
	    Patterns labeled as <literal moreinfo="none">rootstyle</literal>
	    behave in much the same way as the
	    <literal moreinfo="none">style</literal> but are only interpolated
	    once (for the root node) and the styling instructions
	    defined here have lower precedence than those
	    of <literal moreinfo="none">style</literal> patterns.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal moreinfo="none">#{<replaceable>object</replaceable>-<replaceable>feature</replaceable>:<replaceable>value</replaceable>}</literal></term>
	<listitem>
	  <para>
	    These instructions may affect appearence of
	    all elements of the tree. They should be used within
	    <literal moreinfo="none">style</literal>
	    and <literal moreinfo="none">rootstyle</literal> labeled patterns only, but
	    may be created dynamically utilizing the <literal moreinfo="none">&lt;?
	    ... ?&gt;</literal> perl-code evaluation.
	  </para>
	  <para>See <xref linkend="style-instructions"/> for
	    list of <replaceable>objects</replaceable>,
	    their <replaceable>features</replaceable> and
	    possible <replaceable>values</replaceable>.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table id="style-instructions">
      <title>Styling instructions</title>
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry><replaceable>object</replaceable>-<replaceable>feature</replaceable></entry>
	    <entry>Description and a list of possible values</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>Node-shape</literal></entry>
	    <entry>
	      <para>The shape of the point representing the node in
		the tree. Possible values are <literal moreinfo="none">oval</literal>,
		<literal moreinfo="none">rectangle</literal>, and
		<literal moreinfo="none">polygon</literal>
		(see also <literal moreinfo="none">Node-polygon</literal> below).
	      </para>
	    </entry>
          </row>
	  <row>
	    <entry><literal>Node-polygon</literal></entry>
	    <entry><para>
		Specifies the relative coordinates for three or
		more points that define a closed polygon. The
		first and last points may be the same;  whether they are
		or not, TrEd will draw the polygon as a closed polygon.
	      </para></entry>
	  </row>
	  <row>
	    <entry><literal>Node-rellevel</literal></entry> <entry><para> Allows altering
		the default vertical position of a subtree. 
		The values are multiples of one default level height.
		Positive values move the subtree down, while negative values
		move the subtree up. </para></entry>
	  </row>
	  <row>
	    <entry><literal>Node-level</literal></entry> <entry>
	      <para>
		Very similar to <literal moreinfo="none">Node-rellevel</literal>
		above, except that this option affects one node only 
		rather than the whole subtree.
	      </para>
	    </entry>
	  </row>
	  <row>
	    <entry><literal>Node-addbeforeskip</literal></entry>
            <entry><para>Additional horizontal space before node
		in pixels</para></entry>
	  </row>
	  <row>
	    <entry><literal>Node-addafterskip</literal></entry>
	    <entry><para>Additional horizontal space after node
		in pixels</para></entry>
          </row>
	  <row>
	    <entry><literal>Node-disableedgelabelspace</literal></entry>
	    <entry><para>If set the value is <quote><literal moreinfo="none">yes</literal></quote>
		no additional horizontal skip for
		edge labels is added during
		positioning the node.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>NodeLabel-valign</literal></entry>
	    <entry><para>This instruction
		may be used only within <literal moreinfo="none">rootstyle</literal>
		patterns.
		It takes one of the following
		values: <quote><literal moreinfo="none">top</literal></quote>,
		<quote><literal moreinfo="none">center</literal></quote>,
		and <quote><literal moreinfo="none">bottom</literal></quote>. 
		This feature specifies which side of the group of
		node labels should be placed towards the node. 
		If <quote><literal moreinfo="none">top</literal></quote> is selected
		(which is the default value), node labels appear
		below the node. If
		<quote><literal moreinfo="none">bottom</literal></quote>
		is selected, node labels are displayed
		above the node.	If the value of
		<quote><literal moreinfo="none">center</literal></quote>
		is used, node labels are displayed
		across the node.	
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>NodeLabel-halign</literal></entry>
	    <entry><para>One of the following values
		may be used: <quote><literal moreinfo="none">left</literal></quote>,
		<quote><literal moreinfo="none">center</literal></quote>,
		and <quote><literal moreinfo="none">right</literal></quote>. 
		This feature specifies which side of the group of
		node labels should be placed towards the node. 
		E.g, if <quote><literal moreinfo="none">right</literal></quote> is selected
		(which is the default value), node labels appear
		left of the node.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>NodeLabel-yadj</literal></entry>
	    <entry><para>Adjust vertical position of node labels
		by extra amount of pixels.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>NodeLabel-dodrawbox</literal></entry>
	    <entry><para>If <menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Draw boxes around labels</guimenuitem>
		</menuchoice>
		is not selected and this instruction
		is set to
		<quote><literal moreinfo="none">yes</literal></quote> for a given node ,
		box is still drawn around the node's labels.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>NodeLabel-nodrawbox</literal></entry>
	    <entry><para>
		If <menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Draw boxes around labels</guimenuitem>
		</menuchoice>
		is selected and this instruction
		 is set to
		<quote><literal moreinfo="none">yes</literal></quote> for a given node,
		no box is drawn around the node's labels.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>EdgeLabel-yadj</literal></entry>
	    <entry><para>Adjust vertical position of edge labels
		by extra amount of pixels.
		The horizontal position is adjusted automatically.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>EdgeLabel-coords</literal></entry> 
	    <entry><para> This option
		can be used to specify custom (non-standard) positioning
		of the edge label by specifying the exact point to which
		the edge label is anchored.  The format of this option is
		similar to <literal>Line-coords</literal>, except that
		only one pair of coordinates (X,Y) is allowed. See <link
		  linkend="Line-coords">Line-coords</link> for more
		information.
	      </para>
	    </entry>
	  </row>
	  <row>
	    <entry><literal>EdgeLabel-halign</literal></entry>
	    <entry><para>One of 
		the values <quote><literal moreinfo="none">right</literal></quote>,
		<quote><literal moreinfo="none">center</literal></quote>,
		and <quote><literal moreinfo="none">left</literal></quote>
		may be used to specify which side of the edge label
		should be oriented towards the edge.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>EdgeLabel-valign</literal></entry>
	    <entry><para>One of 
		the values <quote><literal moreinfo="none">top</literal></quote>,
		<quote><literal moreinfo="none">center</literal></quote>,
		and <quote><literal moreinfo="none">bottom</literal></quote>
		may be used to specify which side of the edge label
		should be oriented towards the edge.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>EdgeLabel-dodrawbox</literal></entry>
	    <entry><para>If <menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Draw boxes around edge
		    labels</guimenuitem>
		</menuchoice>
		  is not selected and this instruction
		is set to
		<quote><literal moreinfo="none">yes</literal></quote> for a given node ,
		box is still drawn around the node's edge labels.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>EdgeLabel-nodrawbox</literal></entry>
	    <entry><para>If <menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Draw boxes around edge
		    labels</guimenuitem>
		</menuchoice>
		is selected and this instruction
		is set to
		<quote><literal moreinfo="none">yes</literal></quote> for a given node,
		no box is drawn around the node's edge labels.</para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-dash</literal></entry>
	    <entry><para>Dash pattern for the outline
	      of the point representing the node of the tree.
	      A dash pattern is either a sequence of arbitrary
		of the following characters <quote>.,-_</quote>
		where space can be used
		to enlarge the space between other line elements, and can
		not occur as the first position in the string, or
		a comma-separated list of integer numbers
		specifying the lengths of dashes and spaces between them. 
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-activedash</literal></entry>
	    <entry><para>Dash pattern for the outline
	      of the point when mouse is over the point. See
	      description of <literal moreinfo="none">Oval-dash</literal>
		for more information on dash patterns.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-dashoffset</literal></entry>
	    <entry><para>The starting offset (in pixels)
		into the pattern provided by the
		<literal moreinfo="none">Oval-dash</literal> instruction.		
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-fill</literal></entry>
	    <entry><para>The color that fills the
		node.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-activefill</literal></entry>
	    <entry><para>The color to fill the node
	      when mouse is over it.</para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-outline</literal></entry>
	    <entry><para>The color of the outline
		of the node.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-activeoutline</literal></entry>
	    <entry><para>The color of the outline
		of the node when mouse is over it.
	      </para>
	    </entry>
          </row>
	  <row>
	    <entry><literal>Oval-width</literal></entry>
	    <entry><para>Width of the outline
		of the node.</para></entry>
          </row>
	  <row>
	    <entry><literal>Oval-activewidth</literal></entry>
	    <entry><para>Width of the outline
		of the node when mouse is over it.</para></entry>
          </row>
	  <row id="Line-coords">
	    <entry><literal>Line-coords</literal></entry>
	    <entry><para>
		This, very complex, option allows to setup
		one or more lines leading from the node. Unless this
		option is set, only a line (edge) starting at the
		node and leading to its parent is drawn.
	      </para>
	      <para>
		This option may consist of one or more 
		tuples of coordinates separated with
		<literal moreinfo="none">&amp;</literal>
		of the form <literal moreinfo="none">x1, y1..., xn, yn</literal>,
		where
		x1 through yn give the coordinates for a
		series of two or more points that describe a series of
		connected line segments.
	      </para>
	      <para>
		The coordinates may be either absolute or relative to
		the node, its parent, or if necessary to any node in
		the tree. In fact, usual arithmetic expressions may be
		used to compute coordinates. Use letter
		<literal moreinfo="none">n</literal> to refer to the coordinate of the
		current node on the current axes and letter
		<literal moreinfo="none">p</literal> to refer to the coordinate of the
		parent node of the current node.  Use
		<literal moreinfo="none">xn</literal> and <literal moreinfo="none">yn</literal>, or
		<literal moreinfo="none">xp</literal> and <literal moreinfo="none">yp</literal> to
		refer to a coordinate of the current node or its
		parent (resp.) on an explicit axis.
		</para>
	      <para>		
		Coordinates of other nodes may be queried
		using the following constructions:
		<variablelist>
		  <varlistentry>
		    <term>Simple search</term>
		    <listitem>
		      <para>
			The construction of the form
			<literal moreinfo="none">x[attribute_name = value]</literal>
			or
			<literal moreinfo="none">y[attribute_name = value]</literal>
			may be used to query x-coordinate
			or y-coordinate (respectively)
			of the first node whose attribute
			<literal moreinfo="none">attribute_name</literal>
			has the given <literal moreinfo="none">value</literal>.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term>Simple perl search</term>
		    <listitem>
		      <para>
			The construction of the form
			<literal moreinfo="none">x[? code ?]</literal>
			or
			<literal moreinfo="none">y[? code ?]</literal>
			may be used to query a
			coordinate 			
			of the first node for which the
			given Perl code returns non-zero
			defined value. Within the code,
			use 
			<literal moreinfo="none">$this</literal> to refer
			to the current node and
			<literal moreinfo="none">$node</literal>
			to the node being tested.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term>Custom perl search</term>
		    <listitem>
		      <para>
			Sometimes it is not necessary to
			go through the whole tree to find the desired
			node. In such a case, the user may provide
			a code that finds the node
			and returns it.
			This type of query has the form
			<literal moreinfo="none">x[! code !]</literal> or
			<literal moreinfo="none">y[! code !]</literal>,
			where <literal moreinfo="none">code</literal>
			is the user's custom node search algorithm
			written in Perl.
			Within the code, use 
			<literal moreinfo="none">$this</literal> to refer
			to the current node.
		      </para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </para>
	    </entry>
          </row>
	  <row>
	    <entry><literal>Line-arrow</literal></entry>
	    <entry><para>One of the values
		<quote><literal moreinfo="none">first</literal></quote>,
		<quote><literal moreinfo="none">both</literal></quote>,
		<quote><literal moreinfo="none">last</literal></quote>,
		may be used to make arrow to be drawn
		on one or both sides of the edge connecting
		the given node with its parent.
	      </para>
	    </entry>
          </row>
	  <row>
	    <entry><literal>Line-smooth</literal></entry>
	    <entry><para>Values are 1 or 0.
              It indicates whether or not the line should be drawn as a curve.  If
              so, the line is rendered as a set of parabolic splines: one spline
              is drawn for the first and second line segments, one for the second
              and third, and so on.  Straight-line segments can be generated
              within a curve by duplicating the end-points of the desired line
              segment.
              </para>
	    </entry>
	  </row>
	  <row>
	    <entry><literal>Line-arrow</literal></entry>
	    <entry><para>One of the values
		<quote><literal moreinfo="none">first</literal></quote>,
		<quote><literal moreinfo="none">both</literal></quote>,
		<quote><literal moreinfo="none">last</literal></quote>,
		may be used to make arrow to be drawn
		on one or both sides of the edge connecting
		the given node with its parent.
	      </para>
	    </entry>
          </row>
	  <row>
	    <entry><literal>Line-</literal><replaceable>feature</replaceable></entry>
	    <entry><para>Features
		<literal moreinfo="none">dash</literal>,
		<literal moreinfo="none">activedash</literal>,
		<literal moreinfo="none">fill</literal>,
		<literal moreinfo="none">activefill</literal>,
		<literal moreinfo="none">width</literal>, and
		<literal moreinfo="none">activewidth</literal>
		may be used to style the edge. Their values and
		meaning is similar to those of <literal moreinfo="none">Oval</literal>,
		as described above.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Text<replaceable>&lt;position&gt;</replaceable>-fill</literal></entry>
	    <entry><para>
		This feature may be used to set the color of a certain
		text object. The object is determined by its
		<replaceable>position</replaceable> which may have one
		of the following forms:
		<literal moreinfo="none">[<replaceable>attribute-name</replaceable>]</literal>,
		<literal moreinfo="none">[<replaceable>attribute-name</replaceable>][<replaceable>n</replaceable>]</literal>,
		or
		<literal moreinfo="none">[<replaceable>attribute-name</replaceable>][<replaceable>n</replaceable>][<replaceable>m</replaceable>]</literal>,
		where <replaceable>attribute-name</replaceable>
		is name of an attribute,
		<replaceable>n</replaceable> is the ordinal number of
		pattern which is the source of the text object
		and <replaceable>m</replaceable> is ordinal number
		of the attribute reference (<literal moreinfo="none">${<replaceable>attribute-name</replaceable>}</literal>) within that pattern.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>Text<replaceable>&lt;position&gt;</replaceable>-activefill</literal></entry>
	    <entry><para>This feature may be used to set the color of a certain
		text object when mouse is over it.
		The syntax of <replaceable>position</replaceable>
		is as above.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>TextBg<replaceable>&lt;position&gt;</replaceable>-<replaceable>feature</replaceable></literal></entry>
	    <entry><para>This instruction may be used to set features
		of an underlying rectangle of certain
		text object.
		The syntax of <replaceable>position</replaceable>
		is as above, except that only the first
		two forms are accepted, because text objects
		appearing on one line have common underlying rectangle.
		The following features are supported:
		<literal moreinfo="none">dash</literal>,
		<literal moreinfo="none">activedash</literal>,
		<literal moreinfo="none">dashoffset</literal>,
		<literal moreinfo="none">fill</literal>,
		<literal moreinfo="none">activefill</literal>,
		<literal moreinfo="none">outline</literal>,
		<literal moreinfo="none">activeoutline</literal>,
		<literal moreinfo="none">width</literal>, and
		<literal moreinfo="none">activewidth</literal>.
	      </para></entry>
          </row>
	  <row>
	    <entry><literal>TextBox-<replaceable>feature</replaceable></literal></entry>
	    <entry><para>This instruction may be used to set features
		of the frame drawn around the group of node labels.
		The following features are supported:
		<literal moreinfo="none">dash</literal>,
		<literal moreinfo="none">activedash</literal>,
		<literal moreinfo="none">dashoffset</literal>,
		<literal moreinfo="none">fill</literal>,
		<literal moreinfo="none">activefill</literal>,
		<literal moreinfo="none">outline</literal>,
		<literal moreinfo="none">activeoutline</literal>,
		<literal moreinfo="none">width</literal>, and
		<literal moreinfo="none">activewidth</literal>.
	      </para>
	    </entry>
          </row>
	  <row>
	    <entry><literal>EdgeTextBox-<replaceable>feature</replaceable></literal></entry>
	    <entry><para>This instruction may be used to set features
		of the frame drawn around the group of node's edge
		labels. The list of supported features is the same as
		that of <literal moreinfo="none">TextBox</literal>.
	      </para>
	    </entry>
          </row>
	</tbody>
      </tgroup>
    </table>
    <para>
      The same syntax that applies to patterns applies also to the
      hint pattern, except that only attribute value and perl code
      interpolations are accepted.
      The hint
      pattern is interpolated and displayed in a floating
      <quote>tool-tip</quote> like frame whenever user positions
      the mouse cursor above a node and waits for a while.
      (The lenght of the time interval may be customized
      by setting the <link linkend="hintwait"><literal moreinfo="none">HintWait</literal></link>
      option to the desired number of milliseconds).
    </para>
    <para>
      A new pattern may be added to the pattern list by typing the
      pattern definition
      into the pattern editor at the top of the dialog window and pressing
      the <guibutton moreinfo="none">Add/Paste</guibutton> button.
      The pattern is inserted just before the pattern currently
      selected in the pattern list (or to the end of the list if no pattern is
      selected).
    </para>
    <para>
      To remove a pattern from the pattern list, either the
      <guibutton moreinfo="none">Delete</guibutton> or <guibutton moreinfo="none">Cut</guibutton>
      button may be used. In the latter case,
      the pattern is copied to the input entry first.
    </para>
    <para>
      The list of attributes provides a shortcut for inserting
      <literal moreinfo="none">${<replaceable>attr</replaceable>}</literal>
      sequences into the input entry as well as for inserting
      simple patterns of the form 
      <literal moreinfo="none">${<replaceable>attr</replaceable>}</literal> to 
      the pattern list.
    </para>
    <para>
      To insert a simple
      <literal moreinfo="none">${<replaceable>attr</replaceable>}</literal>
      pattern to the pattern list, select
      <replaceable>attr</replaceable>
      from the <guilabel moreinfo="none">Attributes</guilabel> list
      and press the <guibutton moreinfo="none">Add/Place</guibutton> button.
      If you press the <guibutton moreinfo="none">Add as hint</guibutton>
      button, the pattern is inserted to the current cursor's position
      in the hint pattern editor.
      To insert the above sequence to the current cursor's
      position on the entry line, double-click the
      <replaceable>attr</replaceable>
      item in the <guilabel moreinfo="none">Attributes</guilabel> list.
    </para>
  </sect1>
  <sect1 id="filelists">
    <title>Using File-Lists</title>
    <para>
      File-list is simply a named list of file-name patterns or actual
      file names (with an obligatory suffixes specifying a tree number
      and possibly also a position in the tree). File-lists can be
      created, modified, saved or deleted using a specialized dialog
      displayed whe the <menuchoice moreinfo="none">
	<guimenu moreinfo="none">File</guimenu>
	<guimenuitem moreinfo="none">File List...</guimenuitem>
      </menuchoice> menu-command is issued.
    </para>
    <para>
      File-lists may be used for many purposes, the most common of
      which are searching and comfortable editing of a series of
      files. There is always one file-list active. We call that 
      file-list the current file-list. Name of the current-filelist
      is displayed at the title of the main
      <application moreinfo="none">TrEd</application>'s window.
      If current file-list contains more than one file, 
      the command <menuchoice moreinfo="none"> <guimenu moreinfo="none">File</guimenu> <guimenuitem moreinfo="none">Previous
	  File</guimenuitem> </menuchoice> (or <inlinegraphic fileref="pics/start.png"/> button) and  <menuchoice moreinfo="none">
	<guimenu moreinfo="none">File</guimenu> <guimenuitem moreinfo="none">Next File</guimenuitem>
    </menuchoice>
      (or <inlinegraphic fileref="pics/finish.png"/> button)
      may be used to open previous or next file in the file-list.
    </para>
    <figure float="0">
      <title>Creating file-lists</title>
      <graphic fileref="pics/filelist.png"/>
    </figure>
    <para>
      There are two default file-lists always present:
    </para>
    <variablelist>
      <varlistentry>
	<term><literal moreinfo="none">Default</literal></term>
	<listitem>
	  <para>
	    This file-list contains all the files specified on the
	    command-line. All files opened while
	    <literal moreinfo="none">Default</literal>
	    is the current file-list are inserted to the file-list.	    
	  </para>
	</listitem>	
      </varlistentry>
      <varlistentry>
	<term><literal moreinfo="none">Bookmarks</literal></term>
	<listitem>
	  <para>
	    The <literal moreinfo="none">Bookmarks</literal> file-list
	    conains all bookmarks.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      User may then create any number of his/her own file-list.  To do
      so, open the <guilabel moreinfo="none">Filelist</guilabel> dialog, Type a name
      of the file-list into the <guilabel moreinfo="none">File lists</guilabel> field
      (on the top right side) and press <keycap moreinfo="none">Enter</keycap> and
      confirm the creation by pressing the
      <guibutton moreinfo="none">Create</guibutton> button in the window that appears.      
    </para>
    <para>
      To modify an existing file-list, first choose it from the menu
      that appears when the button on the right of the <guilabel moreinfo="none">File
      lists</guilabel> entry is pressed.  To add some files to the
      chosen file-list, first browse the files in the list on the left
      of the <guilabel moreinfo="none">Filelist</guilabel> dialog. Then select the
      desired files in this list and finally press the
      <guibutton moreinfo="none">Add--&gt;</guibutton>.  If the selection contains a
      directory, user is prompted for a wild-card pattern and all
      files from the directory matching the pattern are added to the
      file-list. This is a very convenient way for adding all files in
      a directory. This has also the advantage that any change made in
      the content of the directory automatically leads to the
      corresponding effect in the file-list.
    </para>
    <para>
      To remove files from the file-list, select the files and
      press the <guibutton moreinfo="none">Remove</guibutton> button.
    </para>
    <para>
      To make the chosen file-list the current file-list for
      <application moreinfo="none">TrEd</application> double-click on any file in the
      file-list or just select the file and press the
      <guibutton moreinfo="none">Go</guibutton> button. The selected files is opend
      and the file-list is made current. (You may of course switch between
      file-lists also by selecting a file-list in the
      <guimenu moreinfo="none">Session</guimenu> menu.)      
    </para>
    <para>
      The <guibutton moreinfo="none">Delete</guibutton> button may be used to delete
      the complete file-list.
    </para>
    <para>
      The <guibutton moreinfo="none">Save</guibutton> button may be used to save the chosen
      file-list to a file, so that it may be either automatically or
      manually opened in the next <application moreinfo="none">TrEd</application>'s
      session. Note that saving a file-list and then deleting it does
      not delete the file. Also note that the
      <literal moreinfo="none">Bookmark</literal> file-list is saved automatically
      when user leaves <application moreinfo="none">TrEd</application>.
    </para>
    <para>The <guibutton moreinfo="none">Load</guibutton> button may be used to load
      a previously saved file-list. Note that all saved file-list that
      are present when user leaves <application moreinfo="none">TrEd</application> are
      automatically loaded on the next <application moreinfo="none">TrEd</application>'s startup.
    </para>
    <para>
      The <guilabel moreinfo="none">Close</guilabel> button only closes the
      <guilabel moreinfo="none">Filelist</guilabel> dialog window.
    </para>
  </sect1>
  <sect1 id="configuration">
    <title>Configuration and customization</title>
    <para>
      The configuration and customizing of
      <application moreinfo="none">TrEd</application> is possible through the
      configuration file. When started <application moreinfo="none">TrEd</application>
      tries to search for its configuration file on several places and
      uses the first configuraton file found:
    </para>
    <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
	<para>
	  First <application moreinfo="none">TrEd</application> looks for a file given with a command-line parameter
	  <parameter moreinfo="none">-c</parameter> (see <xref linkend="commandline"/> for details).
	</para>
      </listitem>
      <listitem><para>    
	If the <varname>HOME</varname> system variable is set (on UNIX/Linux this
	  variable points to user's home directory) <application moreinfo="none">TrEd</application> searches for
	<filename moreinfo="none">.tredrc</filename> (mind the dot here) file in that directory. 	
      </para></listitem>
      <listitem><para>
	  If the <varname>TREDHOME</varname> system variable is set <application moreinfo="none">TrEd</application> searches for
	<filename moreinfo="none">tredrc</filename> file in that directory. 	
      </para></listitem>
      <listitem><para>
	  <application moreinfo="none">TrEd</application> looks for a <filename moreinfo="none">tredrc</filename> file in 
	  the directory where the program file of <application moreinfo="none">TrEd</application> itself is located.
      </para></listitem>
      <listitem>
	<para>
	  <application moreinfo="none">TrEd</application> looks for a
	  <filename moreinfo="none">tredrc</filename> file in directories
	  <filename moreinfo="none">../lib/tred</filename>, <filename moreinfo="none">../lib/tredlib</filename> and
	  <filename moreinfo="none">./tredlib/tredrc</filename> respectively, relatvely to the
	  directory where the program file of <application moreinfo="none">TrEd</application> itself is located.
	</para>
      </listitem>
      <listitem><para>
	  <application moreinfo="none">TrEd</application> looks for a <filename moreinfo="none">tredrc</filename> file in 
	  the <filename moreinfo="none">/usr/share/config/</filename> directory.
	</para></listitem>
    </orderedlist>
    <para>
      If none of these files is found, default values for configuration
      options are used.
    </para>
    <para>
      <application moreinfo="none">TrEd</application>'s configuration file is a plain
      text file with a very simple structure. It can be edited not
      only in any editor (like <application moreinfo="none">vi</application>,
      <application moreinfo="none">Emacs</application> or
      <application moreinfo="none">Notepad</application>) and also directly from TrEd
      when the <menuchoice moreinfo="none"> <guimenu moreinfo="none">File</guimenu> <guimenuitem moreinfo="none">Edit
      Config</guimenuitem></menuchoice> menu command is issued. In
      both cases there is a way to update the options used by a
      running session of <application moreinfo="none">TrEd</application>: </para>
    <itemizedlist>
      <listitem><para>Use <menuchoice moreinfo="none">
	    <guimenu moreinfo="none">File</guimenu>
	    <guimenuitem moreinfo="none">Reload Config</guimenuitem></menuchoice> menu command to make TrEd
	re-read the configuration file from disk.</para></listitem>
      <listitem><para>
	  In the <application moreinfo="none">TrEd</application>'s internal
	    configuration editor use the
	  <guibutton moreinfo="none">Save and Apply</guibutton> button to apply changes and save them or
	  <guibutton moreinfo="none">Apply</guibutton> button to apply changes withought saving them.
	  The first command aslo quits the configuration editor.
	</para></listitem>
    </itemizedlist>
    <note>
      <para>
	Some configuration options even if applyed take effect only
	after restarting <application moreinfo="none">TrEd</application>.
      </para>
    </note>
    <para>The format of the configuration file is of this simple form:</para>
    <literallayout class="normal" format="linespecific"><replaceable>option_name</replaceable> = <replaceable>value</replaceable></literallayout>
    <para>
      There may be any amount of white-space between the option name and
      value but they must be both on the same line. Any characters
      folowing a semi-colon (<literal moreinfo="none">;</literal>) to the end of line 
      are considered as comment and are ignored. You may also need to
      quote the value using either double-quotes (<literal moreinfo="none">"value"</literal>) or
      simple quotes (<literal moreinfo="none">'value'</literal>) to preserve white-space or semi-colons.
      The option names are case-insensitive.
    </para>    
    <para>
      The available configuration options may be divided into several
      categories:
    </para>
    <sect2>
    <title>Colors</title>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">BackgroundColor</literal></term>
	  <listitem>
	    <para>Background color of the tree-view canvas.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BackgroundImage</literal></term>
	  <listitem>
	    <para>Background image file (JPG/GIF). Tiles are not supported.</para>
	  </listitem>
	</varlistentry>
	<varlistentry id="highlightwindowcolor">
	  <term><literal moreinfo="none">HighlightWindowColor</literal></term>
	  <listitem>
	    <para>Color of the frame drawn around the focused view.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">CurrentNodeColor</literal></term>
	  <listitem>
	    <para>Color to draw the active node. Default is red.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NearestNodeColor</literal></term>
	  <listitem>
	    <para>Color to highlight the nearest node to indicate the
	      destination of a possible drop when dragging a node.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BWPrintNodeColor</literal></term>
	  <listitem>
	    <para>Color used to fill nodes when printing in
	      black-and-white. Defaults to <literal>white</literal>,
	      which results in nodes with only black outline. 
	      If set to <literal>black</literal>, nodes are printed
	      as all-black objects without a visible outline.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">TextColor</literal></term>
	  <listitem>
	    <para>Color used to display text of normal tree attributes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">TextColorShadow</literal></term>
	  <listitem>
	    <para>Color used to display text of shadowed tree attributes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">TextColorHilite</literal></term>
	  <listitem>
	    <para>Color used to display text of highlighted tree
	      attributes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">TextColorXHilite</literal></term>
	  <listitem>
	    <para>Color used to display text of extra-highlighted tree
	      attributes.
	      See <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/Doc/fs.html">FS-format
		description</ulink> to learn about how to specify which attributes
	      are shadowed, highlighted and extra-highlighted.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="customcolor">
	  <term><literal moreinfo="none">CustomColor<replaceable>n</replaceable></literal></term>
	  <listitem>
	    <para>
	      Here <replaceable>n</replaceable> stands for any number
	      between <literal moreinfo="none">0..9</literal>.  These options define
	      ten custom colors which may be symbolically refered to
	      and used in the attribute patterns.  To refer to the
	      <replaceable>n</replaceable>'th custom color use
	      the sequence
	      <literal moreinfo="none">#{custom<replaceable>n</replaceable>}</literal>
	      in the pattern. For more information see <xref linkend="attributes"/>.
	      See also the <link linkend="allowcustomcolors"><literal moreinfo="none">AllowCustomColors</literal></link>
	      option which can be used to enable or disable the actual
	      use of the custom colors.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ActiveTextColor</literal></term>
	  <listitem>
	    <para>
	      Color used to flash the text of an attribute under the mouse-pointer.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BoxColor</literal></term>
	  <listitem>
	    <para>
	      Background color of a border drawn around the text of
	      labels if the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around edges</guimenuitem>
	      </menuchoice> item is checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">CurrentBoxColor</literal></term>
	  <listitem>
	    <para>
	      Background color of a border drawn around the text of
	      the active node's labels if the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around labels</guimenuitem></menuchoice> item is checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">HiddenBoxColor</literal></term>
	  <listitem>
	    <para>
	      Background color of a border drawn around the text of
	      a hidden node's labels if the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around labels</guimenuitem></menuchoice> and 
	      <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Show Hidden
		</guimenuitem></menuchoice>
	      items are checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">EdgeBoxColor</literal></term>
	  <listitem>
	    <para>
	      Background color of a border drawn around the text of
	      edge labels if the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around edge labels</guimenuitem>
	      </menuchoice> item is checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">EdgeCurrentBoxColor</literal></term>
	  <listitem>
	    <para>
	      Background color of a border drawn around the text of
	      the edge label of the active node ( if the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around edge labels</guimenuitem></menuchoice> item is checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">EdgeHiddenBoxColor</literal></term>
	  <listitem>
	    <para>
	      Background color of a border drawn around the text of
	      a hidden node's edge labels if the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around edge labels</guimenuitem></menuchoice> and 
	      <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Show Hidden
		</guimenuitem></menuchoice>
	      items are checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">LineColor</literal></term>
	  <listitem>
	    <para>Color used to draw the lines connecting dependent nodes in a
	      tree.
	      Default is black.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">HiddenLineColor</literal></term>
	  <listitem>
	    <para>Color used to draw the lines connecting hidden
	      nodes with their parents. Default is gray.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">dashHiddenLines</literal></term>
	  <listitem>
	    <para>Controls is lines connecting hidden nodes with
             their parents are dashed or solid. Allowed values are 0
             (solid) or 1 (dashed). Default is 0.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>LineArrow</literal></term>
	  <listitem>
	    <para>One of the values
	      <quote><literal moreinfo="none">first</literal></quote>,
	      <quote><literal moreinfo="none">both</literal></quote>,
	      <quote><literal moreinfo="none">last</literal></quote>,
	      may be used to make arrows to be drawn by default
	      on one or both sides of the edge connecting
	      the given node with its parent.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NodeColor</literal></term>
	  <listitem>
	    <para>Color used to fill an ordinary node of the tree.
	      Default is yellow.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NodeOutlineColor</literal></term>
	  <listitem>
	    <para>Color used to draw the outline of an ordinary node.
	      Default is black.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">HiddenNodeColor</literal></term>
	  <listitem>
	    <para>Color used to draw nodes marked as hidden, if shown. Default
	      is black.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BackgroundImage</literal></term>
	  <listitem>
	    <para>This option allows specifying a background image
	      for the canvas on which trees are displayed. 
	      At present, only GIF, XBM, XPM, BMP, JPEG, PNG and
	      PPM/PGM files are supported.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BackgroundImageX</literal></term>
	  <listitem>
	    <para>Horizontal offset of the background image.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BackgroundImageY</literal></term>
	  <listitem>
	    <para>Vertical offset of the background image.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>Other options affecting tree appearence</title>
      <variablelist>
	<varlistentry id="balancetree">
	  <term><literal moreinfo="none">BalanceTree</literal></term>
	  <listitem>
	    <para>If this option is set to 1, the tree will be
	      auto-balanced, disregarding a node-ordering
	      attribute.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="highlightwindowwidth">
	  <term><literal moreinfo="none">HighlightWindowWidth</literal></term>
	  <listitem>
	    <para>Width of the frame drawn around the focused view.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">LineWidth</literal></term>
	  <listitem>
	    <para>Width of the lines connecting dependent nodes in a tree.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NodeWidth</literal></term>
	  <listitem>
	    <para>
	      The horizontal diameter of the elipsis representing a node in
	      a tree.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NodeHeight</literal></term>
	  <listitem>
	    <para>
	      The vertical diameter of the elipsis representing a node in
	      a tree.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">CurrentNodeWidth</literal></term>
	  <listitem>
	    <para>
	      The horizontal diameter of the elipsis representing the active node in
	      a tree.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">CurrentNodeHeight</literal></term>
	  <listitem>
	    <para>
	      The vertical diameter of the elipsis representing the active node in
	      a tree.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NodeXSkip</literal></term>
	  <listitem>
	    <para>The minimal horizontal distance between two nodes in a
	      tree.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">NodeYSkip</literal></term>
	  <listitem>
	    <para>The minimal vertical distance between two nodes in a
	      tree.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">XMargin</literal></term>
	  <listitem>
	    <para>Horizontal amount of space left around borders of the box
	      surrounding the text of displayed attributes of a node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">YMargin</literal></term>
	  <listitem>
	    <para>Horizontal amount of space left around borders of the box
	      surrounding the text of displayed attributes of a node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BaseXPos</literal></term>
	  <listitem>
	    <para>
	      The horizontal distance of the tree root (zero's node)
	      from the right of the tree view.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">BaseYPos</literal></term>
	  <listitem>
	    <para>
	      The vertical distance of the tree root (zero's node)
	      from the top of the tree view.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">DrawBoxes</literal></term>
	  <listitem>
	    <para>
	      If this option is set, <application moreinfo="none">TrEd</application> starts with the 
	      <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">DrawBoxes</guimenuitem></menuchoice> menu item checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">DrawEdgeBoxes</literal></term>
	  <listitem>
	    <para>
	      If this option is set, 
	      <application moreinfo="none">TrEd</application> starts with the 
	      <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Draw boxes around edge labels</guimenuitem>
	      </menuchoice> menu item checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">EdgeLabelSkipAbove</literal></term>
	  <listitem>
	    <para>
	      Extra space left above every edge label.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">EdgeLabelSkipBelow</literal></term>
	  <listitem>
	    <para>
	      Extra space left below every edge label.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">UseAdditionalEdgeLabelSkip</literal></term>
	  <listitem>
	    <para>
	      This options controls whether the algorighm
	      computing the tree-layout in TrEd should try to
	      add a reasonable horizontal skip for the edge labels,
	      to avoid their overlapping. Note, that
	      even with this option on, the algorithm cannot
	      reliably ensure that. Defaults to 1.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">HighlightAttributes</literal></term>
	  <listitem>
	    <para>
	      If this option is set, <application moreinfo="none">TrEd</application> starts with the 
	      <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Highlight Attributes</guimenuitem>
	      </menuchoice> menu item checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ClearTextBackground</literal></term>
	  <listitem>
	    <para>
	      Choose if invisible rectangles should be drawn beneath
	      text labels to clear the background for the text.
	      Possible values are <literal moreinfo="none">0</literal> and <literal moreinfo="none">1</literal>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="allowcustomcolors">
	  <term><literal>AllowCustomColors</literal></term>
	  <listitem>
	    <para>
	      This option takes one of the values <literal moreinfo="none">0</literal>
	      and <literal moreinfo="none">1</literal>.
	      If set to <literal moreinfo="none">0</literal>, all references to
	      custom colors in attribute patterns are ignored. 
	      It is also the default value.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ShowHidden</literal></term>
	  <listitem>
	    <para>
	      If this option is set, <application moreinfo="none">TrEd</application> starts with the 
	      <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">Show Hidden Nodes</guimenuitem>
	      </menuchoice> menu item checked.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="hintwait">
	  <term><literal>HintWait</literal></term>
	  <listitem>
	    <para>
	      This option controls time interval
	      that mouse pointer needs to linger over a node 
	      before the hint for the node is displayed. 
	      The value is to be given in
	      milliseconds.  See <xref linkend="attributes"/> for more
	      information about defining the content of the hints.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="toolbarhintwait">
	  <term><literal>ToolbarHintWait</literal></term>
	  <listitem>
	    <para>
	      This option controls time interval
	      that mouse pointer needs to linger over a TrEd toolbar
	      button (or other widget with a tool-tip)
	      before a tool-tip is displayed. 
	      The value is to be given in
	      milliseconds.  See <xref linkend="attributes"/> for more
	      information about defining the content of the hints.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>SearchMethod</literal></term>
	  <listitem>
	    <para>
	      This option lets you define the default method used when
	      searching with the <menuchoice moreinfo="none">
		<guimenu moreinfo="none">Node</guimenu>
		<guimenuitem moreinfo="none">Find</guimenuitem>
	      </menuchoice> command. The default value is
	      <literal moreinfo="none">Exhaustive regular expression</literal>
	      but user may use any of the following values (actually
	      only the first letter suffices):
	      <simplelist type="vert">
		<member><literal moreinfo="none">Regular Expression</literal></member>
		<member><literal moreinfo="none">Wildcards</literal></member>
		<member><literal moreinfo="none">Literal</literal></member>
		<member><literal moreinfo="none">Exhaustive regular expression</literal></member>
	      </simplelist>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>MacroListOrder</literal></term>
	  <listitem>
	    <para>This option defines the default ordering of macros
	      when <menuchoice moreinfo="none">
		<guimenu moreinfo="none">View</guimenu>
		<guimenuitem moreinfo="none">List of Named Macros...</guimenuitem>
	      </menuchoice>
	      menu command is used. Possible values are letters
	      <literal moreinfo="none">M</literal> (sort by macro menu label)
	      and <literal moreinfo="none">K</literal> (sort by keyboard shortcuts
	      assigned to macros). Default value is <literal moreinfo="none">M</literal>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>MaxDisplayedValues</literal></term>
	  <listitem>
	    <para>
	      This option may be used to tell
	      <application moreinfo="none">TrEd</application>
	      how many fields should fit in one screen of a
	      list when a dialog
	      displaying possible (or already assigned)
	      values for a certain attribute is displayed.
	      (The greater the number is, the taller
	      the dialog grows).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>MaxDisplayedAttributes</literal></term>
	  <listitem>
	    <para>
	      This option may be used to tell
	      <application moreinfo="none">TrEd</application>
	      how many fields should fit in one screen of the
	      <guilabel moreinfo="none">Edit Node Attributes</guilabel>
	      and
	      <guilabel moreinfo="none">Find Node by Attributes</guilabel>
	      dialog windows. (The greater the number, the taller
	      the dialogs).
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>GUI options</title>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">AppName</literal></term>
	  <listitem>
	    <para>The window title for the <application moreinfo="none">TrEd</application>'s main window.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">AppIcon</literal></term>
	  <listitem>
	    <para><application moreinfo="none">TrEd</application>'s desktop and window
	      icon (in <literal moreinfo="none">XPM</literal> format).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineHeight</literal></term>
	  <listitem>
	    <para>Initial height for the value line in lines. Default
	    value is 2.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineAlign</literal></term>
	  <listitem>
	    <para>Specifies alignment for value line. Possible values
	      are <literal moreinfo="none">left</literal>, <literal moreinfo="none">center</literal>, and <literal moreinfo="none">right</literal>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineWrap</literal></term>
	  <listitem>
	    <para>Specifies value line wrapping. Possible values
	      are <literal moreinfo="none">node</literal> (no wrapping),
	      <literal moreinfo="none">char</literal> (allow wrapping on any character
	      boundary),
	      and <literal moreinfo="none">word</literal> (allow wrapping on word boundary).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineReverseLines</literal></term>
	  <listitem>
	    <para>Draw wrapped value lines in reverse order (bottom-up).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineForeground</literal></term>
	  <listitem>
	    <para>
	      Foreground color of the value line.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineBackground</literal></term>
	  <listitem>
	    <para>
	      Background color of the value line.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineFocusForeground</literal></term>
	  <listitem>
	    <para>
	      Foreground color of the highlighted value corresponding to the
	      active node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">VLineFocusBackground</literal></term>
	  <listitem>
	    <para>
	      Background color of the highlighted value corresponding to the
	      active node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">HintBackground</literal></term>
	  <listitem>
	    <para>
	      Background color of the hints shown when mouse
	      lingers over a node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">HintForeground</literal></term>
	  <listitem>
	    <para>
	      Text color of the hints shown when mouse 
	      lingers over a node.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ToolbarHintBackground</literal></term>
	  <listitem>
	    <para>
	      Background color of the tool-tips shown when mouse
	      lingers over a tool-bar button or one of
	      several other widgets.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ToolbarHintForeground</literal></term>
	  <listitem>
	    <para>
	      Text color of the tool-tips shown when mouse 
	      lingers over a tool-bar button or one of
	      several other widgets.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ButtonsRelief</literal></term>
	  <listitem>
	    <para>
	      Style of the relief of the GUI buttons. 
	      Possible values for this option are:
	      raised, sunken, flat, ridge, solid, and groove.
	      Default is 'raised'.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ButtonsBorder</literal></term>
	  <listitem>
	    <para>
	      Width of the borders of GUI buttons. Default is 2.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">MenubarRelief</literal></term>
	  <listitem>
	    <para>
	      Style of the relief of the GUI menu-bar. Same values as for
	      ButtonsRelief option are possible. Default is 'raised'.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">MaxMenuLines</literal></term>
	  <listitem>
	    <para>Maximal number of User-menu lines. If more lines in the menu
	      should appear, a submenu is created as a last item, in which the
	      menu continues.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>SortAttributes</literal></term>
	  <listitem>
	    <para>If <literal moreinfo="none">1</literal>, all lists where attribute names
	      or values are displayed are sorted
	      alphabetically. Otherwise the order given in the FS-file
	      header is preserved. Default value for this option is <literal moreinfo="none">1</literal>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">CreateMacroMenu</literal></term>
	  <listitem>
	    <para>
	      If this option is <literal moreinfo="none">1</literal>, <application moreinfo="none">TrEd</application> creates a special menu
	      <guimenu moreinfo="none">Key-macros</guimenu> where all defined macros which are assigned
	      a key are presented also as menu functions.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">StrictMotif</literal></term>
	  <listitem>
	    <para>
	      If this option is <literal moreinfo="none">1</literal>, strict motifish look and feel is
	      used in TrEd's GUI.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">IconPath</literal></term>
	  <listitem>
	    <para>
	      Colon-separated (on Windows comma-separated) 
	      list of paths for tred to look for icons.
	      Only XPM and PNG icons are supported
	      (it is not recommended to use
	      PNG icons on X11 with present versions of Tk804,
	      due to a severe bug causing occasional crashes).
	      Relative paths relate to 
	      <literal><replaceable>libDir</replaceable>/icons</literal>
	      directory.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">LastAction</literal></term>
	  <listitem>
	    <para>
	      This option, automatically updated on exit, contains an
	      URL and position of a last action on a tree.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">Geometry</literal></term>
	  <listitem>
	    <para>
	      TrEd's main window geometry 
	      (<literal>HxW[+-]x[+-]y</literal>,
	      where <literal>H</literal> is window's height,
	      <literal>W</literal> is window's width,
	      <literal>x</literal> is window's horizontal
	      position from the left if positive and
	      from the right if negative, 
	      and <literal>y</literal>
	      is window's vertical
	      position from the top of the screen if positive and
	      from the bottom of the screen if negative).
	      This option is automatically updated every time
	      TrEd's main window is closed.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>Fonts</title>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">Font</literal></term>
	  <listitem>
	    <para>
	      Font used to display the text of attributes and also in
	      several other places of GUI where the text of attributes is
	      displayed or edited. There are two possible formats of values
	      for this option:
	      <orderedlist continuation="restarts" inheritnum="ignore">
		<listitem><para>Standard X font-spec, with possible wildcards, e.g.:
		    <literal moreinfo="none">-*-helvetica-medium-r-normal-*-12-*-*-*-*-*-iso8859-2</literal>
		  </para></listitem>
		<listitem><para>Font attribute-oriented format, which is a 
		    comma-separated list of pairs of the form
		    <literal moreinfo="none">font-attribute:value</literal>. The attributes are:
		    <literal moreinfo="none">family, size, weight, slant, underline,
		      overstrike</literal>. Family is a font-family name like
		    <literal moreinfo="none">Arial, Helvetica</literal> or <literal moreinfo="none">Times New Roman</literal>.
		    Size is a number providing the font-size in points
		    (i.e. not pixels!). Possible values for <literal moreinfo="none">bold</literal>
		    are <literal moreinfo="none">normal</literal> and <literal moreinfo="none">bold</literal>, possible
		    values for <literal moreinfo="none">slant</literal> are <literal moreinfo="none">roman</literal> and
		    <literal moreinfo="none">italics</literal>. The <literal moreinfo="none">underline</literal> and 
		    <literal moreinfo="none">overstrike</literal> attributes take just boolean
		    values of <literal moreinfo="none">1</literal> and <literal moreinfo="none">0</literal>.
		    If a font, that would match the specified attributes 	    
		    exactly, is not found, the most similar font is used.
		  </para>
		  <note>
		    <title>Example</title>		 
		    <literallayout class="normal" format="linespecific">Font = family:Arial,size:10,weight:bold</literallayout>
		  </note>
		</listitem>
		<listitem><para>On XFT enabled Tk/X11, it is also
		    possible to use font patterns as specified by the
		    <ulink url="http://freedesktop.org/software/fontconfig">fontconfig</ulink>
		    library. These font patterns take the form:
<literallayout>&lt;families&gt;-&lt;point sizes&gt;:&lt;name1&gt;=&lt;values1&gt;:&lt;name2&gt;=&lt;values2&gt;...</literallayout>
	      Where <replaceable>names</replaceable> and 
	      <replaceable>values</replaceable>
	      refer to the floowing table
	      <literallayout>
Property        Type    Description
  --------------------------------------------------------------
  family          String  Font family name
  style           String  Font style. Overrides weight and slant
  slant           Int     Italic, oblique or roman
  weight          Int     Light, medium, demibold, bold or black
  size            Double  Point size
  aspect          Double  Stretches glyphs horizontally before hinting
  pixelsize       Double  Pixel size
  spacing         Int     Proportional, monospace or charcell
  foundry         String  Font foundry name
  antialias       Bool    Whether glyphs can be antialiased
  hinting         Bool    Whether the rasterizer should use hinting
  verticallayout  Bool    Use vertical layout
  autohint        Bool    Use autohinter instead of normal hinter
  globaladvance   Bool    Use font global advance data
  file            String  The filename holding the font
  index           Int     The index of the font within the file
  ftface          FT_Face Use the specified FreeType face object
  rasterizer      String  Which rasterizer is in use
  outline         Bool    Whether the glyphs are outlines
  scalable        Bool    Whether glyphs can be scaled
  scale           Double  Scale factor for point->pixel conversions
  dpi             Double  Target dots per inch
  rgba            Int     unknown, rgb, bgr, vrgb, vbgr,
                          none - subpixel geometry
  minspace        Bool    Eliminate leading from line spacing
  charset         CharSet Unicode chars encoded by the font
  lang            String  List of RFC-3066-style languages this
                          font supports
</literallayout></para>
		</listitem>
	      </orderedlist>	
	    </para>
		  <note>
		    <title>Example</title>		 
		    <literallayout class="normal" format="linespecific">Font = Times-12:bold:slant=italic:antialias=0</literallayout>
		  </note>	  
	  </listitem>
	</varlistentry>      
	<varlistentry>
	  <term><literal moreinfo="none">VLineFont</literal></term>
	  <listitem>
	    <para>
	      Font used for displaying the text in the value line above
	      tree. The same formats as for Font are allowed for this
	      option. If not specified, Font is used. 
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>Printing options</title>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">DefaultPrintCommand</literal></term>
	  <listitem>
	    <para>
	      Command used to pass the resulting PostScript to
	      the print spool. Default value is <command moreinfo="none">lpr</command>
	      in UNIX systems and <command moreinfo="none">prfile32.exe /-</command>
	      on Windows (<literal moreinfo="none">prfile32.exe</literal> is a
	      freeware Windows printing utility available at <ulink url="http://www.lerup.com/printfile/">http://www.lerup.com/printfile/</ulink>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="ttfont">
	  <term><literal moreinfo="none">TTFont</literal></term>
	  <listitem>
	    <para>
	      Name of the TrueType font to be used
	      when printing into Portable Document Format (PDF).
	      Defaults to <literal moreinfo="none">Arial</literal>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="ttfontpath">
	  <term><literal>TTFontPath</literal></term>
	  <listitem>
	    <para>
	      A comma-separated list of directories to look into
	      for TrueType fonts.
	      If this option is not explicitly
	      specified, TrEd uses directories listed in 
	      fontconfig library configuration file
	      <literal moreinfo="none">/etc/fonts/fonts.conf</literal> on Unix
	      and Windows system font directory on Windows.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="psfontfile">
	  <term><literal moreinfo="none">PsFontFile</literal></term>
	  <listitem>
	    <para>
	      A pfa-file with a Type1 PostScript font to be used for
	      PostScript or EPS generation.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="psfontafmfile">
	  <term><literal moreinfo="none">PsFontAFMFile</literal></term>
	  <listitem>
	    <para>
	      An afm-file containing the Type1 font metrics to be used for
	      PostScript or EPS generation. It is not necessary to 
	      specify this option if the metrics file name
	      can be derived from the <link linkend="psfontfile"><literal moreinfo="none">PsFontFile</literal></link>
	      by substitution the extension for <literal moreinfo="none">.afm</literal>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PrintColors</literal></term>
	  <listitem>
	    <para>
	      If <literal moreinfo="none">0</literal>, <application moreinfo="none">TrEd</application> prints in black and white.
	      If <literal moreinfo="none">1</literal>, <application moreinfo="none">TrEd</application> uses the same colors for printing
	      as it does for displaying the tree on the screen.
	      This option may be overriden by the <guilabel moreinfo="none">Use Colors</guilabel>
	      check-box in the <guilabel moreinfo="none">Print</guilabel> dialog.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PsFontSize</literal></term>
	  <listitem>
	    <para>Size of the Postscript font to be substituted 
	      by the font given in PsFontFile in the final PosctScript.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PrtFmtWidth</literal></term>
	  <listitem>
	    <para>
	      Width of the paper used for printing. Append one of the
	      characters <literal moreinfo="none">i,c,m</literal> to the number to destinguish the
	      dimension (inches, centimeters, milimeters
	      respectively).
	      This option only applies if <link linkend="psmedia"><literal moreinfo="none">PSMedia</literal></link>
	      is set to <literal moreinfo="none">User</literal> (see below).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PrtFmtHeight</literal></term>
	  <listitem>
	    <para>Width of the paper used for printing. Same format as
	    PrtFmtWidth.
	      This option only applies if <link linkend="psmedia"><literal moreinfo="none">PSMedia</literal></link>
	      is set to <literal moreinfo="none">User</literal> (see below).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="psmedia">
	  <term><literal moreinfo="none">PSMedia</literal></term>
	  <listitem>
	    <para>A PostScript or PDF document media-type used to
	      calculate page width and height. The default value is
	      <literal moreinfo="none">A4</literal>. If this option is set to
	      <literal moreinfo="none">BBox</literal>, then the generated page has the
	      dimensions of a minimal bounding box around the tree.
	      If this options set to <literal moreinfo="none">User</literal>, then
	      the values of <literal moreinfo="none">PrtFmtHeight</literal>
	      and <literal moreinfo="none">PrtFmtWidth</literal> described above
	      are used. The supported media types beside
	      <literal moreinfo="none">User</literal>
	      and <literal moreinfo="none">BBox</literal> are:
	      <literal moreinfo="none">Letter, LetterSmall, Legal, Statement, Tabloid, Ledger,
	Folio, Quarto, 7x9, 9x11, 9x12, 10x13, 10x14,
	Executive, A0, A1, A2, A3, A4, A4Small, A5, A6, A7, A8, A9,
	A10, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, ISOB0,
	ISOB1, ISOB2, ISOB3, ISOB4, ISOB5, ISOB6, ISOB7, ISOB8, ISOB9,
	ISOB10, C0, C1, C2, C3, C4, C5, C6, C7</literal>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PSFile</literal></term>
	  <listitem>
	    <para>
	      The default name of the output file when printed to file.
	      This name may be modified in the <guilabel moreinfo="none">Print</guilabel> dialog.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">MaximizePrintSize</literal></term>
	  <listitem>
	    <para>
	      If this option is on (i.e. <literal moreinfo="none">1</literal>), <application moreinfo="none">TrEd</application> tryes to draw the
	      tree as big as to fill the whole paper. Default is <literal moreinfo="none">0</literal> here.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PrtHMargin</literal></term>
	  <listitem>
	    <para>
	      Specifies the default 
	      horizontal print margin. Default is <literal>2c</literal>
	      (c = centimeters).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">PrtVMargin</literal></term>
	  <listitem>
	    <para>
	      Specifies the default 
	      vertical print margin.
	      Default is <literal>3c</literal>
	      (c = centimeters).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ImageMagickConvert</literal></term>
	  <listitem>
	    <para>
	      Path to ImageMagick's <command moreinfo="none">convert</command> command
	      which is used to convert resulting EPS to various image
	      formats. The default value is <literal moreinfo="none">convert</literal>
	      which means TrEd expects the command to be installed in
	      some directory in <varname>PATH</varname>.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>Miscelaneous options</title>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">LibDir</literal></term>
	  <listitem>
	    <para>
	      This option forces <application moreinfo="none">TrEd</application> to search for its library
	      files in the specified directory.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">MacroFile</literal></term>
	  <listitem>
	    <para>
	      Path to a file with macros for TrEd.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">DefaultMacroFile</literal></term>
	  <listitem>
	    <para>
	      Path to a file with the default set of macros for TrEd.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="maxundo">
	  <term><literal moreinfo="none">MaxUndo</literal></term>
	  <listitem>
	    <para>
	      Maximum number of operations stored by Undo/Redo functions.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="autosave">
	  <term><literal moreinfo="none">AutoSave</literal></term>
	  <listitem>
	    <para>
	      Time interval in minutes in which TrEd creates
              auto-save file. AutoSave=0 disables auto-saving.
	      Defaults to 5.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="lockfiles">
	  <term><literal moreinfo="none">LockFiles</literal></term>
	  <listitem>
	    <para>
	      When a file is open, TrEd creates
	      a lock file to prevent other TrEd instances
	      accessing the same file.
	      If set to 0, this option disables this behaviour.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="noconvertwarning">
	  <term><literal moreinfo="none">NoConvertWarning</literal></term>
	  <listitem>
	    <para>
	      When a ImageMagick printing extension is used
	      on Windows or with a black-listed version of ImageMagick,
	      a warning dialog pops-up. This option can be set to 1 to
	      disable this behaviour.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="reloadpreservespatterns">
	  <term><literal moreinfo="none">ReloadPreservesPatterns</literal></term>
	  <listitem>
	    <para>
	      This option may be set to 0 to force the Reload function
	      to use the file's attribute pattern setting rather than
	      preserving the current one.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">ReverseNodeOrder</literal></term>
	  <listitem>
	    <para>
	      Draw nodes (and value line values) in reverse order.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">UseLocales</literal></term>
	  <listitem>
	    <para>
	      If <literal moreinfo="none">1</literal> is set here, 
	      <application moreinfo="none">TrEd</application> 
	      uses locales. This is especially useful in macros 
	      e.g. for sorting. <literal>LC_CTYPE</literal> 
	      locale settings may also affect keyboard input and other
	      charset-related stuff in the GUI.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">UseCzechLocales</literal></term>
	  <listitem>
	    <para>
	      If <literal moreinfo="none">1</literal> is set here,
	      <application moreinfo="none">TrEd</application> uses
	      Czech (cs_CZ) locales. This option is present for rather
	      historical reasons.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="defaultfileencoding">
	  <term><literal moreinfo="none">defaultFileEncoding</literal></term>
	  <listitem>
	    <para>
	      The encoding used for files opened in TrEd.
	      If TrEd runs on <literal moreinfo="none">Perl 5.8</literal> or higher
	      with <literal moreinfo="none">Tk804</literal> or higher with Unicode
	      support, arbitrary encoding supported by Perl can be
	      used. In all other cases, only 8-bit encodings are
	      supported and it is necessary to setup the display font
	      for correct displaying.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="defaultdisplayencoding">
	  <term><literal moreinfo="none">defaultDisplayEncoding</literal></term>
	  <listitem>
	    <para>This option may be used in TrEd running on
	      non-unicode aware <literal moreinfo="none">Perl</literal> and
	      <literal moreinfo="none">Tk</literal> (see above) if the file encoding
	      differs from the encoding used by the display font. In
	      such case, TrEd supports conversions between
	      <literal moreinfo="none">iso-8859-2</literal> and
	      <literal moreinfo="none">windows-1250</literal> for Eastern European languages
	      and
	      <literal moreinfo="none">iso-8859-6</literal> and
	      <literal moreinfo="none">windows-1256</literal> for Arabic.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="displaynonasciilefttoright">
	  <term><literal moreinfo="none">displayNonAsciiLeftToRight</literal></term>
	  <listitem>
	    <para>
	      This option adds a poor-man's bidi-support.
	      It reverses all non ASCII-strings before displaying.
	      This option is not intended for Arabic, since
	      TrEd already contains better arab-remixing
	      algorigthms contributed by Ota Smrz.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="defaultmacroencoding">
	  <term><literal moreinfo="none">defaultMacroEncoding</literal></term>
	  <listitem>
	    <para>
	      The default encoding used when parsing TrEd macros.
	      This option only takes effect for
	      <literal moreinfo="none">Perl 5.8</literal> or higher.
	      Default macro encoding can be overriden
	      in the macro itself as described in 
	      <xref linkend="macroencodings"/>. Defaults to UTF-8.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="displaystatusline">
	  <term><literal moreinfo="none">displayStatusLine</literal></term>
	  <listitem>
	    <para>
	      Turn on/off displaying status line. Default is off.
	      Currently, status line content can only be controlled
	      from macros, via <xref linkend="get_status_line_hook"/>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="sgmls">
	  <term><literal moreinfo="none">Sgmls</literal></term>
	  <listitem>
	    <para>
	      This option may be used to provide a path to an
	      SGML parser with support for ESIS output, such as
	      James Clark's <ulink url="http://quest.ms.mff.cuni.cz/pdt/Support/nsgmls/index.html">SGML parser
		<command moreinfo="none">nsgmls</command></ulink>.
	      <application moreinfo="none">TrEd</application> may then use this
	      parser to read SGML <ulink url="http://quest.ms.mff.cuni.cz/pdt/Corpora/PDT_1.0/csts.dtd">CSTS</ulink>
	      files (used e.g. in the
	      Prague Dependency Treebank 1.0).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="openfilenamecommand">
	  <term><literal moreinfo="none">OpenFileNameCommand</literal></term>
	  <listitem>
	    <para>This option may be used 
	      to provide a custom command for displaying Open File dialogs.
	      In the command specification,
	      <literal>%t</literal> is replaced with
	      the dialog title, 
	      <literal>%m</literal> with a list of file-types (patterns),
	      <literal>%t</literal> with the initial filename
	      (only for save dialogs, see the 
	      <link linkend="savefilenamecommand">SaveFileNameCommand</link>
	      option below), and
	      <literal>%d</literal> with the initial directory.
	      For example, setting this option to 
	      <literal>kdialog --title %t --getopenfilename %d %m</literal>
	      in a KDE 3.3.x environment makes TrEd use
	      the default KDE Open File dialog.
	      This option is unused by default.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="savefilenamecommand">
	  <term><literal moreinfo="none">SaveFileNameCommand</literal></term>
	  <listitem>
	    <para>This option may be used 
	      to provide a custom command for displaying Save File dialogs.
	      See the <link linkend="openfilenamecommand">SaveFileNameCommand</link> option above
	      for more detail. For example, setting this option to 
	      <literal>kdialog --title %t --getopenfilename %d%f %m</literal>
	      in a KDE 3.3.x environment makes TrEd use
	      the default KDE Open File dialog.
	      This option is unused by default.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="sgmlsopts">
	  <term><literal moreinfo="none">SgmlsOpts</literal></term>
	  <listitem>
	    <para>
	      This option may be used to provide additional parameters
	      to the SGML parser declared in <link linkend="sgmls">Sgmls</link> option. By default,
	      this option is set to <literal moreinfo="none">-i preserve.gen.entities</literal>.
	      These parameters forces James Clark's
	      <command moreinfo="none">nsgmls</command> parser to include a part of
	      CSTS DTD where all global entities are re-declared in such a
	      way that they expand to themselves literally and thus
	      are preserved (as if no expansion was done).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="cstsparsercommand">
	  <term><literal moreinfo="none">CstsParserCommand</literal></term>
	  <listitem>
	    <para>
	      This option may be used to customize the command used by
	      CSTS backend to invoke SGML parser. The default value is
	      <literal moreinfo="none">%s %o %d %f</literal>. In this string,
	      the <literal moreinfo="none">%s</literal> substring is replaced
	      with the value of <link linkend="sgmls"><literal moreinfo="none">Sgmls</literal></link> option,
	      <literal moreinfo="none">%o</literal> is replaced with the value of
	      <link linkend="sgmlsopts"><literal moreinfo="none">SgmlsOpts</literal></link> option, 
	      <literal moreinfo="none">%d</literal> is replaced with the value of
	      <link linkend="cstsdoctype"><literal moreinfo="none">CSTSDoctype</literal></link> option, and
	      <literal moreinfo="none">%f</literal> is replaced with the filename.
	      The only requirement is that this command returns
	      a valid representation of the CSTS file in <ulink url="http://xml.coverpages.org/WG8-n931a.html#n931-esis">ESIS</ulink>
	      format on standard output.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">CstsParserZCommand</literal></term>
	  <listitem>
	    <para>
	      This option may be used to customize the command used by
	      CSTS backend to invoke SGML parser for files compressed
	      with GNU GZip. The default value is <literal moreinfo="none">%z &lt; %f |
	      %s %o %d -</literal>.  In this string, the
	      <literal moreinfo="none">%z</literal> substring is replaced with the
	      value of <link linkend="zcat"><literal moreinfo="none">zcat</literal></link> option.  See <link linkend="cstsparsercommand"><literal moreinfo="none">CstsParserCommand</literal></link>
	      for more.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="cstsdoctype">
	  <term><literal moreinfo="none">CSTSDoctype</literal></term>
	  <listitem>
	    <para>
	      This option should point to a file containing CSTS
	      doctype declaration combining both the SGML subset
	      declaration as well as the CSTS DTD. This file
	      is included in the distribution of TrEd and is by default stored
	      in TrEd's library directory as
	      <filename moreinfo="none">csts.doctype</filename>.
	      Setting this option overrides this default.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gzip</literal></term>
	  <listitem>
	    <para>This option may be used to point
	      <application moreinfo="none">TrEd</application> to a
	      GNU <command moreinfo="none">gzip</command>
	      command, which may be used for transparent
	      saving files commpressed by GNU <command moreinfo="none">gzip</command>.
	      The default value is <literal moreinfo="none">/bin/gzip -c</literal>
	      if <filename moreinfo="none">/bin/gzip</filename> exists and is
	      executable. Otherwise the value is undefined and
	      <application moreinfo="none">TrEd</application> does not support
	      transparent saving GNU-zipped files.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry id="zcat">
	  <term><literal>zcat</literal></term>
	  <listitem>
	    <para>This option may be used to point
	      <application moreinfo="none">TrEd</application> to a
	      GNU <command moreinfo="none">zcat</command>	      
	      command, which may be used for transparent opening
	      files commpressed by GNU <command moreinfo="none">gzip</command>.
	      (These files are recognized by the
	      <filename moreinfo="none">.gz</filename>
	      suffix.) The default value is <literal moreinfo="none">/bin/zcat</literal>
	      if <filename moreinfo="none">/bin/zcat</filename> exists and is
	      executable. Otherwise the value of
	      <literal moreinfo="none">gzip</literal> option is used.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>nsgmls</literal></term>
	  <listitem>
	    <para>This option may be used to point
	      <application moreinfo="none">TrEd</application> to
	      <command moreinfo="none">nsgmls</command>
	      SGML parser.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2>
      <title>Debugging options</title>
      <variablelist>
	<varlistentry>
	  <term><literal>backenddebug</literal></term>
	  <listitem>
	    <para>Print debugging information for I/O backends.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>hookdebug</literal></term>
	  <listitem>
	    <para>Print debugging information when hooks are called.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>keyboarddebug</literal></term>
	  <listitem>
	    <para>Print debugging on keyboard events.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>macrodebug</literal></term>
	  <listitem>
	    <para>Print debugging when macros are invoked.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>treddebug</literal></term>
	  <listitem>
	    <para>Print various debugging information not covered
	      by the debugging options listed above.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  <sect1 id="commandline">
    <title>Command-line options</title>
    <para>
      If running <application moreinfo="none">TrEd</application> from
      the command-line you may use several
      command-line options and also give <application moreinfo="none">TrEd</application> one or more files to
      open. Each file-name may be also appended number of tree to
      be displayed by <application moreinfo="none">TrEd</application> when the file is opened.      
    </para>
    <note>
      <para>
	You may need to replace <command moreinfo="none">tred</command> with
	<command moreinfo="none">perl tred</command> in the following usage examples in Windows
	or UNIX, if you cannot set <command moreinfo="none">tred</command> the execute permissions.
      </para>
    </note>
    <para>
      The general usage is:      
      <cmdsynopsis sepchar=" ">
	<command moreinfo="none">tred</command>
	<arg rep="norepeat" choice="opt">-R</arg>
	<arg rep="norepeat" choice="opt">-G</arg>
	<arg rep="norepeat" choice="opt">-c <replaceable>config-file</replaceable></arg>
	<arg rep="norepeat" choice="opt">-m <replaceable>macro-file</replaceable></arg>
	<arg rep="norepeat" choice="opt">-t <replaceable>context</replaceable></arg>
	<arg rep="norepeat" choice="opt">-l
	<replaceable>file-list</replaceable></arg>
	<arg rep="norepeat" choice="opt">-W
	<replaceable>window-id</replaceable></arg>
	<arg rep="norepeat" choice="opt">-B <replaceable>backends</replaceable></arg>
	<arg choice="opt" rep="repeat">file<group choice="opt" rep="norepeat">
	    <arg choice="opt" rep="norepeat">##<replaceable>N</replaceable></arg>
	    <arg choice="opt" rep="norepeat">#<replaceable>N</replaceable></arg>
	  </group>
	</arg>
      </cmdsynopsis>
      or
      <cmdsynopsis sepchar=" ">
	<command moreinfo="none">tred</command>
	<group choice="opt" rep="norepeat">
	  <arg choice="opt" rep="norepeat">-u</arg>
	  <arg choice="opt" rep="norepeat">-h</arg>
	</group>
      </cmdsynopsis>
      to obtain short instructions on usage (<parameter moreinfo="none">-u</parameter>)
      or a brief help (<parameter moreinfo="none">-h</parameter>).
    </para>
    <para>
      The optional command-line parameters have the following meaning:
    </para>
    <variablelist>
      <varlistentry>
	<term><parameter moreinfo="none">-m</parameter></term>
	<listitem>
	  <para>This parameter may be used to force <application moreinfo="none">TrEd</application> to use a different 
	    macro file from that given in TrEd's configuration file.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-c</parameter></term>
	<listitem>
	  <para>This parameter may be used to force <application moreinfo="none">TrEd</application> to use 
	    a certain configuration file.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-t</parameter></term>
	<listitem>
	  <para>Start in the given macro context.
	    This context may be however overriden by some hooks such as
	    <literal moreinfo="none">start_hook</literal>
	    or <literal moreinfo="none">file_opened_hook</literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-l</parameter></term>
	<listitem>
	  <para>Use this parameter to pass a file-list to TrEd. Each
	    file-name given in the file-list must be on a separate line.
	    This feature may be particulary useful under Windows, where
	    maximum length of the command-line is usually very limited.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-W</parameter></term>
	<listitem>
	  <para>Under X Window System, embed TrEd's main window into 
	    the window with given <replaceable>window-id</replaceable>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-B</parameter></term>
	<listitem>
	  <para>Comma separated list of additional 
	    input/output <replaceable>backends</replaceable> to
	    import.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-G</parameter></term>
	<listitem>
	  <para>Do not resize TrEd's main window to its last saved
	    geomtery on startup (this option is useful when using
	    <parameter moreinfo="none">-W</parameter> to embed TrEd into other
	    applications).</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-R</parameter></term>
	<listitem>
	  <para>When parsing CSTS files, try to restore structure from
	    <literal moreinfo="none">&lt;TRg&gt;</literal> tags rather than from
	    <literal moreinfo="none">&lt;g&gt;</literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-h</parameter></term>
	<listitem>
	  <para>Prints a brief help and exits.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter moreinfo="none">-u</parameter></term>
	<listitem>
	  <para>Prints a short help on usage and exits.</para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      All other arguments passed to <application moreinfo="none">TrEd</application> on the command line
      are considered file-names to open. (<application moreinfo="none">TrEd</application> actually opens only one
      file at a time, but user may go to the next/previous file
      using the <menuchoice moreinfo="none">
	<guimenu moreinfo="none">File</guimenu>
	<guimenuitem moreinfo="none">Next File</guimenuitem>
      </menuchoice> and
      <menuchoice moreinfo="none">
	<guimenu moreinfo="none">File</guimenu>
	<guimenuitem moreinfo="none">Previous File</guimenuitem></menuchoice> menu commands.)
    </para>
    <para>
      Every file-name either on the command-line or in a file-list
      may be given a number suffix which makes <application moreinfo="none">TrEd</application> open that file
      on that tree. There are two possible formats for the suffices:
    </para>
    <variablelist>
      <varlistentry>
	<term><literal moreinfo="none">#N</literal></term>
	<listitem>
	  <para>
	    where <literal moreinfo="none">N</literal> is a number possibly followed by one or more
	    upper-case letters. In this case, <literal moreinfo="none">#N</literal> <application moreinfo="none">TrEd</application> searches
	    and displays the first tree in the file
	    the root of which is assigned <literal moreinfo="none">#N</literal> as a value
	    of the attribute <literal moreinfo="none">form</literal> (this feature works only for
	    FS-files of <productname class="trade">The Prague Dependency Treebank</productname>).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal moreinfo="none">##N</literal></term>
	<listitem>
	  <para>
	    where <literal moreinfo="none">N</literal> is a number. This makes <application moreinfo="none">TrEd</application> to
	    display the <literal moreinfo="none">N</literal>'th tree when the given
	    file is opened.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 id="macros">
    <title>User Macros</title>
    <para>
      This section describes in detail
      <application moreinfo="none">TrEd</application>'s support for user macros. It is
      devoted mainly to programmers.
    </para>
    <para>
      As was already mentioned, <application moreinfo="none">TrEd</application> is
      itself written in Perl and therefore it is natural that also
      user macros are written in Perl language. The details of the
      Perl language syntax are not described here. You may find
      them in the literature on programming in Perl as well as in
      manual pages of Perl language. A large volume of documentation
      on Perl and many specific Perl modules is collected for example
      by <ulink url="http://www.activestate.com/ASPN/Reference">ActiveState</ulink>.
      In this text, we concentrate on the 
      <application moreinfo="none">TrEd</application>'s macro specifics.
    </para>
    <sect2>
      <title>What is a macro</title>
      <para>
	A macro for <application moreinfo="none">TrEd</application> is simply any Perl
	routine defined using the <literal moreinfo="none">sub { ... }</literal>
	construct:	
      </para>
      <programlisting format="linespecific">sub my_first_macro {
	# any Perl code may come here
}</programlisting>
      <para>
	Macros may be called from other macros in the same way as
	any other sub-routines in Perl, for example:
      </para>
      <programlisting format="linespecific">sub my_first_macro {
	my_second_macro();  # call another macro
}</programlisting>
      <para>
	In this case, macros may use the usual Perl mechanisms
	to pass the called macro any number of argumens.
      </para>
      <para>
	To make the macro accessible from
	<application moreinfo="none">TrEd</application>, two more things should be
	done. First, a special <quote>directive</quote> should be added,
	so that the macro appears in the
	<guimenu moreinfo="none">User-defined</guimenu> menu and thus may be
	called interactively, second the macro
	must be stored in some file and
	<application moreinfo="none">TrEd</application>
	must be told where to look for the file. This (and more) is
	discussed in the following sections.
      </para>      
    </sect2>
    <sect2>
      <title>Where does <application moreinfo="none">TrEd</application> look for
      macros</title>
      <para>
	On startup, <application moreinfo="none">TrEd</application>
	looks for two files with macros.
	<orderedlist continuation="restarts" inheritnum="ignore">
	  <listitem>
	    <para>The default set of macros (described in more detail
	      in <xref linkend="defaultmacros"/>)
	      <filename moreinfo="none">tred.def</filename>
	    </para>
	  </listitem>
	  <listitem>
	    <para>The user set of macros <filename moreinfo="none">tred.mac</filename>
	      or any other file given after the
	      <parameter moreinfo="none">-m</parameter> parameter on the command line 
	      or a file specified in the
	      <application moreinfo="none">TrEd</application>'s configuration
	      option <literal moreinfo="none">MacroFile</literal>.	      
	    </para>
	  </listitem>
	</orderedlist>
	Macro programmers are supposed to keep the
	<filename moreinfo="none">tred.def</filename> file unchanged, but are
	encouraged to modify or append the
	<filename moreinfo="none">tred.mac</filename> macro file according to their
	needs. 
      </para>
      <para>
	Other macro files may be included into any
	<filename moreinfo="none">tred.mac</filename> file using one of the following
	<literal moreinfo="none">#include</literal> directives where
	<replaceable>filename</replaceable> is supposed to provide
	a relative or absolute path to the macro file, under the
	terms described below each item:
      </para>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">#include "<replaceable>filename</replaceable>"</literal></term>
	  <listitem>
	    <para>The <replaceable>filename</replaceable> must be
	      relative to the directory of the file to which it is
	      included.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">#include &lt;<replaceable>filename</replaceable>&gt;</literal></term>
	  <listitem>
	    <para>The <replaceable>filename</replaceable> must
	      be relative to the TrEd's library directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">#include <replaceable>filename</replaceable></literal></term>
	  <listitem>
	    <para>
	      The <replaceable>filename</replaceable> may be
	      both absolute or relative. In the latter case the directories are
	      searched in the following order:
	      <orderedlist continuation="restarts" inheritnum="ignore">
		<listitem>
		  <para>Current directory is searched.</para>
		</listitem>
		<listitem>
		  <para>The directory of the file where the
		    <literal moreinfo="none">#include</literal> directive occured
		    is searched.
		  </para>
		</listitem>
		<listitem>
		  <para><application moreinfo="none">TrEd</application>'s library directory
		    is searched.
		  </para>
		</listitem>
	      </orderedlist>
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <para>
	If <literal moreinfo="none">#include</literal> fails to find given file,
	it is a fatal error and
	<application moreinfo="none">TrEd</application>/<application moreinfo="none">bTrEd</application>
	immediatelly stops. You may use
	<literal moreinfo="none">#ifinclude</literal> directive, if you wish
	<literal moreinfo="none">TrEd</literal> to continue (without error or warning)
	even if the requested file was not found.
      </para>
    </sect2>
    <sect2 id="macroencodings">
      <title>Writing macros in various character encodings</title>
      <note>
	<para>This section applies only to <application moreinfo="none">TrEd</application>/<application moreinfo="none">bTrEd</application> running under Perl 5.8
	and higher.</para>
      </note>
      <para>
	If non-ASCII characters should occur in macro code, it is
	necessary to indicate the character encoding used.  Otherwise
	<application moreinfo="none">TrEd</application> wouldn't be able to translate the non-ASCII characters
	into an internal Unicode representation.  Failing to indicate
	encoding used in macro code can therefore lead to unexpected
	behaviour of the code and/or fatal run-time errors.
      </para>
      <para>
	By default, <application moreinfo="none">TrEd</application> 
	expects UTF-8 encoded macro code (unless specified
	otherwise using the <link linkend="defaultmacroencoding">
	  <literal>defaultMacroEncoding</literal> configuration option</link>).
	Any other character encoding must be indicated using
	<literal moreinfo="none">#encoding</literal> directive, followed by name of
	the encoding, such as <literal moreinfo="none">utf-8</literal>,
	<literal moreinfo="none">iso-8859-1</literal>, <literal moreinfo="none">windows-1256</literal>,
	etc. The encoding indicated by an <literal moreinfo="none">#encoding</literal>
	directive applies on the macro file strating from the line following the directive
	to the end of the file or to another <literal moreinfo="none">#encoding</literal>
	directive occurence, whichever happens first. Encoding directive does not
	apply to included macro files.
      </para>
      <example>
	<title>Indicating macro character encoding</title>
	<programlisting format="linespecific">
  (UTF-8 encoded macro code)

#encoding iso-8859-2
  
  (latin-2 encoded macro code)

#encoding utf-8

  (UTF-8 encoded macro code continues)
	</programlisting>
      </example>
    </sect2>
    <sect2>
      <title>Conditional macro code</title>
      <para>
	If macro code is spanned across	several files or is shared
	between <application moreinfo="none">TrEd</application> and
	<application moreinfo="none">bTrEd</application>, it may be useful
	to make some parts of the macro code (such as an
	<literal moreinfo="none">#include</literal> directive) conditional.
      </para>
      <para>
	For this purpose <application moreinfo="none">TrEd</application>,
	provides similar mechanisms as standard <literal moreinfo="none">C</literal>
	pre-processors using
	<literal moreinfo="none">#define</literal>,
	<literal moreinfo="none">#undefine</literal>,
	<literal moreinfo="none">#ifdef</literal>,
	<literal moreinfo="none">#ifndef</literal>, and
	<literal moreinfo="none">#endif</literal> directives.
	These directives must appear on the very beginning of line.
	Any code enclosed within
	<literallayout class="normal" format="linespecific">#ifdef	<replaceable>symbol-name</replaceable></literallayout> 
	and <literallayout class="normal" format="linespecific">#endif</literallayout> directives
	is included if and only if
	the symbol <literal moreinfo="none"><replaceable>symbol-name</replaceable></literal>
	was previously defined using a <literal moreinfo="none">#define
	<replaceable>symbol-name</replaceable></literal>
	directive. 
	Any code enclosed within
	<literallayout class="normal" format="linespecific">#ifndef <replaceable>symbol-name</replaceable></literallayout> 
	and <literallayout class="normal" format="linespecific">#endif</literallayout> directives
	is included if and only if
	the symbol <literal moreinfo="none"><replaceable>symbol-name</replaceable></literal>
	is not defined.
	A defined
	symbol can later be undefined 
	with <literal moreinfo="none">#undefine
	<replaceable>symbol-name</replaceable></literal>.
	Unlike <literal moreinfo="none">C</literal> macros,
	symbols in <application moreinfo="none">TrEd</application> have no other
	purpose than this.
      </para>
      <para>
	Except for symbols defined by a <literal moreinfo="none">#define</literal>
	directive, symbol <literal moreinfo="none">TRED</literal> is always initially
	defined in <application moreinfo="none">TrEd</application>, symbol
	<literal moreinfo="none">BTRED</literal> is always initially defined in
	<application moreinfo="none">bTrEd</application>. This may help to simplify
	sharing macro code with specific parts for
	<application moreinfo="none">TrEd</application> and
	<application moreinfo="none">bTrEd</application> between these two
	applications.
      </para>
    </sect2>
    <sect2>
      <title>Adding macros to menu, assigning shortcuts</title>
      <para>
	For convenience, two more directives are available for adding
	a macro to <application moreinfo="none">TrEd</application>'s
	<guimenu moreinfo="none">User-defined</guimenu> menu and for assigning a
	keyboard shortcut to macro.	
      </para>
      <para>
	To connect the <literal moreinfo="none">my_first_macro</literal> with a 
	new menu item labeled <guimenuitem moreinfo="none">My First
	Macro</guimenuitem>
	under the <guimenu moreinfo="none">User-defined</guimenu> menu,
	the following directive should appear in some macro
	file read by <application moreinfo="none">TrEd</application>:
      </para>
      <literallayout class="normal" format="linespecific">#insert my_first_macro as menu My First Macro</literallayout>
      <para>
	Actually the words <literal moreinfo="none">as</literal> and
	<literal moreinfo="none">menu</literal> may be omitted, so it is
	possible to write the above directive also as:
      </para>
      <literallayout class="normal" format="linespecific">#insert my_first_macro as My First Macro</literallayout>
      <para>or even</para>
      <literallayout class="normal" format="linespecific">#insert my_first_macro My First Macro</literallayout>
      <para>
	To make the macro accessible via a keyboard shortcut,
	the <literal moreinfo="none">#bind</literal> directive may be used.
	Thus, to <quote>bind</quote> the
	<literal moreinfo="none">my_first_macro</literal> macro to say
	<keycombo moreinfo="none" action="simul">
	  <keycap moreinfo="none">Ctrl</keycap>
	  <keycap moreinfo="none">Alt</keycap>
	  <keycap moreinfo="none">Del</keycap>
	</keycombo>
	keyboard shortcut, the following line should appear somewhere
	in the macro file:
      </para>
      <literallayout class="normal" format="linespecific">#bind my_first_macro to key Ctrl+Alt+Del</literallayout>
      <para>
	Again, the <literal moreinfo="none">to</literal> and
	<literal moreinfo="none">key</literal> keywords may be omitted.	
      </para>
      <warning>
	<para>
	  Using the shortcut chosen here as an example is probbably
	  not a good idea, as it is a shortcut that restarts the
	  system on many computers.  Remember, that only shortcuts
	  which are not interpreted by the operating system or desktop
	  environment may be assigned to
	  <application moreinfo="none">TrEd</application>'s macros and work correctly.
	</para>
      </warning>
      <para>If both the menu item and keyboard shortcut are needed for
	a macro, the following abbreviated form can be used:
      </para>
      <literallayout class="normal" format="linespecific">#bind my_first_macro to key Ctrl+Alt+Del menu My First Macro</literallayout>
      <para>
	If more than one keyboard shortcuts or menu items are
	connected with the same macro, any of them may be used to invoke the
	macro. If more than one macro was assigned the same keyboard
	shortcut, the latest binding appearing in the macro files
	is used. Also, if two or more macros with the same name
	appear in the loaded macro files, the last one is used.
      </para>
      <literallayout class="normal" format="linespecific">#unbind-key Ctrl+Alt+Del</literallayout>
      <para>
	The above directive may be used to remove an existing
	key-bindning from current binding context(s). It is especially
	useful for disabling certain functionality and bindings of an
	incuded macro file.
      </para>
      <literallayout class="normal" format="linespecific">#remove-menu My First Macro</literallayout>
      <para>
	The above directive may be used to remove an existing menu
	item from current binding context(s). It is especially useful
	for disabling certain functionality and bindings of an incuded
	macro file.
      </para>
      <para>
	When an interactively invoked macro returns,
	<application moreinfo="none">TrEd</application> automatically activates the
	node referenced by variable <literal moreinfo="none">$this</literal>, redraws
	displayed tress according to the value of the
	<literal moreinfo="none">$Redraw</literal> variable changes file status to
	<literal moreinfo="none">modified</literal> (as indicated by the state of the
	<inlinegraphic fileref="pics/filefloppy.png"/> button) unless
	variable <literal moreinfo="none">$FileChanged</literal> is altered in the
	way described below (both variables are definded in
	<filename moreinfo="none">tred.def</filename>, see <xref linkend="defaultmacros"/>).
      </para>
      <para>
	The <literal moreinfo="none">$Redraw</literal> variable may has the following
	values:
	<variablelist>
	  <varlistentry>
	    <term><literal moreinfo="none">file</literal> (the default)</term>
	    <listitem>
	      <para>redraw all windows displaying current file</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><literal moreinfo="none">tree</literal></term>
	    <listitem>
	      <para>redraw all windows displaying current tree</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><literal moreinfo="none">win</literal></term>
	    <listitem>
	      <para>redraw current window</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><literal moreinfo="none">all</literal></term>
	    <listitem>
	      <para>redraw all windows</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><literal moreinfo="none">tie</literal></term>
	    <listitem>
	      <para>redraw all windows if TrEd windows are tied
		otherwise redraw only the current one</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><literal moreinfo="none">none</literal></term>
	    <listitem>
	      <para>disables redrawing</para></listitem>
	  </varlistentry>
	</variablelist>
      </para>
      <para>
	To prevent <application moreinfo="none">TrEd</application> from considering
	the file modified by a specific macro, the macro must
	explicitly set a special variable named
	<literal moreinfo="none">$FileChanged</literal> to zero.
      </para>
      <para>
	To make things even more complicated,
	<application moreinfo="none">btred</application>, the off-line variant of
	TrEd, never saves any processed file unless the variable
	<literal moreinfo="none">$FileChanged</literal> has been explicitely set to
	<literal moreinfo="none">1</literal> or <literal moreinfo="none">-S</literal> command-line
	switch is used.
      </para>
      <note>
	<para>If the state of the file was considered
	  <emphasis>modified and not saved</emphasis> when a
	  macro was interactively invoked, any changes to
	  the <literal moreinfo="none">$FileChanged</literal> variable made
	  by the macro are ignored. Macro may force the
	  file status to <emphasis>saved</emphasis>
	  by setting <literal moreinfo="none">$forceFileSaved</literal>
	  variable to <literal moreinfo="none">1</literal>.
	</para>
      </note>
      <note>
	<para>For historical reasons, there exists an alias for
	  <literal moreinfo="none">$FileChanged</literal> named
	  <literal moreinfo="none">$FileNotSaved</literal>. These variables are
	  identical.
	</para>
      </note>
    </sect2>
    <sect2>
      <title>Accessing tree nodes</title>
      <para>In <application moreinfo="none">TrEd</application> macros as well as in 
	<application moreinfo="none">TrEd</application> itself tree nodes are
	represented by <classname>FSNode</classname> objects. They are
	basically only references to hash tables where
	the attribute-name/attribute-value information is stored
	as a key/value pair. Moreover, the <classname>FSNode</classname>
	object provide a few methods to access the node's neighbors in
	the tree.
      </para>
      <para>The macro invoked by user action (e.g. pressing the
	keyboard shortcut assigned to the macro) may use the following
	global variables (declared within the <literal moreinfo="none">TredMacro</literal>
	namespace, but exported by default to other derived
	contexts) to refer to the active node and to the root of the
	active tree (how to access any tree in the file will be told
	later):
      </para>
      <variablelist>
	<varlistentry>
	  <term><literal moreinfo="none">$this</literal></term>
	  <listitem>
	    <para>Points to the active node in the current tree.
	      Macros may use this variable to access the active node as
	      well as to make other node active (by assigning a
	      different node reference to it).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal moreinfo="none">$root</literal></term>
	  <listitem>
	    <para>Points to the root of the current tree.
	      Macros may use this variable to access the root of
	      the tree and (consequently) to access the whole tree.
	      However, all assignments to this variable are ignored by
	      <application moreinfo="none">TrEd</application>.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <sect3>
	<title>Accessing node attributes</title>
	<para>
	  If
	  <literal moreinfo="none">$node</literal> is a <classname>FSNode</classname> object
	  reference, the value of the attribute
	  <literal moreinfo="none"><replaceable>attr</replaceable></literal> is
	  returned by the
	  <literal moreinfo="none">$node-&gt;{<replaceable>attr</replaceable>}</literal>
	  expression. To give the node's
	  <literal moreinfo="none"><replaceable>attr</replaceable></literal>
	  attribute new value, say <replaceable>val</replaceable>,
	  the following simple assignment may be used:
	</para>
	<literallayout class="normal" format="linespecific">$node-&gt;{<replaceable>attr</replaceable>}='val';</literallayout>
      </sect3>
      <sect3>
	<title>Accessing node neighbors</title>
	<para>
	  There is a few methods provided by every
	  <classname>FSNode</classname> reference that can be used
	  to access other nodes in the tree. Each of the methods
	  returns either a <classname>FSNode</classname> reference
	  pointing to the requested node, or zero if 
	  the requested node does not exist. For example, the
	  following code may be used to make the active node's
	  parent node active:
	</para>
	<programlisting format="linespecific">$this = $this-&gt;parent if ($this-&gt;parent);</programlisting>
	<para>
	  The above code states: activate the parent node of the
	  currently active node in case the currently active node
	  has a parent.
	</para>
	<para>
	  The following table describes all available
	  <classname>FSNode</classname> methods:
	</para>
	<table>
	  <title><classname>FSNode</classname> methods</title>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Method name</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><literal moreinfo="none">parent</literal></entry>
		<entry>Return node's parent node.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">firstson</literal></entry>
		<entry>Return the first child node of the given node
		  (the first node depending on the given node).</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">rbrother</literal></entry>
		<entry>
		  Return the right
		  brother of the given node. However, hence the nodes
		  may be displayed in the order given by the special
		  FS-format numbering attribute <literal moreinfo="none">@N</literal>,
		  the returned node need not necessarily be displayed to
		  the right of the given node. This is because the
		  ordering according to the special numbering attribute
		  does not have to correspond to the natural structure
		  ordering of the tree.
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">lbrother</literal></entry>
		<entry>
		  Return the left
		  brother of the given node. However, as for the 
		  right brother, hence the nodes
		  may be displayed in the order given by the special
		  FS-format numbering attribute <literal moreinfo="none">@N</literal>,
		  the returned node need not necessarily be displayed to
		  the left of the given node. This is because the
		  ordering according to the special numbering attribute
		  does not have to correspond to the natural structure
		  ordering of the tree.
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">following(<replaceable>top</replaceable>?)</literal></entry>
		<entry>
		  Return the next node of the given node in the
		  natural ordering of the tree provided by the
		  tree structure. E.g. if the given node has a child,
		  this child is returned. If the node has no childs
		  but does have a right brother,
		  <classname>FSNode</classname>
		  reference to the right brother is returned.
		  If no child and no right brother exists for the
		  given node, the method looks for a right brother
		  of its nearest ancestor, etc. Starting from the root
		  of the tree and calling this method repeatedly
		  on the returned nodes ensures that all the nodes
		  in the trees are accessed during the procedure.
		  If the optional argument <replaceable>top</replaceable>
		  contains a <classname>FSNode</classname> reference,
		  the searching is limited to the subtree governed by 
		  the node of <replaceable>top</replaceable>.
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">previous(<replaceable>top</replaceable>?)</literal></entry>
		<entry>
		  Return the previous node of the given node in the
		  natural ordering of the tree provided by the tree
		  structure (see the above description of the
		  <literal moreinfo="none">following</literal>
		  method for more detail on the ordering).
		  If the optional argument <replaceable>top</replaceable>
		  contains a <classname>FSNode</classname> reference,
		  the searching is limited to the subtree governed by 
		  the node of <replaceable>top</replaceable>.
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">children</literal></entry>
		<entry>
		  Return a list of all child-nodes of the given node.
		  The nodes in the list are ordered in their
		  structural order starting from the first son of their parent,
		  each node followed by its right brother.
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </sect3>
      <sect3>
	<title>Accessing other trees</title>
	<para>
	  To be able to describe a method to access any tree in a file
	  opened by <application moreinfo="none">TrEd</application> from macros we
	  must first take a more detailed look on the
	  <application moreinfo="none">TrEd</application>'s internal structures and
	  classes.
	</para>
	<para>
	  Macros have actually access to one of the most fundamental
	  structure of <application moreinfo="none">TrEd</application>: the so called
	  <quote>Grouping</quote> structure. This structure may be
	  accessed using the <literal moreinfo="none">$grp</literal> variable.  There
	  is really a lot of things that can be achieved by using this
	  variable in a proper way, but since actually not many
	  members of the <quote>Grouping</quote> structure are
	  guaranteed to be present or unchanged in the future versions
	  of <application moreinfo="none">TrEd</application>, here we pay our
	  attention only to a few of the most important.
	</para>
	<para>
	  The current file is accessed via the
	  <literal moreinfo="none">$grp-&gt;{FSFile}</literal> reference. This reference
	  is a pointer to an object of the <classname>FSFile</classname>
	  class. The following methods are provided for the class:
	</para>
	<table>
	  <title><classname>FSFile</classname> class methods</title>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Method name</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><literal moreinfo="none">filename</literal></entry>
		<entry>Returns current file's name.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">changeFilename(<replaceable>name</replaceable>)</literal></entry>
		<entry>Change current file's name.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">FS</literal></entry>
		<entry>Return a reference to an associated
		  <classname>FSFormat</classname> object.
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">trees</literal></entry>
		<entry>Return a list of all trees (i.e.
		  a list of <classname>FSNode</classname>
		  object references pointing to the roots
		  of the trees).
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">hint</literal></entry>
		<entry>Return the <application moreinfo="none">TrEd</application>'s
		hint pattern associated with the file.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">changeHint(<replaceable>pattern</replaceable>)</literal></entry>
		<entry>Change the <application moreinfo="none">TrEd</application>'s
		  hint pattern associated with the file.
		</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">pattern(<replaceable>n</replaceable>)</literal></entry>
		<entry>Return the <replaceable>n</replaceable>'th 
		  attribute pattern associated with the file.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">patterns</literal></entry>
		<entry>Return a list of all attribute patterns
		associated with the file.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">pattern_count</literal></entry>
		<entry>Return the number of display attribute patterns
		associated with the file.</entry>
	      </row>
	      <row>
		<entry><literal moreinfo="none">changePatterns(<replaceable>patterns</replaceable>)</literal></entry>
		<entry>Change the list of  attribute patterns
		  associated with the file.</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<para>
	  Actually, some other <classname>FSFile</classname> methods
	  exist, but as they are not intended to be used from the
	  macros directly, there is no reason to describe them here.
	</para>
	<para>
	  The most important of the methods above is the
	  <literal moreinfo="none">FS</literal> method which may be used to access the
	  <classname>FSFormat</classname> class object associated with
	  the given file. Similarly as in the case of
	  <classname>FSFile</classname> class, only the most importand
	  methods of the <classname>FSFormat</classname> class are
	  described here.
	</para>
	<table>
	  <title><classname>FSFormat</classname> class methods</title>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Method name</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row id="FS.order">
		<entry><literal>order</literal></entry>
		<entry>Return the name of the special numerical FS attribute
		  responsible for providing the tree order. This
		  attribute is declared in the FS file as <literal moreinfo="none">@N</literal>.
		</entry>
	      </row>
	      <row id="FS.sentord">
		<entry><literal>sentord</literal></entry>
		<entry>Return the name of the special numerical FS attribute
		  responsible for providing the order of the values
		  to form a <quote>sentence</quote>. This
		  attribute is declared in the FS file as
		  <literal moreinfo="none">@W</literal>.
		</entry>
	      </row>
	      <row id="FS.value">
		<entry><literal>value</literal></entry>
		<entry>Return the name of the special FS attribute
		  providing a descriptive value of the node used when
		  forming a <quote>sentence</quote>. This
		  attribute is declared in the FS file as
		  <literal moreinfo="none">@V</literal>.</entry>
	      </row>
	      <row>
		<entry><literal>hide</literal></entry>
		<entry>Return the name of the special FS attribute
		  which can be used to hide several subtrees. This
		  attribute is declared in the FS file as
		  <literal moreinfo="none">@H</literal>; a subtree is
		  hidden if its governing node's value for this
		  attribute is <literal moreinfo="none">'hide'</literal>.</entry>
	      </row>
	      <row>
		<entry><literal>isHidden(<replaceable>node</replaceable>)</literal></entry>
		<entry>Return true if the given <classname>FSNode</classname>
		<replaceable>node</replaceable> belongs to a hidden subtree.
		</entry>
	      </row>
	      <row>
		<entry><literal>isList(<replaceable>attr</replaceable>)</literal></entry>
		<entry>Return true if the given attribute is of list
		  type with a strictly defined set of possible
		  values. This type of attributes is declared by
		  the <literal moreinfo="none">@L</literal> header in the FS format.
		</entry>
	      </row>
	      <row>
		<entry><literal>listValues(<replaceable>attr</replaceable>)</literal></entry>
		<entry>Return a list of all possible values for the
		given attribute <replaceable>attr</replaceable>. Empty
		list is retured in case the attribute is not of the
		list type.
		</entry>
	      </row>
	      <row>
		<entry><literal>color(<replaceable>attr</replaceable>)</literal></entry>
		<entry>
		  Return one of the <literal moreinfo="none">Shadow</literal>,
		  <literal moreinfo="none">Hilite</literal>,
		  <literal moreinfo="none">XHilite</literal> and
		  <literal moreinfo="none">normal</literal>
		  values, depending on the
		  color specified in the FS file header.
		</entry>
	      </row>
	      <row>
		<entry><literal>attributes</literal></entry>
		<entry>Return a list containing names of all the
		attributes declared in the FS file header.</entry>
	      </row>
	      <row>
		<entry><literal>atno(<replaceable>n</replaceable>)</literal></entry>
		<entry>Return name of the
		  <replaceable>n</replaceable>'th
		  attribute.
		</entry>
	      </row>
	      <row>
		<entry><literal>indexOf(<replaceable>attr</replaceable>)</literal></entry>
		<entry>Return index of the attribute named 
		  <replaceable>attr</replaceable>, according
		  to the order in which attributes are defined in the
		  FS file.
		</entry>
	      </row>
	      <row>
		<entry><literal>count</literal></entry>
		<entry>Return the number of attributes defined in the FS file.</entry>
	      </row>
	      <row>
		<entry><literal>exists(<replaceable>attr</replaceable>)</literal></entry>
		<entry>Return true if attribute named
		  <replaceable>attr</replaceable> exists for the FS
		  file. If it is not the case, false (i.e. zero) is returned.
		</entry>
	      </row>
	      <row>
		<entry><literal>make_sentence(<replaceable>root_node</replaceable>)</literal></entry>
		<entry>Return a string forming a
		  <quote>sentence</quote> for the given node's subtree. 
		  The sentence is formed in the following way:
		  <orderedlist continuation="restarts" inheritnum="ignore">
		    <listitem>
		      <para>
			All the nodes of the
			<replaceable>root_node</replaceable> node's
			subtree and ordered according to their values
			for the special numerical FS sentence ordering
			attribute (see method <link linkend="FS.sentord"><literal moreinfo="none">sentord</literal></link>
			above). The special FS numbering attribute
			(see method <link linkend="FS.order"><literal moreinfo="none">order</literal></link>
			above) is used if no sentence ordering
			attribute is declared in the FS file.
		      </para>
		    </listitem>
		    <listitem>
		      <para>
			For every such node, its descriptive value
			(see
			method <link linkend="FS.order"><literal moreinfo="none">value</literal></link>
			above) is taken.
		      </para>
		    </listitem>
		    <listitem>
		      <para>
			The values obtained in this way and order
			are joined into a single string with fields
			separated by the value of
			<replaceable>separator</replaceable>.  </para>
		    </listitem>
		  </orderedlist>
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<para>
	  The methods <literal moreinfo="none">sentord</literal>,
	  <literal moreinfo="none">order</literal>,
	  <literal moreinfo="none">value</literal>, and
	  <literal moreinfo="none">hide</literal> described above
	  are useful especially in macros of
	  general purposes, where names of the corresponding
	  attributes are not known in advance. However, one should
	  keep in mind, that calling these functions too often
	  may result in considerably worse performence. 
	  The following example which actually re-implements the
	  <literal moreinfo="none">make_sentence</literal> method shows usage
	  of the <classname>FSFormat</classname> object member
	  methods.	  
	</para>
	<informalexample>
	  <programlisting format="linespecific">
sub MakeSentence {
  my ($top,$separator)=@_;   # two parameters

  $separator = ' ' unless defined($separator);
  my @nodes  = ();           # array to store the nodes in
  my $ord    = $grp-&gt;{FSFile}-&gt;FS-&gt;sentord ||
	       $grp-&gt;{FSFile}-&gt;FS-&gt;order;
  my $value  = $grp-&gt;{FSFile}-&gt;FS-&gt;value;

  my $node = $top;
  while ($node) {
    push @nodes, $node;      # collect all nodes in the nodes array
    $node = $node-&gt;following($top);
  }

  # Translation of the following mighty Perl construct to English:
  # 1. sort the collected nodes comparing their values for attribute $ord
  # 2. get their values using a "map" which maps element $_ to $_-&gt;{$value}
  # 3. join the values separating the fields with $separator
  # 4. and finally return the string.

  return join( $separator,
	       map { $_-&gt;{$value} }
	       sort { $a-&gt;{$ord} &lt;=&gt; $b-&gt;{$ord} } @nodes );
}
	  </programlisting>
	</informalexample>
	<para>
	  If the values of <literal moreinfo="none">value</literal>, <literal moreinfo="none">sentord</literal> or
	  possibly <literal moreinfo="none">order</literal> were evaluated each
	  time the Perl <literal moreinfo="none">sort</literal> or
	  <literal moreinfo="none">map</literal> function needs to compare or map
	  nodes, the performance of the code would considerably decrease.
	</para>
      </sect3>
    </sect2>
    <sect2 id="defaultmacros">
      <title>Pre-defined functions</title>
      <para>
	The above mentioned <filename moreinfo="none">tred.def</filename> file
	provides a set of pre-defined <application moreinfo="none">TrEd</application>
	macros. Pre-defined macros may be freely used in all other
	user-defined macros and are guaranteed to be updated and
	shipped with every version of <application moreinfo="none">TrEd</application>
	preserving their own API.  Most of the pre-defined macros
	wrap the key <application moreinfo="none">TrEd</application>'s internal
	function calls.  The following table briefly
	describes each of them.
      </para>
      <table>
	<title><application moreinfo="none">TrEd</application>'s pre-defined
	macros.</title>
	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>Macro name</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><literal moreinfo="none">Redraw</literal></entry>
	      <entry>Force <application moreinfo="none">TrEd</application> to redraw
		the current tree immediately. Hence
		<application moreinfo="none">TrEd</application> redraws the tree
		right after an interactively invoked macro finishes.
		The <literal moreinfo="none">Redraw</literal> macro is needed only under
		certain circumstances.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">SetDisplayAttrs(<replaceable>patterns</replaceable>)</literal></entry>
	      <entry>
		Use the given list of <application moreinfo="none">TrEd</application>'s 
		patterns for displaying attributes. See also  
		<xref linkend="attributes"/>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">SetBalloonPattern(<replaceable>pattern</replaceable>)</literal></entry>
	      <entry>
		Use the given <replaceable>pattern</replaceable>
		as a new hint pattern. See also  
		<xref linkend="attributes"/>.
 	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">SwitchContext(<replaceable>context_name</replaceable>)</literal></entry>
	      <entry>
		Switch to a different macro context. See
		<xref linkend="contexts"/> for more details about contexts.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">CurrentContext</literal></entry>
	      <entry>
		Return the name of the current macro context.  See
		<xref linkend="contexts"/> for more details about contexts.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">GotoTree(<replaceable>n</replaceable>)</literal></entry>
	      <entry>Display the <replaceable>n</replaceable>'th
		tree in the current file.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NextTree</literal></entry>
	      <entry>Display the next tree in the current file.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PrevTree</literal></entry>
	      <entry>Display the previous tree in the current file.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">GetOrd(<replaceable>node</replaceable>)</literal></entry>
	      <entry>Return value of the special numbering FS
		<link linkend="FS.order">attribute</link>. This macro actually returns the same value
		as
		<programlisting format="linespecific">$node-&gt;{ $grp-&gt;{FSFile}-&gt;FS-&gt;order }</programlisting>
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">CutNode(<replaceable>node</replaceable>)</literal></entry>
	      <entry>Cut the <replaceable>node</replaceable>'s subtree
		off the tree and return it.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PasteNode(<replaceable>node</replaceable>,<replaceable>parent</replaceable>)</literal></entry>
	      <entry>
		Paste the subtree of the node given by the
		<replaceable>node</replaceable> argument under the
		node given in the <replaceable>parent</replaceable>
		argument. <application moreinfo="none">TrEd</application> tries to
		place the top <replaceable>node</replaceable> of the
		pasted subtree between the present children of
		<replaceable>parent</replaceable> according to values
		of the special FS numbering <link linkend="FS.order">attribute</link>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NewTree</literal></entry>
	      <entry>Create a new tree <emphasis>before</emphasis> the current tree.
		The new tree consists of exactly one node.
		This node is activated and a reference to its
		<classname>FSNode</classname> object is returned.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NewTreeAfter</literal></entry>
	      <entry>Create a new tree <emphasis>after</emphasis> the current tree.
		The new tree consists of exactly one node.
		This node is activated and a reference to its
		<classname>FSNode</classname> object is returned.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">Save</literal></entry>
	      <entry>Save the current file.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">SaveAndNextFile</literal></entry>
	      <entry>Save the current file and open the next file
		in the current file-list.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">SaveAndPrevFile</literal></entry>
	      <entry>Save the current file and open the previous file
		in the current file-list.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">Find</literal></entry>
	      <entry>Open the <guilabel moreinfo="none">Find Node by
		  Attributes</guilabel> GUI dialog.
		See <link linkend="find"><guimenu moreinfo="none">Find...</guimenu></link> menu
	      command for more detail.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">FindNext</literal></entry>
	      <entry>
		Searches for the first node matching the criteria of the
		previous use of the <guimenuitem moreinfo="none">Find...</guimenuitem>
		menu command or <literal moreinfo="none">FindNode</literal>
		macro usage.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">FindPrev</literal></entry>
	      <entry>
		Searches for the previous node matching the criteria of the
		previous use of the <guimenuitem moreinfo="none">Find...</guimenuitem>
		menu command or <literal moreinfo="none">FindNode</literal>
		macro usage.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PlainNewSon(<replaceable>parent</replaceable>)</literal></entry>
	      <entry>Add a new child node to the given
	      <replaceable>parent</replaceable> and make it the
	      current node (by setting <literal moreinfo="none">$this</literal> to point to it).
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PlainDeleteNode(<replaceable>node</replaceable>)</literal></entry>
	      <entry>Delete the given <replaceable>node</replaceable>.
		The node must be a leaf of the tree (may not have
		any children) and must have a parent (may not be
		the root of the tree).
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NewRBrother(<replaceable>node</replaceable>)</literal></entry>
	      <entry><para>
		  Create a new brother of the given
		  <replaceable>node</replaceable> and recalculate the
		  special FS numbering attribute values in the whole tree
		  so that the new node is the first right sibling of the
		  given <replaceable>node</replaceable>.
		</para>
		<para>
		  If no node is given, this function operates on
		  <literal moreinfo="none">$this</literal> and <emphasis>resets</emphasis>
		  <literal moreinfo="none">$this</literal> to the newly created node. If some node is
		  given the value of <literal moreinfo="none">$this</literal> is preserved.
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NewLBrother(<replaceable>node</replaceable>)</literal></entry>
	      <entry>
		<para>
		  Create a new brother of the given
		  <replaceable>node</replaceable> and recalculate the
		  special FS numbering attribute values in the whole
		  tree so that the new node is the first left sibling
		  of the given <replaceable>node</replaceable>.
		</para>
		<para>
		  If no node is given, this function operates on
		  <literal moreinfo="none">$this</literal> and <emphasis>resets</emphasis>
		  <literal moreinfo="none">$this</literal> to the newly created node. If some node is
		  given the value of <literal moreinfo="none">$this</literal> is preserved.
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NewSon(<replaceable>parent</replaceable>)</literal></entry>
	      <entry>
		<para>
		  Create a new child of the given
		  <replaceable>parent</replaceable> node and
		  recalculate the special FS numbering attribute
		  values in the whole tree so that the new node is the
		  first node left to the given
		  <replaceable>parent</replaceable>.
		</para>
		<para>
		  If no parent node is given, this function operates
		  on <literal moreinfo="none">$this</literal> and <emphasis>resets</emphasis>
		  <literal moreinfo="none">$this</literal> to the newly created node. If a
		  parent node is given the value of <literal moreinfo="none">$this</literal> is
		  preserved.
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">DeleteThisNode</literal></entry>
	      <entry>Delete the current node
		 and
		recalculate the special FS numbering attribute values
		in the whole tree so that there is
		no gap in the numbering. If the current
		node is not a leaf or if it is the root of the current
		tree, this macro does nothing.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">CopyValues</literal></entry> 
	      <entry>
		Copy the values of all the attributes except the special
		FS numbering attribute of the current node to a global
		hash variable named
		<literal moreinfo="none">%ValuesClipboard</literal>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PasteValues</literal></entry>
	      <entry>
		Replace the values of the current node's attributes
		by those stored in the global hash variable
		named <literal moreinfo="none">%ValuesClipboard</literal>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NextNode(<replaceable>node</replaceable>,<replaceable>top</replaceable>)</literal></entry>
	      <entry>
		Return the first displayed node following the given
		<replaceable>node</replaceable>
		in the subtree of <replaceable>top</replaceable>.
		This function behaves in the same manner as the
		<programlisting format="linespecific"><replaceable>node</replaceable>-&gt;following(<replaceable>top</replaceable>)</programlisting>
		method, except it works only on the nodes which are
		actually visible according to the state of the
		<menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Show Hidden Nodes</guimenuitem>
		</menuchoice> menu item.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PrevNode(<replaceable>node</replaceable>,<replaceable>top</replaceable>)</literal></entry>
	      <entry>
		Return the first displayed node preceding the given
		<replaceable>node</replaceable>
		in the subtree of <replaceable>top</replaceable>.
		This function behaves in the same manner as the
		<programlisting format="linespecific"><replaceable>node</replaceable>-&gt;previous(<replaceable>top</replaceable>)</programlisting>
		method, except it works only on the nodes which are
		actually visible according to the state of the
		<menuchoice moreinfo="none">
		  <guimenu moreinfo="none">View</guimenu>
		  <guimenuitem moreinfo="none">Show Hidden Nodes</guimenuitem>
		</menuchoice> menu item.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NextVisibleNode(<replaceable>node</replaceable>,<replaceable>top</replaceable>)</literal></entry>
	      <entry>
		Return the first visible node following the given
		<replaceable>node</replaceable>
		in the subtree of <replaceable>top</replaceable>.
		This function behaves in the same manner as the
		<programlisting format="linespecific"><replaceable>node</replaceable>-&gt;following(<replaceable>top</replaceable>)</programlisting>
		method, except that nodes of hidden subtrees are
		skipped.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">PrevVisibleNode(<replaceable>node</replaceable>,<replaceable>top</replaceable>)</literal></entry>
	      <entry>		
		Return the first visible node preceding the given
		<replaceable>node</replaceable>
		in the subtree of <replaceable>top</replaceable>.
		This function behaves in the same manner as the
		<programlisting format="linespecific"><replaceable>node</replaceable>-&gt;previous(<replaceable>top</replaceable>)</programlisting>
		method, except that nodes of hidden subtrees are
		skipped.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">IsHidden(<replaceable>node</replaceable>)</literal></entry>
	      <entry>Return true if the given
		<replaceable>node</replaceable>
		is member of a hidden subtree. This macro is only
		an abbreviation for
		<programlisting format="linespecific">$grp-&gt;{FSFile}-&gt;FS-&gt;isHidden(<replaceable>node</replaceable>)</programlisting>
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">Hide(<replaceable>node</replaceable>)</literal></entry>
	      <entry>Hide the given node. Return true if the function
		is successfull.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">GetNodes(<replaceable>top</replaceable>?)</literal></entry>
	      <entry>Return the list of all nodes
		in the subtree of the given
		<replaceable>top</replaceable>
		node (or the whole current tree if no <replaceable>top</replaceable>
		is given). The list returned is ordered in
		the natural structure ordering.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">GetVisibleNodes(<replaceable>top</replaceable>?)</literal></entry>
	      <entry>Return the list of all visible nodes
		in the subtree of the given
		<replaceable>top</replaceable>
		node (or the whole current tree if no <replaceable>top</replaceable>
		is given). The list returned is ordered in
		the natural structure ordering and
		all members of hidden subtrees are skipped.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">NormalizeOrds(<replaceable>listref</replaceable>)</literal></entry>
	      <entry>
		Adjusts the special FS numbering attribute of 
		every node of the list referenced by the 
		<replaceable>listref</replaceable> argument so that
		the value for the attribute corresponds to the
		order of the node in the list.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">SortByOrd(<replaceable>listref</replaceable>)</literal></entry>
	      <entry>
		Sort the list of nodes referenced by the
		<replaceable>listref</replaceable> argumnt according
		to the values of the special FS numbering attribute.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">RepasteNode(<replaceable>node</replaceable>)</literal></entry>
	      <entry>
		Cut the given <replaceable>node</replaceable> and 
		paste it immediately on the same parent so that
		its structural position between its parent children
		is brought to correspondence
		with the values of the special FS numbering attribute.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ShiftNodeRightSkipHidden(<replaceable>node</replaceable>)</literal></entry>
	      <entry>
		Shift the current node in the tree to the right
		leaping over all hidden subtress by modifying
		the tree structure and value of the special FS
		numbering attribute appropriately. 
	      </entry>
	    </row>
	    <row>	     
	      <entry><literal moreinfo="none">ShiftNodeLeftSkipHidden</literal></entry>
	      <entry>
		Shift the current node in the tree to the left
		leaping over all hidden subtress by modifying
		the tree structure and value of the special FS
		numbering attribute appropriately. 
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ShiftNodeRight</literal></entry>
	      <entry>
		Shift the current node in the tree to the right
		by modifying
		the tree structure and value of the special FS
		numbering attribute appropriately. 
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ShiftNodeLeft</literal></entry>
	      <entry>
		Shift the current node in the tree to the right
		by modifying
		the tree structure and value of the special FS
		numbering attribute appropriately. 
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">AtrNo(<replaceable>n</replaceable>)</literal></entry>
	      <entry>Retrun name of the
		<replaceable>n</replaceable>'th
		attribute defined in the FS file. This macro only
		abbreviates the following expression:
		<programlisting format="linespecific">$grp-&gt;{FSFile}-&gt;FS-&gt;atno(<replaceable>n</replaceable>)</programlisting>
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ValNo(<replaceable>n</replaceable>,<replaceable>string</replaceable>)</literal></entry>
	      <entry>Return the <replaceable>n</replaceable>'th field
		of the given <replaceable>string</replaceable> where
		individual fields are separated by <quote><literal moreinfo="none">|</literal></quote>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">Union(<replaceable>string-a</replaceable>,<replaceable>string-b</replaceable>)</literal></entry>
	      <entry>Return a string consisting of
		<literal moreinfo="none">|</literal>-separated fields
		which form a pairwise disjoint set of the
		<literal moreinfo="none">|</literal>-separated fields of
		  the given strings
	      <replaceable>string-a</replaceable>
		  and <replaceable>string-b</replaceable>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">Interjection</literal></entry>
	      <entry>Return a string consisting of
		<literal moreinfo="none">|</literal>-separated fields
		which form the interjection of the sets of 
		<literal moreinfo="none">|</literal>-separated fields of
		  the given strings
	      <replaceable>string_a</replaceable>
		  and <replaceable>string_b</replaceable>.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ListSplit(<replaceable>string</replaceable>)</literal></entry>
	      <entry>Split the given string
		of <literal moreinfo="none">|</literal>-separated fields
		and return a list of the individual fields.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ListJoin(<replaceable>fields</replaceable>)</literal></entry>
	      <entry>Form a string of <literal moreinfo="none">|</literal>-separated
		fields from the given list of fields.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ListEq(<replaceable>string_a</replaceable>,<replaceable>string_b</replaceable>)</literal></entry>
	      <entry>Compare the sets of
		<literal moreinfo="none">|</literal>-separated 
		fields of the two given strings. Return
		true if the sets contain the same elements; return
		false otherwise.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">ListAssign(<replaceable>string</replaceable>,<replaceable>n</replaceable>,<replaceable>value</replaceable>)</literal></entry>
	      <entry>Return the given string of	<literal moreinfo="none">|</literal>-separated 
		fields, except that the
		<replaceable>n</replaceable>'th
		field in the <replaceable>string</replaceable> is
		replaced by the given <replaceable>value</replaceable>.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="hooks">
      <title>Hooks: automatically executed macros</title>
      <para>
	There is a special set of macros that was not
	mentioned yet. These macros, called hooks, are automatically
	executed by <application moreinfo="none">TrEd</application> on certain
	occasions. By defining such macros a little more of the
	<application moreinfo="none">TrEd</application>'s implicit behaviour may be
	influenced, for example the execution of a planned action may
	be aborted.
      </para>
      <para>
	Hooks differ from other macros in the following aspects:
	<orderedlist continuation="restarts" inheritnum="ignore">
	  <listitem>
	    <para>User cannot choose a name for a hook; on the
	      contrary hook is recognized as a macro having a
	      special name identifying it as being a certain hook.
	    </para>
	  </listitem>
	  <listitem>
	    <para>Sometimes parameters are passed to hooks.</para>
	  </listitem>
	  <listitem>
	    <para>No modifications of the tree or current node
	      are reflected after the hook returns, i.e. the tree is not
	      redrawn, changes to <literal moreinfo="none">$this</literal> variable
	      are not reflected. If necessary, a hook must provide this
	      functionality itself.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Unlike macros, hooks are not expected to modify
	      the tree unless they explicitly state that by setting the
	      <literal moreinfo="none">$FileChanged</literal> to <literal moreinfo="none">1</literal>.
	    </para>
	  </listitem>
	</orderedlist>
      </para>
      <para>
	There is a special class of hooks that may be used to prevent
	<application moreinfo="none">TrEd</application> from finishing a planned
	action, e.g. enabling the user to modify certain attribute
	value etc. The value returned by a hook of this class is checked and
	the action is aborted in case the value equals to
	<quote><literal moreinfo="none">stop</literal></quote>.
      </para>
      <para>In the following table the hooks which may be used to
	prevent <application moreinfo="none">TrEd</application> from executing a
	certain action are marked by <literal moreinfo="none">yes</literal> in the
	column <quote>Stop</quote>.
      </para>
      <table>
	<title>Hooks</title>
	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry>Name</entry>
	      <entry>Stop</entry>
	      <entry>Hook event description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><literal moreinfo="none">start_hook</literal></entry>
	      <entry>yes</entry>
	      <entry>Executed on start-up, before the main event loop
		is entered.</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">exit_hook</literal></entry>
	      <entry>no</entry>
	      <entry>Executed when the main window
		of <application moreinfo="none">TrEd</application> is destroyed,
		before the user is prompted to save the modified files.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">do_edit_attrs_hook(<replaceable>attr</replaceable>,<replaceable>node</replaceable>)</literal></entry>
	      <entry>yes</entry>
	      <entry>Executed before a dialog window for editing an
		attribute value is displayed (usually when the 
		user double-clicks the displayed attribute value).</entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">enable_attr_hook(<replaceable>attr</replaceable>,
		  <replaceable>type</replaceable>)</literal></entry>
	      <entry>yes</entry>
	      <entry>
		Executed before any text field for an attribute value
		modification or list of possible values
		is created. If the hook returns
		<quote><literal moreinfo="none">stop</literal></quote>,
		the field or list is made read-only. The
		<replaceable>type</replaceable>
		argument may have one of the following values:
		<literal moreinfo="none">ambiguous</literal> (in case
		of multiple values or an attribute with
		a given list of possible values) or
		<literal moreinfo="none">normal</literal>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>goto_file_hook</literal></entry>
	      <entry>yes</entry>
	      <entry>
		Executed before the next or previous file in the current
		file-list is opened.
	      </entry>
	    </row>
	    <!-- row>
	      <entry>goto_tree_hook</entry>
	      <entry>yes</entry>
	      <entry>
		Executed before a different tree is displayed.
	      </entry>
	    </row -->
	    <row>
	      <entry><literal>file_opened_hook</literal></entry>
	      <entry>no</entry>
	      <entry>Executed after a file is opened but before the first
		tree is displayed.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>file_resumed_hook</literal></entry>
	      <entry>no</entry>
	      <entry>Executed after an already open (kept) file is resumed.</entry>
	    </row>
	    <row>
	      <entry><literal>pre_switch_context_hook(<replaceable>previous</replaceable>,<replaceable>next</replaceable>)</literal></entry>
	      <entry>yes</entry>
	      <entry>Executed before the macro 
		context is changed (see <xref linkend="contexts"/>).
		The <replaceable>previous</replaceable> argument
		contains the name of the
		current context while
		<replaceable>next</replaceable> contains the name of the
		future mode.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>about_file_hook(<replaceable>stringref</replaceable>)</literal></entry>
	      <entry>no</entry>
	      <entry>This hook is executed before the
		<guilabel moreinfo="none">About</guilabel> window is displayed.
		The hook takes one argument: a reference to a scalar
		variable. The hook may populate the referenced
		variable with any information which is then displayed
		as a part of the <guilabel moreinfo="none">About</guilabel> window message.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>customize_attrs_hook</literal></entry>
	      <entry>yes</entry>
	      <entry>Executed before the dialog for customizing attribute
		patterns is displayed.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>sort_attrs_hook(<replaceable>attibsref</replaceable>)</literal></entry>
	      <entry>no</entry>
	      <entry>Executed when attribute names are pre-sorted
		(see <literal moreinfo="none">SortAttributes</literal>
		configuration options). The
		<replaceable>attribsref</replaceable>
		parameter passed to the hook is a reference pointing
		to a list variable. The list is populated with all
		attribute names and the hook may modify the list by
		changing the order of its elements
		or by removing certain elements from the list.
		If then non-zero value is returned by the hook,
		the (possibly modified) list is used for displaying purposes 
		without any further sorting.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>after_edit_node_hook(<replaceable>node</replaceable>,<replaceable>result</replaceable>)</literal></entry>
	      <entry>no</entry>
	      <entry>Executed after a node's attribute values were edited
		in the <guilabel moreinfo="none">Edit Node Attributes</guilabel>
		dialog window. The <replaceable>result</replaceable>
		argument contains <literal moreinfo="none">1</literal> if the user pressed
		<guibutton moreinfo="none">Ok</guibutton> button to close the dialog,
		and it contains <literal moreinfo="none">0</literal> if the user
		closed the dialog with the
	      <guibutton moreinfo="none">Close</guibutton> button.
	      </entry> 
	    </row>
	    <row>
	      <entry><literal>after_edit_attr_hook</literal></entry>
	      <entry>no</entry>
	      <entry>Executed after a node's attribute was edited
		in the <guilabel moreinfo="none">Edit Attribute</guilabel>
		dialog window. The <replaceable>result</replaceable>
		argument contains <literal moreinfo="none">1</literal> if the user pressed
		<guibutton moreinfo="none">Ok</guibutton> button to close the dialog,
		and it contains <literal moreinfo="none">0</literal> if the user
		closed the dialog with the
	      <guibutton moreinfo="none">Close</guibutton> button.
	      </entry> 
	    </row>
	    <row>
	      <entry><literal>get_value_line_hook (<replaceable>fsfile</replaceable>,<replaceable>treeNo</replaceable>)</literal></entry>
	      <entry>no</entry>
	      <entry>Supply custom value-line content based on given
		<replaceable>fsfile</replaceable> and
		<replaceable>treeNo</replaceable>.
		The value returned from the hook may be either 
		a string to appear in the value line on the top
		of TrEd's main window or an array reference
		consisting of a list of array references
		representing individual nodes. In the later case,
		the array references representing individual nodes
		must be of the form
		<literal moreinfo="none">[<replaceable>text</replaceable>,
		  <replaceable>node</replaceable>,<replaceable>options...</replaceable>]</literal>
		where <replaceable>text</replaceable> is a text
		to appear on the value-line,
		<replaceable>node</replaceable>
		is the node represented by the array reference
		and <literal moreinfo="none">options</literal> is arbitrary set 
		of strings. If these strings are of the form
		<literal moreinfo="none">-option =&gt; value</literal>
		where <literal moreinfo="none">option</literal> is
		one of <literal moreinfo="none">foreground</literal>,
		<literal moreinfo="none">background</literal>,
		<literal moreinfo="none">underline</literal>,
		they are used to alter visual appearance
		of the corresponding part of the text displayed on the
		value-line. All other strings are ignored.
	      </entry>
	    </row>
	    <row>
	      <entry><literal moreinfo="none">highlight_value_line_tag_hook</literal></entry>
	      <entry>no</entry>
	      <entry>Invoked every time a node is selected. The hook should
		return a tag associated with some text in the value
		line. The text is then highlighted in the value line.</entry>
	    </row>
	    <row>
	      <entry><literal>get_nodelist_hook (<replaceable>fsfile</replaceable>,<replaceable>treeNo</replaceable>,<replaceable>show_hidden</replaceable>)</literal></entry>
	      <entry>no</entry> <entry>This hook may be used to supply
	      custom node ordering given a fsfile, treeNo and hidden
	      node visibility state.  If used, it should return a
	      two-element array reference with the first element being
	      a array reference to a list of nodes to be displayed (in
	      a left-to-right order) and the second element being a
	      node to be set up as the initial active node.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>node_release_hook
		(<replaceable>node</replaceable>,
		<replaceable>target-node</replaceable>,
		<replaceable>mod</replaceable>)</literal></entry>
		<entry>yes</entry> <entry>Called when a node is released
		over another node after a mouse
		drag. <replaceable>mod</replaceable> is a keyboard
		modifier string, such as <literal moreinfo="none">Control</literal>,
		<literal moreinfo="none">Shift</literal>,
		<literal moreinfo="none">Alt</literal> or
		<literal moreinfo="none">Meta</literal>.
		  It can also be empty.  If
		<literal moreinfo="none">mod</literal> is empty, the hook should
		either result 'stop', to disable rehanging
		<replaceable>node</replaceable> on
		<replaceable>target-node</replaceable> or 
		take no action. In all other cases, the hook may
		reorganize the tree in arbitrary way, but
		it should call <literal moreinfo="none">Redraw_FSFile_Tree()</literal>
		and set <literal moreinfo="none">$FileChanged=1</literal> if needed.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>node_doubleclick_hook
		(<replaceable>node</replaceable>,
		<replaceable>mod</replaceable>)</literal></entry>
		<entry>no</entry> 
	      <entry>Called when a node is double-clicked
		  while a modifier key was pressed.
		  <replaceable>mod</replaceable> is a keyboard
		modifier string, such as <literal moreinfo="none">Control</literal>,
		<literal moreinfo="none">Shift</literal>,
		<literal moreinfo="none">Alt</literal> or
		<literal moreinfo="none">Meta</literal>.
		  The hook is responsible for calling
		<literal moreinfo="none">Redraw_FSFile_Tree()</literal> or
		similar default macro to redraw the tree as well as for 
		setting <literal moreinfo="none">$FileChanged=1</literal> if needed.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>text_doubleclick_hook
		(<replaceable>node</replaceable>,
		  <replaceable>attr</replaceable>,
		<replaceable>mod</replaceable>)</literal></entry>
		<entry>no</entry> 
	      <entry>Called when an attribute in a displayed
		  node or edge label is double-clicked
		  while a modifier key was pressed.
		  <replaceable>mod</replaceable> is a keyboard
		modifier string, such as <literal moreinfo="none">Control</literal>,
		<literal moreinfo="none">Shift</literal>,
		<literal moreinfo="none">Alt</literal> or
		<literal moreinfo="none">Meta</literal>.
		  <replaceable>node</replaceable> is the  FSNode object
		  whose attribute was clicked.
		  <replaceable>attr</replaceable> is name of the
		  attribute which was clicked.
		  The hook is responsible for calling
		<literal moreinfo="none">Redraw_FSFile_Tree()</literal> or
		similar default macro to redraw the tree as well as for 
		setting <literal moreinfo="none">$FileChanged=1</literal> if needed.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>node_moved_hook (<replaceable>node</replaceable>,
		<replaceable>old-parent)</replaceable></literal></entry>
	      <entry>no</entry>
	      <entry>called after a node is moved using a mouse</entry>
	    </row>
	    <row>
	      <entry id="get_status_line_hook">get_status_line_hook</entry>
	      <entry>no</entry>
	      <entry>Supply status-line content.
		Status line is an experimental feature which can be
		enabled by setting
		<literal moreinfo="none">displayStatusLine</literal> configuration
		option to <literal moreinfo="none">1</literal>.
		This hook is responsible for providing the content for
		a status-line. The value returned from 
		<literal moreinfo="none">get_status_line_hook</literal> should
		have the form 
		<literal moreinfo="none">[<replaceable>field-definitions</replaceable>,
		  <replaceable>style-definitions</replaceable>,
		  ]</literal>.
		<replaceable>field-definitions</replaceable>
		is an array reference of the form
		<literal moreinfo="none">[<replaceable>text1</replaceable>,<replaceable>tags1</replaceable>,
		  <replaceable>text2</replaceable>,<replaceable>tags2</replaceable>,...
		  ]</literal> specifying
		one or more pieces of textual content of the
		status-line. Each piece of text is followed
		by another array reference, containing a list of
		<literal moreinfo="none">tags</literal> associated with the text.
		Tags may be arbitrary strings.
		<replaceable>style-definitions</replaceable> is 
		an array reference which can map some tags
		to visual appearance attributes. It has a form
		<literal moreinfo="none">[<replaceable>tag1</replaceable>,
		  [<replaceable>option =&gt; value</replaceable>,
	      <replaceable>option =&gt; value</replaceable>, ...],
		  <replaceable>tag2</replaceable>,
		  [<replaceable>option =&gt; value</replaceable>,
		  <replaceable>option =&gt; value</replaceable>, ...], ...
		  ]</literal>
		where <replaceable>option</replaceable> may
		be one of <literal moreinfo="none">-foreground</literal>,
		<literal moreinfo="none">-background</literal> and <literal moreinfo="none">-underline</literal>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>status_line_doubleclick_hook <replaceable>tags...</replaceable></literal></entry>
	      <entry>no</entry>
	      <entry>Called when users double-clicks the status-line.
		Arguments are a list of tags associated with
		the clicked field (see above). Tag may be arbitrary
		strings and it is up to user's will to
		set up some useful convention for tagging text of
		the status-line.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="contexts">
      <title>Using different sets of macros in different situations</title>
      <subtitle>Name-spaces, contexts and binding contexts</subtitle>
      <para>
	<application moreinfo="none">TrEd</application> adopts mechanisms similar
	e.g. to <application moreinfo="none">Emacs</application> major-modes which
	allow the user to safely create several sets of macros with possibly
	coliding key and menu bindings as well as macro names.
	These mechanisms are called <emphasis>contexts</emphasis>, or
	more specifically: name-spaces and binding contexts.
      </para>
      <para>
	To prevent macros from colliding or modifying the internal
	<application moreinfo="none">TrEd</application> variables or functions the
	Perl concept of packages or namespaces is used.  Unless the
	Perl <literal moreinfo="none">package</literal> command is used, each macro
	belongs to a default package (or name-space) called
	<literal moreinfo="none">TredMacro</literal>.  Beside the user-defined macros,
	the pre-defined macros are defined within this package.
      </para>
      <para>
	New package named say <replaceable>MyPackage</replaceable>
	is created using the following command:
	<literallayout class="normal" format="linespecific">package <replaceable>MyPackage</replaceable>;</literallayout>
	To be able to call macros defined in the
	<literal moreinfo="none">TredMacro</literal> package (e.g. the pre-defined
	macros) without having to prefix their names with one of
	<literal moreinfo="none">TredMacro-&gt;</literal> or
	<literal moreinfo="none">TredMacro::</literal> prefixes the following command may
	be used to import the <literal moreinfo="none">TredMacro</literal> name-space
	to the current package's name-space:
	<literallayout class="normal" format="linespecific">import TredMacro;</literallayout>
	Now all the subsequent macro definitions (or global variable
	declarations)
	are created within
	the <replaceable>MyPackage</replaceable> name-space unless
	other <literal moreinfo="none">package</literal> command occurs. 
	Thus the following example defines a macro named
	<replaceable>my_macro</replaceable> in a new name-space
	of the <replaceable>MyPackage</replaceable> package:
      </para>
      <informalexample>
	<programlisting format="linespecific">
package MyPackage;
import TredMacro;

sub my_macro {
  # macro code comes here 
}
</programlisting>
      </informalexample>
      <para>
	To call the <replaceable>my_macro</replaceable>
	of the previous example	from a different package
	than <replaceable>MyPackage</replaceable>,  the full
	package name must be given together with the name of the
	macro:
	<programlisting format="linespecific">
MyPackage::my_macro();   # call to a macro defined in MyPackage
</programlisting>
      </para>
      <para>
	In the interactive work, name-space are combined with
	a concept of <emphasis>binding-contexts</emphasis>.
	Binding contexts usually correspond to the package names.
	Analogously to the <literal moreinfo="none">package</literal> command, a
	special directive exists for creating or switching a binding
	context, however in this case, more then one binding-contexts
	may be used at once:
	<literallayout class="normal" format="linespecific">#binding-context <replaceable>context_name_1</replaceable> <replaceable>context_name_2</replaceable> ...</literallayout>
	The default binding-context is again named
	<literal moreinfo="none">TredMacro</literal>. To switch to a new context,
	say <literal moreinfo="none">MyContext</literal>, the following directive
	should be used:
	<literallayout class="normal" format="linespecific">#binding-context MyContext</literallayout>
	Now, all the subsequent directives <literal moreinfo="none">#bind</literal>,
	<literal moreinfo="none">#insert</literal>, <literal moreinfo="none">#unbind-key</literal>,
	and <literal moreinfo="none">#remove-menu</literal>
	would apply to this context
	and all the bound macros, when invoked, will be first searched
	in the package named <literal moreinfo="none">MyContext</literal>.
      </para>
      <para>
	There is a separate submenu created for each binding-context
	in the <guimenuitem moreinfo="none">User-defined</guimenuitem> menu. In
	<application moreinfo="none">TrEd</application> there may be only one context
	active at one time. The active context may be choosen from the
	menu on the right end of the menu bar. If a keyboard shortcut
	is pressed, <application moreinfo="none">TrEd</application> first searches for a
	macro bound to the shortcut within the active binding-context
	and if such macro exists, <application moreinfo="none">TrEd</application>
	invokes it. In this case, the macro is supposed to be defined
	or imported in a package of the same name as is the name of
	the active context. If no macro is
	bound to the shortcut within the active binding-context,
	<application moreinfo="none">TrEd</application> tries to find a binding in the
	default <literal moreinfo="none">TredMacro</literal> context. The macro
	is then supposed to be defined within the
	<literal moreinfo="none">TredMacro</literal> package.
	If the search
	fails, no action is taken. The same holds for hooks as well.
      </para>
      <para>The following example shows how to create a set of macros
	which enable <application moreinfo="none">TrEd</application> to automatically
	decide which context to use when a file is opened. It is
	quite similar to the <application moreinfo="none">Emacs</application> concept
	of <quote>auto-modes</quote>, except that content of the file
	is considered here, not the file-name extension. In the
	example, existence of a certain attribute is used
	to decide which context to use. The example is extracted form
	the set of macros written for the annotation of the
	<application moreinfo="none">Prague Dependency Treebank</application>.
	There are two contexts for annotation: for the
	<quote>Analytic</quote>
	and <quote>Tectogrammatic</quote> layers. The
	<quote>tectogrammatic</quote>
	trees may be easily distinguished from the
	<quote>analytical</quote> ones because (among others)
	a special attribute named <literal moreinfo="none">TR</literal> is defined for
	them.
      </para>
      <example>
	<title>Using contexts</title>
	<programlisting format="linespecific">
package TredMacro; # Ensure we are in the default package
                   # (This may not be necessary.)

# we use a hook to set the context
sub file_opened_hook {
  if ($grp-&gt;{FSFile}-&gt;FS-&gt;exists('TR')) {
    SwitchContext('Tectogrammatic'); 
  } else {
    SwitchContext('Analytic');
  }
}

#binding-context Analytic
package Analytic;
import TredMacro;


#bind SubtreeAfunAssign to Ctrl+Shift+F1
sub SubtreeAfunAssign {
   # automatic assignment of some analytical attributes
}

sub ReorderTree {
   # ...
}


# the following binding of ReorderTree will apply to both binding contexts

#binding-context Analytic Tectogrammatic
#bind ReorderTree to Ctrl+R

#binding-context Tectogrammatic
package Tectogrammatic;
import Analytic;   # all macros of the Analytic package (eg. ReorderTree) 
	           # will now be available here directly

#bind SubtreeAfunAssign to Ctrl+Shift+F1
sub SubtreeFuncAssign {
   # automatic assignment of some tectogrammatical attributes
}
</programlisting>
      </example>
    </sect2>
  </sect1>
</article>
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:no
sgml-shorttag:yes
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/home/pajas/lib/sgml-tools/dtd/catalog" "/home/pajas/lib/sgml/iso-entities-8879.1986/iso-entities.cat /home/pajas/share/sgml/dtd/docbook/3.1/docbook.cat /home/pajas/share/sgml/stylesheets/docbook/catalog /home/pajas/share/sgml/entities/iso-entities-8879.1986/iso-entities.cat /home/pajas/share/sgml/dtd/jade/dsssl.cat /home/pajas/share/sgml/stylesheets/sgmltools/sgmltools.cat /home/pajas/share/sgml/dtd/sgmltools/catalog")
sgml-local-ecat-files:nil
End:
-->
