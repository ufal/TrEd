# -*- cperl -*-

=head1 Configuration script for automated installation of TrEd dependencies 

This file contains configuration for the ./install script in this
directory.  It lists modules to install. Each module is specified by
its filename without version number and extension. The files are
expected to be found in the same directory as this file and the
install script.

This configuration defines dependencies for TrEd.

To install the modules, run ./install in this directory.

See ./install --help for more information.

=head1 AUTHOR

Petr Pajas <pajas@matfyz.cz>

Copyright (c) 2005 Petr Pajas, All rights reserved.

=cut

#     XML-LibXML-Common-

sub package_dir { 'packages' }

sub perl_modules {
     # Test-Harness-
     # Test-Simple-
     # IPC-Run3-
     # Probe-Perl-
     # Test-Script-
  qw(
     Test-Simple-
     Capture-Tiny-
     Perl-OSType-
     ExtUtils-MakeMaker-
     ExtUtils-CBuilder-
     ExtUtils-ParseXS-
     Test-Simple-
     Perl-OSType-
     version-
     Module-Metadata-
     Version-Requirements-
     CPAN-Meta-YAML-
     JSON-PP-
     Parse-CPAN-Meta-
     File-Temp-
     CPAN-Meta-Requirements-
     CPAN-Meta-
     Module-Build-
     UNIVERSAL-DOES-
     File-Which-
     Text-Iconv-
     Tie-IxHash-
     Tk-
     Syntax-Highlight-Perl-
     Tk-CodeText-
     Compress-Raw-Zlib-
     Compress-Raw-Bzip2-
     IO-Compress-
     XML-NamespaceSupport-
     XML-SAX-Base-
     XML-SAX-
     XML-LibXML-
     XML-LibXSLT-
     XML-CompactTree-
     XML-CompactTree-XS-
     XML-NodeFilter-
     XML-LibXML-Iterator-
     XML-Filter-BufferText-
     XML-SAX-Writer-
     XML-Writer-
     Text-Balanced-
     Parse-RecDescent-
     Graph-
     Graph-ChuLiuEdmonds-
     Graph-Kruskal-
     PerlIO-gzip-
           Sub-Identify-
         SUPER-
       Test-MockModule-
     Archive-Zip-
     Tk-MatchEntry-
     IO-String-
     Class-Inspector-
     File-ShareDir-
     Treex-PML-
     IO-Zlib-
         ExtUtils-Helpers-
         ExtUtils-Config-
         ExtUtils-InstallPaths-
       Module-Build-Tiny-
     Readonly-
     Font-TTF-
     PDF-API2-
    )
}

#      XML-JHXML-
#
# Will not distribute XML::JHXML with Unix/Linux TrEd anymore due to compilation issues
#

sub package_real_module {
  (
  )
}


# Get list of C libraries to be downloaded/installed.
sub c_modules {
  qw(libxml2- libxslt-)
}


# Get hash with fixed versions for selected C modules to be downloaded.
# If a module is missing on this list, newest version is downloaded.
# Note: These versions should be updated from time to time (last update 22.11.2016)
sub c_module_versions {
  (
    'libxml2-' => '2.9.3',
    'libxslt-' => '1.1.29',
  )
}


sub version_from {
  (
    'IO-Compress-' => 'IO::Compress::Base',
  )
}

sub ignore_module_build_fail {
  (
    'XML-JHXML-' => 1,
    'Tk-MatchEntry-' => 1,
  )
}

sub force_build {
  (
   (($^O eq 'darwin') ? ('Tk-' => 1) : ()),
   'XML-LibXML-Common-' => ['libxml2-'],
   'XML-LibXML-' => { 'libxml2-' =>
		      sub {
                        $_[0] eq `$^X -MXML::LibXML -e "print XML::LibXML::LIBXML_DOTTED_VERSION"` ? 0 : 1
		      },
		    },
   'XML-LibXSLT-' => { 'libxslt-' =>
		      sub {
                        $_[0] eq `$^X -MXML::LibXSLT -e "print XML::LibXSLT::LIBXSLT_DOTTED_VERSION"` ? 0 : 1
		      },
		    },
#   'libxslt-' => '--with-libxml-prefix="'.$C_PREFIX.'"'
  )
}

sub module_build_flags {
  if ($^O eq 'darwin') {
    my ($sdk) =
      map { $_->[0] }
      sort { $b->[1]<=>$a->[1] or $b->[2]<=>$a->[2] }
      map { /MacOSX(\d+)\.(\d+)/ ? [$_,$1,$2] : [$_,0,0] }
      grep { -d $_ }
      glob("/Developer/SDKs/MacOSX*.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX*.sdk");
    if ($sdk) {
      $extra_opts=" X11INC=$sdk/usr/X11R6/include";
    }
  }
  (
   'Tk-' => 'XFT=1'.$extra_opts,
   'XML-LibXML-' => 'SKIP_SAX_INSTALL=1',
#   'libxslt-' => '--with-libxml-prefix="'.$C_PREFIX.'"'
  )
}

sub module_build_input {
  (
   'XML-SAX-' => 'echo Y', # answer a XML::SAX::Base Makefile.PL question
  )
}

sub patches {
  (
   # fixed in Tk 804.030
   # https://bugs.gentoo.org/show_bug.cgi?id=345987
   #'Tk-' => 'patches/Tk-xlib-h.patch',

   # Don't fail when can't modify global site Perl SAX configuration

   #'XML-LibXML-' => 'patches/XML-LibXML-Makefile.patch',	# ... no longer required
   'XML-LibXSLT-' => 'patches/XML-LibXSLT-Makefile.patch',
  )
}

sub no_test {
  'Tk-' => 2,
  'File-Which-' => 2, # tests require too many modules
  # 'XML-SAX-Writer-' => 1
}

my $platform = $^O;
if ($platform eq 'linux') {
  my $lsb = `lsb_release -i`;
  if ($lsb =~ /ubuntu|debian/i) {
    $platform='debian';
  }
}
sub _dpkg_check {
  my ($pkg)=@_;
  my $status = `LANG=C dpkg-query -s $pkg 2>/dev/null|grep Status `;
  if ($status =~ /installed/ and $status !~ /not-installed/) {
    return 1;
  } else {
    warn "\nMISSING PACKAGE: Please install the $pkg package (sudo apt-get install $pkg)\n";
    warn "To disable this check, set NO_PREREQ=1 environment variable\n";
    return 0;
  }
}
sub _pkg_check {
  my (@packages)=@_;
  my $return = 1;
  for my $package (@packages) {
    if ($platform eq 'debian') {
      $return=0 unless _dpkg_check($package->[0]);
    } else {
      warn "NOTE: Will require $package->[1]; make sure the corresponding package is installed!\n";
    }
  }
  return $return;
}
sub check_prereq {
  return 1 if $ENV{NO_PREREQ};
  (
    'Treex-PML-' => sub {
      return 1 if get_current_version('LWP::UserAgent');
      warn "NOTE: Will require libwww-perl; make sure the corresponding package is installed!\n";
      return 0;
    },
    'XML-LibXML-' => sub {
      my $zlib_present = _pkg_check( 
        ['zlib1g-dev' => 'zlib header files'],
      );
      return 1 if (will_install(C => 'libxml2-') && $zlib_present);
      return 1 if ((`xml2-config --libs --cflags 2>/dev/null` =~ /xml/) && $zlib_present);
      return (_pkg_check(
        ['libxml2-dev' => 'libxml2 header files'],
      ) && $zlib_present);
    },
    'XML-LibXSLT-' => sub {
      return 1 if will_install(C => 'libxslt-');
      return 1 if (`xml2-config --libs --cflags 2>/dev/null` =~ /xml/
		     and
		   `xslt-config --libs --cflags 2>/dev/null` =~ /xslt/);
      return _pkg_check(
	['libxml2-dev' => 'libxml2 header files'],
	['libxslt-dev' => 'libxslt header files'],
       );
    },
    'Tk-' => sub {
      return _pkg_check(
	['libx11-dev' => 'libx11 header files'],
	['libxft-dev' => 'libxft2 header files'],
	['libfontconfig1-dev' => 'libfontconfig1 header files'],
	['libpng12-dev' => 'libpng12 header files'],
       );
    }
   )
}

sub on_fetch_from_CPAN {
  fetch_latest_libxml2();
  fetch_latest_libxslt();
}

=head1 NOTE

This configuration file contains a code able to fetch the latest
libxml2 and libxslt sources from the gnome-xml project homepage.
To do that, issue:

  perl -e "require q(./install.cfg); fetch_latest_libxml2()"

and

  perl -e "require q(./install.cfg); fetch_latest_libxslt()"

=cut


sub fetch_latest_libxml2 {
  my $ftp = "ftp://xmlsoft.org/libxml2/";
  # don't wait forever to get the library version
  # It should probably fail after this, but since
  # creating fallback is lengthy and not interesting,
  # we'll leave it to the reader as an exercise.
  # Moreover, no mirror of libxml works now,
  # so it would be necessary to create a new 
  # downloader from e.g.  debian site
  # and find out version laboriously...
  my $listing=`wget -qO- --tries=5 --timeout=30 $ftp`;
  my ($latest) = $listing=~/>LATEST_LIBXML2_IS_([^>]*)</;

  # Get desired version specified in config.
  my %versions = c_module_versions();
  my $version = (defined $versions{'libxml2-'}) ? $versions{'libxml2-'} : $latest;

  # Check the version was determined
  if ($version eq "") {
    print "Could not determine libxml2 version!\n";
    return;
  }
  print "Using $version version of libxml2\n";

  # Warning if newer version is available.
  if ($version ne $latest && $latest ne "") {
    print "================================================================================\n";
    print "NOTICE:\n";
    print "Newer version ($latest) of libxml2 found!\n";
    print "You can update selected version in c_module_versions() of\n";
    print "<svn>/trunk/tred_refactored/devel/unix_install/packages_unix/install.cfg\n";
    print "================================================================================\n";
  }

  # Fetch the source file (if necessary)
  if (-f "libxml2-${version}.tar.gz") {
    print "We already have the: libxml2-${version}.tar.gz\n";
  }
  else {
    print "Fetching libxml2-${version}.tar.gz\n";
    system("wget", "${ftp}libxml2-${version}.tar.gz");
  }
}


sub fetch_latest_libxslt {
  my $ftp = "ftp://xmlsoft.org/libxslt/";
  # don't wait forever to get the library version
  my $listing=`wget -qO- --tries=5 --timeout=30 $ftp`;
  my ($latest) = $listing=~/>LATEST_LIBXSLT_IS_([^>]*)</;

  # Get desired version specified in config.
  my %versions = c_module_versions();
  my $version = (defined $versions{'libxslt-'}) ? $versions{'libxslt-'} : $latest;

  # Check the version was determined
  if ($version eq "") {
    print "Could not determine libxslt version!\n";
    return;
  }
  print "Using $version version of libxslt\n";

  # Warning if newer version is available.
  if ($version ne $latest && $latest ne "") {
    print "================================================================================\n";
    print "NOTICE:\n";
    print "Newer version ($latest) of libxslt found!\n";
    print "You can update selected version in c_module_versions() of\n";
    print "<svn>/trunk/tred_refactored/devel/unix_install/packages_unix/install.cfg\n";
    print "================================================================================\n";
  }

  # Fetch the source file (if necessary)
  if (-f "libxslt-${version}.tar.gz") {
    print "We already have the: libxslt-${version}.tar.gz\n";
  }
  else {
    print "Fetching libxslt-${version}.tar.gz\n";
    system("wget", "${ftp}libxslt-${version}.tar.gz");
  }
}

1;
