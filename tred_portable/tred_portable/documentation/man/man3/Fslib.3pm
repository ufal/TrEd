.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FSLIB 1"
.TH FSLIB 1 "2011-08-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Fslib \- compatibility module, use Treex::PML for new projects instead!
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DEPRECATED\s0!
.PP
This module is provided for backward compatibility only. Please use
Treex::PML instead!
.PP
The module defines Fslib and FSFile (almost by importing/deriving from
Treex::PML and Treex::PML::Document) and provides the following
package aliasing:
.PP
.Vb 7
\&    FSNode           => Treex::PML::Node
\&    FSFormat         => Treex::PML::FSFormat
\&    FSBackend        => Treex::PML::Backend::FS
\&    IOBackend        => Treex::PML::IO
\&    PMLBackend       => Treex::PML::Backend::PML
\&    PMLSchema        => Treex::PML::Schema
\&    PMLInstance      => Treex::PML::Instance
\&
\&    Fslib::Struct    => Treex::PML::Struct
\&    Fslib::List      => Treex::PML::List
\&    Fslib::Alt       => Treex::PML::Alt
\&    Fslib::Seq       => Treex::PML::Seq
\&    Fslib::Container => Treex::PML::Container
\&    Fslib::Attribute => Treex::PML::Attribute
.Ve
.PP
To force creation of objects from the old Fslib family of classes
(left) rather than from the new Treex::PML family (right) in factory
calls, set the environment variable \s-1FORCE_FS_CLASSES\s0 to 1 or call
.PP
.Vb 1
\&        Fslib::Factory\->make_default();
.Ve
.SH "PORTING TO Treex::PML"
.IX Header "PORTING TO Treex::PML"
In order to port code using the old Fslib interfaces to Treex::PML, one has to do the following steps:
.IP "\(bu" 5
Replace 'use Fslib' with 'use Treex::PML'.
.IP "\(bu" 5
Replace 'use OldClass' with 'use NewClass' according to the package
aliasing map given above.
.IP "\(bu" 5
Replace all explicit calls to constructors with calls to the
Treex::PML::Factory creators. Here are the rules:
.Sp
.Vb 5
\&  FSFile\->newFSFile($filename,$enc,\e@backends)
\&    \-\-> Treex::PML::Factory\->createDocumentFromFile($filename,{
\&          encoding=>$enc,
\&          backends=>\e@backends
\&        })
\&
\&  FSFile\->load($filename,{...}) \-\-> Treex::PML::Factory\->createDocumentFromFile($filename,{encoding=>$enc,{...})
\&
\&  FSFile\->new() \-\-> Treex::PML::Factory\->createDocument()
\&
\&  FSFile\->create({...}) \-\-> Treex::PML::Factory\->createDocument({...})
\&
\&  FSNode\->new(...); $node\->set_type($type)
\&     \-\-> Treex::PML::Factory\->createTypedNode($type,...)
\&
\&  FSNode\->new(...); $node\->set_type_by_name($schema,$type_name);
\&     \-\-> Treex::PML::Factory\->createTypedNode($type_name,$schema,...)
\&
\&  FSNode\->new(...)
\&     \-\-> Treex::PML::Factory\->createNode(...)
\&
\&  Fslib::Struct\->new(...)
\&     \-\-> Treex::PML::Factory\->createStructure(...)
\&
\&  Fslib::Seq\->new(...)
\&     \-\-> Treex::PML::Factory\->createSeq(...)
\&
\&  Fslib::Container\->new(...)
\&     \-\-> Treex::PML::Factory\->createContainer(...)
\&
\&  Fslib::List\->new(@array)
\&     \-\-> Treex::PML::Factory\->createList(\e@array)
\&     or
\&     \-\-> Treex::PML::Factory\->createList([@array],1)
\&
\&  Fslib::List\->new_from_ref($array_ref,$reuse)
\&     \-\-> Treex::PML::Factory\->createList($array_ref,$reuse)
\&
\&  Fslib::Alt\->new(@array)
\&     \-\-> Treex::PML::Factory\->createAlt(\e@array)
\&     or
\&     \-\-> Treex::PML::Factory\->createAlt([@array],1)
\&
\&  Fslib::Alt\->new_from_ref($array_ref,$reuse)
\&     \-\-> Treex::PML::Factory\->createAlt($array_ref,$reuse)
\&
\&
\&  PMLInstance\->new()
\&     \-\-> Treex::PML::Factory\->createPMLInstance(...)
\&
\&  PMLInstance\->load(...)
\&     \-\-> Treex::PML::Factory\->createPMLInstance(...)
\&
\&
\&  PMLSchema\->new()
\&     \-\-> Treex::PML::Factory\->createPMLSchema(...)
\&
\&  PMLSchema\->load(...)
\&     \-\-> Treex::PML::Factory\->createPMLSchema(...)
\&
\&  FSFormat\->create(@header)
\&     \-\-> Treex::PML::Factory\->createFSFormat(\e@header)
\&
\&  FSFormat\->new($hashRef)
\&     \-\-> Treex::PML::Factory\->createFSFormat($hashRef)
\&
\&  FSFormat\->readFrom(\e@header)
\&     \-\-> Treex::PML::Factory\->createFSFormat(\e@header)
\&
\&  FSFormat\->readFrom(FILEHANDLE)
\&     \-\-> Treex::PML::Factory\->createFSFormat(FILEHANDLE)
.Ve
.IP "\(bu" 5
Replace calls like:
.Sp
.Vb 3
\&  UNIVERSAL::isa($object,\*(AqOldClass\*(Aq)
\&  $object\->isa($object,\*(AqOldClass\*(Aq)
\&  ref($object) eq \*(AqOldClass\*(Aq
.Ve
.Sp
with
.Sp
.Vb 1
\&  Treex::PML::does($object,\*(AqNewClass\*(Aq);
.Ve
.Sp
or
.Sp
.Vb 1
\&  use UNIVERSAL::DOES;
\&
\&  UNIVERSAL::DOES::does($object,\*(AqNewClass\*(Aq);
.Ve
.IP "\(bu" 5
Replace calls to obsolete Fslib functions (possibly imported!) with
the corresponding object method calls.
.Sp
This is how to rewrite the functions Fslib exported by default (note
that they may appear unqualified in user code):
.Sp
.Vb 4
\&  Next($node)       \-\-> $node\->following
\&  Prev($node)       \-\-> $node\->previous
\&  DeleteLeaf($node) \-\-> $node\->destroy_leaf
\&  Cut($node)        \-\-> $node\->cut()
.Ve
.Sp
This is how to rewrite calls to other Fslib functions (note that they
may therefore appear unqualified in the user code if they were
explicitly imported):
.Sp
.Vb 5
\&  Fslib::Paste($node,$parent,$ord)  \-\-> $node\->paste_on($parent,$ord)
\&  Fslib::Parent($node)              \-\-> $node\->parent
\&  Fslib::LBrother($node)            \-\-> $node\->lbrother
\&  Fslib::RBrother($node)            \-\-> $node\->rbrother
\&  Fslib::FirstSon($node)            \-\-> $node\->firstson
.Ve
.Sp
The following functions should never be used in code ported to
Treex::PML (use node methods \fIpaste_on()\fR, \fIpaste_after()\fR, and
\&\fIpaste_before()\fR instead):
.Sp
.Vb 4
\&  Fslib::SetParent($node,$parent)     \-\-> DON\*(AqT USE, $node\->set_parent($parent) if you must!
\&  Fslib::SetLBrother($node,$brother)  \-\-> DON\*(AqT USE, $node\->set_lbrother($brother) if you must!
\&  Fslib::SetRBrother($node,$brother)  \-\-> DON\*(AqT USE, $node\->set_rbrother($brother) if you must!
\&  Fslib::SetFirstSon($node,$son)      \-\-> DON\*(AqT USE, $node\->set_firstson($son) if you must!
.Ve
.Sp
Although all these functions are also available in Treex::PML
(implementing the rewritten version according to the above rules),
none of them is exported by the Treex::PML module by default and it is
recommended to avoid them.
.IP "\(bu" 5
Replace remaining package function calls with new package function calls, i.e. rewrite
.Sp
.Vb 1
\&  OldClass::function(...);
.Ve
.Sp
to
.Sp
.Vb 1
\&  NewClass::function(...);
.Ve
.Sp
according to the aliasing map given above.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Treex::PML
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by Petr Pajas
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.
.SH "BUGS"
.IX Header "BUGS"
None reported... yet.
