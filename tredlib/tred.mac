## This is macro file for Tred                                 -*-cperl-*-
## author: Petr Pajas
## created: Wed Mar 15 14:50:16 CET 2000

sub file_opened_hook {
  if (exists $grp->{FSFile}->FS->defs->{TR}) {
    print STDERR "file_open_hook: Switching context to Tectogrammatic\n";
    return SwitchContext('Tectogrammatic') 
      unless (CurrentContext eq 'TR_Correction' or
	      CurrentContext eq 'TFA');
  } else {
    print STDERR "file_open_hook: Cannot guess context, using Analytic\n";
    return SwitchContext('Analytic') unless CurrentContext eq 'Analytic_Correction';
  }
}

## add few custom bindings to predefined subroutines

#bind Save to F2 menu Save File
#bind SaveAndPrevFile to F11 menu Save and Go to Next File
#bind SaveAndNextFile to F12 menu Save and Go to Next File
#bind Find to F3 menu Find
#bind FindNext to F4 menu Find Next

#bind NewRBrother to F7 menu New Node (r-brother)
#bind NewSon to Shift+F7 menu New Node (son)
#bind DeleteThisNode to F8 menu Delete Node
#bind CopyValues to F5 menu Copy Values
#bind PasteValues to F6 menu Paste Values
#bind PrevTree to comma
#bind NextTree to period


#bind CutToClipboard to Ctrl+Insert menu Cut Subtree

sub CutToClipboard {
  return unless ($this and Parent($this));
  $nodeClipboard=$this;
  $this=RBrother($this) ? RBrother($this) : Parent($this);
  CutNode($nodeClipboard);
}

#bind PasteFromClipboard to Shift+Insert menu Paste Subtree
sub PasteFromClipboard {
  return unless ($this and $nodeClipboard);
  PasteNode($nodeClipboard,$this);
  $this=$nodeClipboard;
  $nodeClipboard=undef;
}

sub editQuery {
  ## draws a dialog box with one Text widget and Ok/Cancel buttons
  ## expects dialog title and default text
  ## returns text of the Text widget
  my $d;
  my $ed;

  $d=ToplevelFrame()->DialogBox(-title => shift,
			   -buttons => ["OK","Cancel"]);
  main::addBindTags($d,'dialog');
  $d->bind('all','<Tab>',[sub { shift->focusNext; }]);
  $d->bind('all','<Shift-Tab>',[sub { shift->focusPrev; }]);
  my $var=shift;
  my $hintText=shift;
  if ($hintText) {
    my $t=$d->add(qw/Label -wraplength 6i -justify left -text/,$hintText);
    $t->pack(qw/-padx 0 -pady 10 -expand yes -fill both/);
  }
  $ed=$d->Scrolled(qw/Text -height 8 -relief sunken -scrollbars sw -borderwidth 2/,-font => $main::font);
  $ed->insert('0.0',$var);
  $ed->pack(qw/-padx 0 -pady 10 -expand yes -fill both/);
  $d->bind('<Return>' => [sub {1;}]);
  $ed->focus;
  if (main::ShowDialog($d) =~ /OK/) {
    $var=$ed->get('0.0','end');
    $d->destroy();
    return $var;
  } else {
    $d->destroy();
    return undef;
  }
}

sub listQuery {
  my ($select_mode,$vals,$selected)=@_;
  my $top=ToplevelFrame();

  my $d=$top->DialogBox(-title	  => "Select attributes to compare",
			-width	  => '8c',
			-buttons  => ["OK", "Cancel"]);
  $d->bind('all','<Escape>'=> [sub { shift; 
				     shift->{selected_button}='Cancel'; 
				   },$d ]);
  my $l=$d->Scrolled(qw/Listbox -relief sunken 
                        -takefocus 1
                        -scrollbars e/,
		     -selectmode => $select_mode,
		     -height=> min($main::maxDisplayedValues,scalar(@$vals))
		    )->pack(qw/-expand yes -fill both/);
  $l->insert('end',@$vals);
  $l->BindMouseWheelVert();
  my $act=0;
  my %selected = map { $_ => 1 } @$selected;
  for ($a=0;$a<@$vals;$a++)  {
    if ($selected{$$vals[$a]}) {
      $l->selectionSet($a);
      if (not $act) {
	$act=1;
	$l->activate($a);
	$l->see($a);
      }
    }
  }
 $l->focus;
 my $result= &main::ShowDialog($d,$l,$top);

 if ($result=~ /OK/) {
   @$selected=();
   foreach (0 .. $l->size-1) {
     push @$selected, $$vals[$_] if $l->selectionIncludes($_);
   }
   $d->destroy;
   return 1;
 }
 $d->destroy;
 return 0;
}

sub questionQuery {
  my ($title, $message,@buttons) = @_;

  my $d = ToplevelFrame()->DialogBox(-title => $title,
				       -buttons => [@buttons]
				      );
  $d->add('Label', -text => $message, -font => StandardTredFont(), -wraplength => 200)->pack;
  $d->bind('<Return>', sub { my $w=shift; my $f=$w->focusCurrent;
			     $f->Invoke if ($f and $f->isa('Tk::Button')) } );
  $d->bind('all','<Tab>',[sub { shift->focusNext; }]);
  return $d->Show;
}


#bind PerlSearch to Alt+h menu Perl-Search
sub PerlSearch {
  my $label= "Any inserted perl code will be evaluated for each node from current ".
  "as long as it ends with zero or undefined value; the first node for which ".
  "the code succeedes (returns defined non-zero value) will be selected.\n\n".
  "Use \`\$this\' to refer to the current node, \`\$root\' to the root of the tree.\n".
  "If \`\$n\' refers to some node, \`\$n->{attr}\' is its value of the attribute \`attr\'.\n".
  "The governor of a node \$n is \`\$n->parent\', nearest ".
  "left brother of \'\$n\' in the tree structure is \'\$n->lbrother\'".
  "the right brother of \$n is \`\$n->rbrother\'. The first son of \'$n\' ".
  "is referred to as \`\$->firstson\'. If no such node exists, all these functions ".
  "return zero (\`0\') or possibly \`undef\'.".
  "NOTE: \$n->lbrother and \$n->rbrother are not necesserilly displayed on left of \$n\n\n"
    ;

  my $script = editQuery("Search: insert perl expression:",$macPerlSearchScript,$label);
  unless ($script) {
    $FileNotSaved=0;
    return;
  }
  $macPerlSearchScript=$script;
  while ($this=NextNode($this) or NextTree()) {
    last if eval($script);
    if ($@) {
      ErrorMessage($@);
      last;
    }
  };
}

#bind GotoTreeAsk to Alt+g menu Go to...
sub GotoTreeAsk {
  my $to=main::QueryString($grp->{framegroup},"Give a Tree Number","Number");

  $FileNotSaved=0;
  if ($to=~/#/) {
    for (my $i=$grp->{treeNo}+1; $i<=$grp->{FSFile}->lastTreeNo; $i++) {
      GotoTree($i+1), return if ($grp->{FSFile}->treeList->[$i]->{form} =~ $to);
    }
    for (my $i=0; $i<$grp->{treeNo}; $i++) {
      GotoTree($i+1), return if ($grp->{FSFile}->treeList->[$i]->{form} =~ $to);
    }
  } else {
    GotoTree($to) if defined $to;
  }
}

#bind PerlSearchNext to Alt+H menu Perl-Search Next
sub PerlSearchNext {
  if ($macPerlSearchScript) {
    while ($this=Next($this) or NextTree()) {
      last if eval($macPerlSearchScript);
    }
  } else {
    PerlSearch();
  }
}

#bind LastTree to greater menu Go to last tree
#bind LastTree to Ctrl+Next
sub LastTree {
  GotoTree($grp->{FSFile}->lastTreeNo+1);
}

#bind FirstTree to less menu Go to first tree
#bind FirstTree to Ctrl+Prior
sub FirstTree {
  GotoTree(1);
}

#binding-context Tectogrammatic
#include <contrib/tr.mak>

#binding-context TFA
#include <contrib/tfa.mak>

#binding-context Analytic
#include <contrib/ar.mak>

#binding-context Analytic_Correction
#key-binding-adopt Analytic
#include <contrib/a_opravy.mak>

#binding-context TR_Correction
#key-binding-adopt Tectogrammatic
#include <contrib/tr_opravy.mak>

#binding-context TR_Diff
#include <contrib/trdiff.mak>

#binding-context Corref
#include <contrib/tr_corref_common.mak>

#binding-context PDT
#include <contrib/pdt.mak>
