#!/usr/bin/perl

# TODO: rewrite with Net::HTTPServer

use Net::HTTPServer;
use CGI;
use HTTP::Request;
use HTTP::Request::AsCGI;
use constant TRED => '/home/pajas/tred-devel';
use lib map TRED.'/tredlib/libs/'.$_, qw(fslib pml-base);
use Fslib;
BEGIN { Fslib::AddResourcePath(TRED.'/resources',$ENV{HOME}.'/.tred.d'); }
use Tree_Query::CGI;
use IO::Scalar;

sub handle {
  my ($call,$req)=@_;
  my $res = $req->Response;
  my $env = $req->Env();
  my $code;
  my $stdout;
  {
    my $request = HTTP::Request->parse($req->Request);
    my $c = HTTP::Request::AsCGI->new(
      $request,
      HTTPS=>'on',
    )->setup;
    my $cgi = CGI->new();
    $code = $call->($cgi);
    $stdout=$c->stdout;
  }
  while ( my $line = $stdout->getline ) {
    $line=~s/\015?\012$//;
    last unless length $line;
    $res->Header($1,$2) if ($line=~/(.*?): (.*)$/);
  }
  while ( my $line = $stdout->getline ) {
    $res->Print($line);
  }
  $res->Code($code);
  return $res;
}

my $server = new Net::HTTPServer(
  port=>8121,
  log => 'STDOUT',
  type=>'forking',
  ssl=>1,
  ssl_ca => '/home/pajas/.pmltq/server.crt',
  ssl_cert => '/home/pajas/.pmltq/server.crt',
  ssl_key  => '/home/pajas/.pmltq/server.key',
);

$server->RegisterURL({
  '/form'   => sub{ handle(\&Tree_Query::CGI::resp_form,@_) },
  '/query'  => sub{ handle(\&Tree_Query::CGI::resp_query,@_) },
  '/file'   => sub{ handle(\&Tree_Query::CGI::resp_file,@_) },
  '/schema' => sub{ handle(\&Tree_Query::CGI::resp_schema,@_) },
  '/type'   => sub{ handle(\&Tree_Query::CGI::resp_type,@_) },
  '/nodetypes'   => sub{ handle(\&Tree_Query::CGI::resp_nodetypes,@_) },
  '/node'   => sub{ handle(\&Tree_Query::CGI::resp_node,@_) },
});

$server->Start;

$server->Process;
